// Code generated by "enumer --type=TokenCacheType -json -yaml -trimprefix=TokenCacheType"; DO NOT EDIT.

//
package admin

import (
	"encoding/json"
	"fmt"
)

const _TokenCacheTypeName = "InMemory"

var _TokenCacheTypeIndex = [...]uint8{0, 8}

func (i TokenCacheType) String() string {
	if i >= TokenCacheType(len(_TokenCacheTypeIndex)-1) {
		return fmt.Sprintf("TokenCacheType(%d)", i)
	}
	return _TokenCacheTypeName[_TokenCacheTypeIndex[i]:_TokenCacheTypeIndex[i+1]]
}

var _TokenCacheTypeValues = []TokenCacheType{0}

var _TokenCacheTypeNameToValueMap = map[string]TokenCacheType{
	_TokenCacheTypeName[0:8]: 0,
}

// TokenCacheTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TokenCacheTypeString(s string) (TokenCacheType, error) {
	if val, ok := _TokenCacheTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TokenCacheType values", s)
}

// TokenCacheTypeValues returns all values of the enum
func TokenCacheTypeValues() []TokenCacheType {
	return _TokenCacheTypeValues
}

// IsATokenCacheType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TokenCacheType) IsATokenCacheType() bool {
	for _, v := range _TokenCacheTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TokenCacheType
func (i TokenCacheType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TokenCacheType
func (i *TokenCacheType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TokenCacheType should be a string, got %s", data)
	}

	var err error
	*i, err = TokenCacheTypeString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for TokenCacheType
func (i TokenCacheType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for TokenCacheType
func (i *TokenCacheType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = TokenCacheTypeString(s)
	return err
}
