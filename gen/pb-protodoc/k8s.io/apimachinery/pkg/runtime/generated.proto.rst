.. _api_file_k8s.io/apimachinery/pkg/runtime/generated.proto:

generated.proto
===============================================


opyright The Kubernetes Authors.

icensed under the Apache License, Version 2.0 (the "License");
ou may not use this file except in compliance with the License.
ou may obtain a copy of the License at

ttp://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
istributed under the License is distributed on an "AS IS" BASIS,
ITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
ee the License for the specific language governing permissions and
imitations under the License.
This file was autogenerated by go-to-protobuf. Do not edit it manually!

.. _api_msg_k8s.io.apimachinery.pkg.runtime.RawExtension:

k8s.io.apimachinery.pkg.runtime.RawExtension
--------------------------------------------

`[k8s.io.apimachinery.pkg.runtime.RawExtension proto] <https://github.com/lyft/flyteidl/blob/master/protos/k8s.io/apimachinery/pkg/runtime/generated.proto#L71>`_

RawExtension is used to hold extensions in external versions.

To use this, make a field which has RawExtension as its type in your external, versioned
struct, and Object in your internal struct. You also need to register your
various plugin types.

// Internal package:
type MyAPIObject struct {
	runtime.TypeMeta `json:",inline"`
	MyPlugin runtime.Object `json:"myPlugin"`
}
type PluginA struct {
	AOption string `json:"aOption"`
}

// External package:
type MyAPIObject struct {
	runtime.TypeMeta `json:",inline"`
	MyPlugin runtime.RawExtension `json:"myPlugin"`
}
type PluginA struct {
	AOption string `json:"aOption"`
}

// On the wire, the JSON will look something like this:
{
	"kind":"MyAPIObject",
	"apiVersion":"v1",
	"myPlugin": {
		"kind":"PluginA",
		"aOption":"foo",
	},
}

So what happens? Decode first uses json or yaml to unmarshal the serialized data into
your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked.
The next step is to copy (using pkg/conversion) into the internal struct. The runtime
package's DefaultScheme has conversion functions installed which will unpack the
JSON stored in RawExtension, turning it into the correct object type, and storing it
in the Object. (TODO: In the case where the object is of an unknown type, a
runtime.Unknown object will be created and stored.)

+k8s:deepcopy-gen=true
+protobuf=true
+k8s:openapi-gen=true

.. code-block:: json

  {
    "raw": "..."
  }

.. _api_field_k8s.io.apimachinery.pkg.runtime.RawExtension.raw:

raw
  (`bytes <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Raw is the underlying serialization of this object.
  
  TODO: Determine how to detect ContentType and ContentEncoding of 'Raw' data.
  
  


.. _api_msg_k8s.io.apimachinery.pkg.runtime.TypeMeta:

k8s.io.apimachinery.pkg.runtime.TypeMeta
----------------------------------------

`[k8s.io.apimachinery.pkg.runtime.TypeMeta proto] <https://github.com/lyft/flyteidl/blob/master/protos/k8s.io/apimachinery/pkg/runtime/generated.proto#L92>`_

TypeMeta is shared by all top level objects. The proper way to use it is to inline it in your type,
like this:
type MyAwesomeAPIObject struct {
     runtime.TypeMeta    `json:",inline"`
     ... // other fields
}
func (obj *MyAwesomeAPIObject) SetGroupVersionKind(gvk *metav1.GroupVersionKind) { metav1.UpdateTypeMeta(obj,gvk) }; GroupVersionKind() *GroupVersionKind

TypeMeta is provided here for convenience. You may use it directly from this package or define
your own with the same fields.

+k8s:deepcopy-gen=false
+protobuf=true
+k8s:openapi-gen=true

.. code-block:: json

  {
    "apiVersion": "...",
    "kind": "..."
  }

.. _api_field_k8s.io.apimachinery.pkg.runtime.TypeMeta.apiVersion:

apiVersion
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) +optional
  
  
.. _api_field_k8s.io.apimachinery.pkg.runtime.TypeMeta.kind:

kind
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) +optional
  
  


.. _api_msg_k8s.io.apimachinery.pkg.runtime.Unknown:

k8s.io.apimachinery.pkg.runtime.Unknown
---------------------------------------

`[k8s.io.apimachinery.pkg.runtime.Unknown proto] <https://github.com/lyft/flyteidl/blob/master/protos/k8s.io/apimachinery/pkg/runtime/generated.proto#L110>`_

Unknown allows api objects with unknown types to be passed-through. This can be used
to deal with the API objects from a plug-in. Unknown objects still have functioning
TypeMeta features-- kind, version, etc.
TODO: Make this object have easy access to field based accessors and settors for
metadata and field mutatation.

+k8s:deepcopy-gen=true
+k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
+protobuf=true
+k8s:openapi-gen=true

.. code-block:: json

  {
    "typeMeta": "{...}",
    "raw": "...",
    "contentEncoding": "...",
    "contentType": "..."
  }

.. _api_field_k8s.io.apimachinery.pkg.runtime.Unknown.typeMeta:

typeMeta
  (:ref:`k8s.io.apimachinery.pkg.runtime.TypeMeta <api_msg_k8s.io.apimachinery.pkg.runtime.TypeMeta>`) 
  
.. _api_field_k8s.io.apimachinery.pkg.runtime.Unknown.raw:

raw
  (`bytes <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Raw will hold the complete serialized object which couldn't be matched
  with a registered type. Most likely, nothing should be done with this
  except for passing it through the system.
  
  
.. _api_field_k8s.io.apimachinery.pkg.runtime.Unknown.contentEncoding:

contentEncoding
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) ContentEncoding is encoding used to encode 'Raw' data.
  Unspecified means no encoding.
  
  
.. _api_field_k8s.io.apimachinery.pkg.runtime.Unknown.contentType:

contentType
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) ContentType  is serialization method used to serialize 'Raw'.
  Unspecified means ContentTypeJSON.
  
  

