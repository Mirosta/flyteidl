// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl/core/interface.proto

package core

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _interface_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Variable with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Variable) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VariableValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Description

	return nil
}

// VariableValidationError is the validation error returned by
// Variable.Validate if the designated constraints aren't met.
type VariableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VariableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VariableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VariableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VariableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VariableValidationError) ErrorName() string { return "VariableValidationError" }

// Error satisfies the builtin error interface
func (e VariableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVariable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VariableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VariableValidationError{}

// Validate checks the field values on VariableMap with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *VariableMap) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVariables() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VariableMapValidationError{
					field:  fmt.Sprintf("Variables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// VariableMapValidationError is the validation error returned by
// VariableMap.Validate if the designated constraints aren't met.
type VariableMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VariableMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VariableMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VariableMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VariableMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VariableMapValidationError) ErrorName() string { return "VariableMapValidationError" }

// Error satisfies the builtin error interface
func (e VariableMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVariableMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VariableMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VariableMapValidationError{}

// Validate checks the field values on VariableMapFieldEntry with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VariableMapFieldEntry) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VariableMapFieldEntryValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VariableMapFieldEntryValidationError is the validation error returned by
// VariableMapFieldEntry.Validate if the designated constraints aren't met.
type VariableMapFieldEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VariableMapFieldEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VariableMapFieldEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VariableMapFieldEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VariableMapFieldEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VariableMapFieldEntryValidationError) ErrorName() string {
	return "VariableMapFieldEntryValidationError"
}

// Error satisfies the builtin error interface
func (e VariableMapFieldEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVariableMapFieldEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VariableMapFieldEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VariableMapFieldEntryValidationError{}

// Validate checks the field values on TypedInterface with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TypedInterface) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TypedInterfaceValidationError{
				field:  "Inputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOutputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TypedInterfaceValidationError{
				field:  "Outputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TypedInterfaceValidationError is the validation error returned by
// TypedInterface.Validate if the designated constraints aren't met.
type TypedInterfaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TypedInterfaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TypedInterfaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TypedInterfaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TypedInterfaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TypedInterfaceValidationError) ErrorName() string { return "TypedInterfaceValidationError" }

// Error satisfies the builtin error interface
func (e TypedInterfaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTypedInterface.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TypedInterfaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TypedInterfaceValidationError{}

// Validate checks the field values on Parameter with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Parameter) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParameterValidationError{
				field:  "Var",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Behavior.(type) {

	case *Parameter_Default:

		if v, ok := interface{}(m.GetDefault()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParameterValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Parameter_Required:
		// no validation rules for Required

	}

	return nil
}

// ParameterValidationError is the validation error returned by
// Parameter.Validate if the designated constraints aren't met.
type ParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParameterValidationError) ErrorName() string { return "ParameterValidationError" }

// Error satisfies the builtin error interface
func (e ParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParameterValidationError{}

// Validate checks the field values on ParameterMap with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ParameterMap) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParameterMapValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ParameterMapValidationError is the validation error returned by
// ParameterMap.Validate if the designated constraints aren't met.
type ParameterMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParameterMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParameterMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParameterMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParameterMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParameterMapValidationError) ErrorName() string { return "ParameterMapValidationError" }

// Error satisfies the builtin error interface
func (e ParameterMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParameterMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParameterMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParameterMapValidationError{}

// Validate checks the field values on ParameterMapFieldEntry with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ParameterMapFieldEntry) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParameterMapFieldEntryValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ParameterMapFieldEntryValidationError is the validation error returned by
// ParameterMapFieldEntry.Validate if the designated constraints aren't met.
type ParameterMapFieldEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParameterMapFieldEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParameterMapFieldEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParameterMapFieldEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParameterMapFieldEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParameterMapFieldEntryValidationError) ErrorName() string {
	return "ParameterMapFieldEntryValidationError"
}

// Error satisfies the builtin error interface
func (e ParameterMapFieldEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParameterMapFieldEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParameterMapFieldEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParameterMapFieldEntryValidationError{}
