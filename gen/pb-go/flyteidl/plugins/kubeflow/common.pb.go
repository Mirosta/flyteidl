// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/plugins/kubeflow/common.proto

package plugins

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CleanPodPolicy int32

const (
	// The All policy means all pods even completed pods will be deleted immediately when the job finishes.
	CleanPodPolicy_CLEANPOD_POLICY_ALL CleanPodPolicy = 0
	// The Running policy means that only pods still running when a job completes (e.g. parameter servers) will be deleted immediately; completed pods will not be deleted so that the logs will be preserved. This is the default value.
	CleanPodPolicy_CLEANPOD_POLICY_RUNNING CleanPodPolicy = 1
	// The None policy means that no pods will be deleted when the job completes.
	CleanPodPolicy_CLEANPOD_POLICY_NONE CleanPodPolicy = 2
)

var CleanPodPolicy_name = map[int32]string{
	0: "CLEANPOD_POLICY_ALL",
	1: "CLEANPOD_POLICY_RUNNING",
	2: "CLEANPOD_POLICY_NONE",
}

var CleanPodPolicy_value = map[string]int32{
	"CLEANPOD_POLICY_ALL":     0,
	"CLEANPOD_POLICY_RUNNING": 1,
	"CLEANPOD_POLICY_NONE":    2,
}

func (x CleanPodPolicy) String() string {
	return proto.EnumName(CleanPodPolicy_name, int32(x))
}

func (CleanPodPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f625aa9156a15090, []int{0}
}

type RestartPolicy int32

const (
	// Always means the pod will always be restarted. This policy is good for parameter servers
	// since they never exit and should always be restarted in the event of failure.
	RestartPolicy_RESTART_POLICY_ALWAYS RestartPolicy = 0
	// OnFailure means the pod will be restarted if the pod exits due to failure.
	// A non-zero exit code indicates a failure.
	// An exit code of 0 indicates success and the pod will not be restarted.
	// This policy is good for chief and workers.
	RestartPolicy_RESTART_POLICY_ON_FAILURE RestartPolicy = 1
	// Never means pods that terminate will never be restarted.
	// This policy should rarely be used because Kubernetes will terminate pods for any number of reasons.
	RestartPolicy_RESTART_POLICY_NEVER RestartPolicy = 2
)

var RestartPolicy_name = map[int32]string{
	0: "RESTART_POLICY_ALWAYS",
	1: "RESTART_POLICY_ON_FAILURE",
	2: "RESTART_POLICY_NEVER",
}

var RestartPolicy_value = map[string]int32{
	"RESTART_POLICY_ALWAYS":     0,
	"RESTART_POLICY_ON_FAILURE": 1,
	"RESTART_POLICY_NEVER":      2,
}

func (x RestartPolicy) String() string {
	return proto.EnumName(RestartPolicy_name, int32(x))
}

func (RestartPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f625aa9156a15090, []int{1}
}

type RunPolicy struct {
	// CleanPodPolicy defines the policy to kill pods after the job completes. Default to None.
	CleanPodPolicy CleanPodPolicy `protobuf:"varint,1,opt,name=clean_pod_policy,json=cleanPodPolicy,proto3,enum=flyteidl.plugins.kubeflow.CleanPodPolicy" json:"clean_pod_policy,omitempty"`
	// TTL to clean up jobs. Default to infinite.
	TtlSecondsAfterFinished int32 `protobuf:"varint,2,opt,name=ttl_seconds_after_finished,json=ttlSecondsAfterFinished,proto3" json:"ttl_seconds_after_finished,omitempty"`
	// Specifies the duration in seconds relative to the startTime that the job may be active
	// before the system tries to terminate it; value must be positive integer.
	ActiveDeadlineSeconds int32 `protobuf:"varint,3,opt,name=activeDeadlineSeconds,proto3" json:"activeDeadlineSeconds,omitempty"`
	// Number of retries before marking this job failed.
	BackoffLimit         int32    `protobuf:"varint,4,opt,name=backoff_limit,json=backoffLimit,proto3" json:"backoff_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunPolicy) Reset()         { *m = RunPolicy{} }
func (m *RunPolicy) String() string { return proto.CompactTextString(m) }
func (*RunPolicy) ProtoMessage()    {}
func (*RunPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_f625aa9156a15090, []int{0}
}

func (m *RunPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunPolicy.Unmarshal(m, b)
}
func (m *RunPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunPolicy.Marshal(b, m, deterministic)
}
func (m *RunPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunPolicy.Merge(m, src)
}
func (m *RunPolicy) XXX_Size() int {
	return xxx_messageInfo_RunPolicy.Size(m)
}
func (m *RunPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_RunPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_RunPolicy proto.InternalMessageInfo

func (m *RunPolicy) GetCleanPodPolicy() CleanPodPolicy {
	if m != nil {
		return m.CleanPodPolicy
	}
	return CleanPodPolicy_CLEANPOD_POLICY_ALL
}

func (m *RunPolicy) GetTtlSecondsAfterFinished() int32 {
	if m != nil {
		return m.TtlSecondsAfterFinished
	}
	return 0
}

func (m *RunPolicy) GetActiveDeadlineSeconds() int32 {
	if m != nil {
		return m.ActiveDeadlineSeconds
	}
	return 0
}

func (m *RunPolicy) GetBackoffLimit() int32 {
	if m != nil {
		return m.BackoffLimit
	}
	return 0
}

func init() {
	proto.RegisterEnum("flyteidl.plugins.kubeflow.CleanPodPolicy", CleanPodPolicy_name, CleanPodPolicy_value)
	proto.RegisterEnum("flyteidl.plugins.kubeflow.RestartPolicy", RestartPolicy_name, RestartPolicy_value)
	proto.RegisterType((*RunPolicy)(nil), "flyteidl.plugins.kubeflow.RunPolicy")
}

func init() {
	proto.RegisterFile("flyteidl/plugins/kubeflow/common.proto", fileDescriptor_f625aa9156a15090)
}

var fileDescriptor_f625aa9156a15090 = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xdf, 0xcb, 0xd3, 0x30,
	0x14, 0x86, 0xbf, 0xce, 0x1f, 0x60, 0xf0, 0x1b, 0x25, 0x3a, 0xd6, 0x29, 0xc2, 0x50, 0x90, 0x39,
	0xb0, 0x05, 0x15, 0x44, 0xbc, 0xaa, 0x5b, 0x27, 0x83, 0x92, 0x96, 0x74, 0x53, 0xe6, 0x4d, 0x6c,
	0xd3, 0xb4, 0x0b, 0x4b, 0x93, 0xd2, 0xa6, 0xca, 0xfe, 0x73, 0x2f, 0x65, 0x5d, 0xa7, 0xac, 0xe8,
	0x65, 0xcf, 0xf3, 0x9c, 0xf7, 0x14, 0xf2, 0x82, 0x97, 0x99, 0x38, 0x6a, 0xc6, 0x53, 0xe1, 0x94,
	0xa2, 0xc9, 0xb9, 0xac, 0x9d, 0x43, 0x93, 0xb0, 0x4c, 0xa8, 0x9f, 0x0e, 0x55, 0x45, 0xa1, 0xa4,
	0x5d, 0x56, 0x4a, 0x2b, 0x38, 0xb9, 0x78, 0x76, 0xe7, 0xd9, 0x17, 0xef, 0xf9, 0x2f, 0x03, 0x3c,
	0xc0, 0x8d, 0x0c, 0x95, 0xe0, 0xf4, 0x08, 0x23, 0x60, 0x52, 0xc1, 0x62, 0x49, 0x4a, 0x95, 0x92,
	0xb2, 0x9d, 0x59, 0xc6, 0xd4, 0x98, 0x0d, 0xdf, 0xbc, 0xb2, 0xff, 0x9b, 0x61, 0x2f, 0x4e, 0x2b,
	0xa1, 0x4a, 0xcf, 0x21, 0x78, 0x48, 0xaf, 0xbe, 0xe1, 0x47, 0xf0, 0x44, 0x6b, 0x41, 0x6a, 0x46,
	0x95, 0x4c, 0x6b, 0x12, 0x67, 0x9a, 0x55, 0x24, 0xe3, 0x92, 0xd7, 0x7b, 0x96, 0x5a, 0x83, 0xa9,
	0x31, 0xbb, 0x87, 0xc7, 0x5a, 0x8b, 0xe8, 0x2c, 0xb8, 0x27, 0xbe, 0xea, 0x30, 0x7c, 0x07, 0x46,
	0x31, 0xd5, 0xfc, 0x07, 0x5b, 0xb2, 0x38, 0x15, 0x5c, 0xb2, 0xce, 0xb2, 0xee, 0xb4, 0x7b, 0xff,
	0x86, 0xf0, 0x05, 0xb8, 0x4d, 0x62, 0x7a, 0x50, 0x59, 0x46, 0x04, 0x2f, 0xb8, 0xb6, 0xee, 0xb6,
	0xf6, 0xc3, 0x6e, 0xe8, 0x9f, 0x66, 0xf3, 0xef, 0x60, 0x78, 0xfd, 0xe7, 0x70, 0x0c, 0x1e, 0x2d,
	0x7c, 0xcf, 0x45, 0x61, 0xb0, 0x24, 0x61, 0xe0, 0xaf, 0x17, 0x3b, 0xe2, 0xfa, 0xbe, 0x79, 0x03,
	0x9f, 0x82, 0x71, 0x1f, 0xe0, 0x2d, 0x42, 0x6b, 0xf4, 0xd9, 0x34, 0xa0, 0x05, 0x1e, 0xf7, 0x21,
	0x0a, 0x90, 0x67, 0x0e, 0xe6, 0x14, 0xdc, 0x62, 0x56, 0xeb, 0xb8, 0xd2, 0xdd, 0x81, 0x09, 0x18,
	0x61, 0x2f, 0xda, 0xb8, 0x78, 0xf3, 0x37, 0xff, 0xab, 0xbb, 0x8b, 0xcc, 0x1b, 0xf8, 0x0c, 0x4c,
	0x7a, 0x28, 0x40, 0x64, 0xe5, 0xae, 0xfd, 0x2d, 0xf6, 0xce, 0x47, 0x7a, 0x18, 0x79, 0x5f, 0x3c,
	0x6c, 0x0e, 0x3e, 0x7d, 0xf8, 0xf6, 0x3e, 0xe7, 0x7a, 0xdf, 0x24, 0x36, 0x55, 0x85, 0xd3, 0xbe,
	0x92, 0xaa, 0x72, 0xe7, 0x4f, 0x35, 0x72, 0x26, 0x9d, 0x32, 0x79, 0x9d, 0x2b, 0xa7, 0xdf, 0x96,
	0xe4, 0x7e, 0x5b, 0x8f, 0xb7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x72, 0xf7, 0xb4, 0xd8, 0x48,
	0x02, 0x00, 0x00,
}
