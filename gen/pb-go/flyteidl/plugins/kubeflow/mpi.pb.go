// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/plugins/kubeflow/mpi.proto

package plugins

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Custom proto for plugin that enables distributed training using https://github.com/kubeflow/mpi-operator
type DistributedMPITrainingTask struct {
	// Worker replicas spec
	WorkerReplicas *DistributedMPITrainingReplicaSpec `protobuf:"bytes,1,opt,name=worker_replicas,json=workerReplicas,proto3" json:"worker_replicas,omitempty"`
	// Master replicas spec
	LauncherReplicas *DistributedMPITrainingReplicaSpec `protobuf:"bytes,2,opt,name=launcher_replicas,json=launcherReplicas,proto3" json:"launcher_replicas,omitempty"`
	// RunPolicy encapsulates various runtime policies of the distributed training
	// job, for example how to clean up resources and how long the job can stay
	// active.
	RunPolicy *RunPolicy `protobuf:"bytes,3,opt,name=run_policy,json=runPolicy,proto3" json:"run_policy,omitempty"`
	// SuccessPolicy defines the policy to mark the TFJob as succeeded. Default to None.
	SuccessPolicy        SuccessPolicy `protobuf:"varint,4,opt,name=success_policy,json=successPolicy,proto3,enum=flyteidl.plugins.kubeflow.SuccessPolicy" json:"success_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DistributedMPITrainingTask) Reset()         { *m = DistributedMPITrainingTask{} }
func (m *DistributedMPITrainingTask) String() string { return proto.CompactTextString(m) }
func (*DistributedMPITrainingTask) ProtoMessage()    {}
func (*DistributedMPITrainingTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_298b02c608b0cddf, []int{0}
}

func (m *DistributedMPITrainingTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributedMPITrainingTask.Unmarshal(m, b)
}
func (m *DistributedMPITrainingTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributedMPITrainingTask.Marshal(b, m, deterministic)
}
func (m *DistributedMPITrainingTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributedMPITrainingTask.Merge(m, src)
}
func (m *DistributedMPITrainingTask) XXX_Size() int {
	return xxx_messageInfo_DistributedMPITrainingTask.Size(m)
}
func (m *DistributedMPITrainingTask) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributedMPITrainingTask.DiscardUnknown(m)
}

var xxx_messageInfo_DistributedMPITrainingTask proto.InternalMessageInfo

func (m *DistributedMPITrainingTask) GetWorkerReplicas() *DistributedMPITrainingReplicaSpec {
	if m != nil {
		return m.WorkerReplicas
	}
	return nil
}

func (m *DistributedMPITrainingTask) GetLauncherReplicas() *DistributedMPITrainingReplicaSpec {
	if m != nil {
		return m.LauncherReplicas
	}
	return nil
}

func (m *DistributedMPITrainingTask) GetRunPolicy() *RunPolicy {
	if m != nil {
		return m.RunPolicy
	}
	return nil
}

func (m *DistributedMPITrainingTask) GetSuccessPolicy() SuccessPolicy {
	if m != nil {
		return m.SuccessPolicy
	}
	return SuccessPolicy_SUCCESS_POLICY_DEFAULT
}

type DistributedMPITrainingReplicaSpec struct {
	// Number of workers
	Replicas int32 `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// Unique name of a PodTemplate k8s resource to be used as the base configuration.
	// PodTemplate specified here will be overriden by the pod template specified at the task metedata level.
	PodTemplateName string `protobuf:"bytes,2,opt,name=pod_template_name,json=podTemplateName,proto3" json:"pod_template_name,omitempty"`
	// Restart policy for the worker
	RestartPolicy        RestartPolicy `protobuf:"varint,3,opt,name=restart_policy,json=restartPolicy,proto3,enum=flyteidl.plugins.kubeflow.RestartPolicy" json:"restart_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DistributedMPITrainingReplicaSpec) Reset()         { *m = DistributedMPITrainingReplicaSpec{} }
func (m *DistributedMPITrainingReplicaSpec) String() string { return proto.CompactTextString(m) }
func (*DistributedMPITrainingReplicaSpec) ProtoMessage()    {}
func (*DistributedMPITrainingReplicaSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_298b02c608b0cddf, []int{1}
}

func (m *DistributedMPITrainingReplicaSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributedMPITrainingReplicaSpec.Unmarshal(m, b)
}
func (m *DistributedMPITrainingReplicaSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributedMPITrainingReplicaSpec.Marshal(b, m, deterministic)
}
func (m *DistributedMPITrainingReplicaSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributedMPITrainingReplicaSpec.Merge(m, src)
}
func (m *DistributedMPITrainingReplicaSpec) XXX_Size() int {
	return xxx_messageInfo_DistributedMPITrainingReplicaSpec.Size(m)
}
func (m *DistributedMPITrainingReplicaSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributedMPITrainingReplicaSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DistributedMPITrainingReplicaSpec proto.InternalMessageInfo

func (m *DistributedMPITrainingReplicaSpec) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *DistributedMPITrainingReplicaSpec) GetPodTemplateName() string {
	if m != nil {
		return m.PodTemplateName
	}
	return ""
}

func (m *DistributedMPITrainingReplicaSpec) GetRestartPolicy() RestartPolicy {
	if m != nil {
		return m.RestartPolicy
	}
	return RestartPolicy_RESTART_POLICY_ALWAYS
}

func init() {
	proto.RegisterType((*DistributedMPITrainingTask)(nil), "flyteidl.plugins.kubeflow.DistributedMPITrainingTask")
	proto.RegisterType((*DistributedMPITrainingReplicaSpec)(nil), "flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec")
}

func init() {
	proto.RegisterFile("flyteidl/plugins/kubeflow/mpi.proto", fileDescriptor_298b02c608b0cddf)
}

var fileDescriptor_298b02c608b0cddf = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xcb, 0x4b, 0xc3, 0x40,
	0x10, 0xc6, 0x89, 0x55, 0xb1, 0x2b, 0xb6, 0x36, 0xa7, 0xda, 0x53, 0xad, 0x22, 0x45, 0x30, 0x81,
	0x7a, 0x10, 0xc1, 0x93, 0x7a, 0xf1, 0xa0, 0x96, 0xb4, 0x27, 0x2f, 0x61, 0xb3, 0x99, 0xa6, 0x4b,
	0xf7, 0xc5, 0x3e, 0x28, 0xbd, 0xfb, 0x67, 0xf9, 0xc7, 0x89, 0x79, 0x94, 0x28, 0xb6, 0x5e, 0xbc,
	0x65, 0x86, 0x6f, 0x7e, 0xdf, 0x64, 0xf6, 0x43, 0x67, 0x33, 0xb6, 0xb2, 0x40, 0x53, 0x16, 0x2a,
	0xe6, 0x32, 0x2a, 0x4c, 0xb8, 0x70, 0x09, 0xcc, 0x98, 0x5c, 0x86, 0x5c, 0xd1, 0x40, 0x69, 0x69,
	0xa5, 0x7f, 0x52, 0x89, 0x82, 0x52, 0x14, 0x54, 0xa2, 0xde, 0xc5, 0xe6, 0x79, 0x22, 0x39, 0x97,
	0xa2, 0x40, 0x0c, 0xde, 0x1b, 0xa8, 0xf7, 0x48, 0x8d, 0xd5, 0x34, 0x71, 0x16, 0xd2, 0xe7, 0xf1,
	0xd3, 0x54, 0x63, 0x2a, 0xa8, 0xc8, 0xa6, 0xd8, 0x2c, 0x7c, 0x40, 0xed, 0xa5, 0xd4, 0x0b, 0xd0,
	0xb1, 0x06, 0xc5, 0x28, 0xc1, 0xa6, 0xeb, 0xf5, 0xbd, 0xe1, 0xe1, 0xe8, 0x2e, 0xd8, 0xe8, 0x1d,
	0xfc, 0xce, 0x8b, 0x0a, 0xc0, 0x44, 0x01, 0x89, 0x5a, 0x05, 0xb4, 0x6c, 0x19, 0x9f, 0xa2, 0x0e,
	0xc3, 0x4e, 0x90, 0x79, 0xdd, 0x68, 0xe7, 0x1f, 0x8c, 0x8e, 0x2b, 0xec, 0xda, 0xea, 0x01, 0x21,
	0xed, 0x44, 0xac, 0x24, 0xa3, 0x64, 0xd5, 0x6d, 0xe4, 0x1e, 0xe7, 0x5b, 0x3c, 0x22, 0x27, 0xc6,
	0xb9, 0x36, 0x6a, 0xea, 0xea, 0xd3, 0x7f, 0x45, 0x2d, 0xe3, 0x08, 0x01, 0x63, 0x2a, 0xd0, 0x6e,
	0xdf, 0x1b, 0xb6, 0x46, 0xc3, 0x2d, 0xa0, 0x49, 0x31, 0x50, 0xc2, 0x8e, 0x4c, 0xbd, 0x1c, 0x7c,
	0x78, 0xe8, 0xf4, 0xcf, 0xbf, 0xf1, 0x7b, 0xe8, 0xe0, 0xdb, 0x33, 0xec, 0x45, 0xeb, 0xda, 0xbf,
	0x44, 0x1d, 0x25, 0xd3, 0xd8, 0x02, 0x57, 0x0c, 0x5b, 0x88, 0x05, 0xe6, 0x90, 0x9f, 0xb0, 0x19,
	0xb5, 0x95, 0x4c, 0xa7, 0x65, 0xff, 0x05, 0x73, 0xf8, 0x5a, 0x5f, 0x83, 0xb1, 0x58, 0xdb, 0xfa,
	0x1d, 0xb6, 0xaf, 0x1f, 0x15, 0x03, 0xd5, 0xfa, 0xba, 0x5e, 0xde, 0xdf, 0xbe, 0xdd, 0x64, 0xd4,
	0xce, 0x5d, 0x12, 0x10, 0xc9, 0xc3, 0x1c, 0x22, 0x75, 0x16, 0xae, 0x33, 0x98, 0x81, 0x08, 0x55,
	0x72, 0x95, 0xc9, 0xf0, 0x67, 0x2c, 0x93, 0xfd, 0x3c, 0x87, 0xd7, 0x9f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x25, 0x16, 0x02, 0x0c, 0xf1, 0x02, 0x00, 0x00,
}
