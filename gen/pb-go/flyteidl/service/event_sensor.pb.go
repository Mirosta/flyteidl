// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/service/event_sensor.proto

package service

import (
	context "context"
	fmt "fmt"
	event "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/event"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("flyteidl/service/event_sensor.proto", fileDescriptor_c061cb396e84a236)
}

var fileDescriptor_c061cb396e84a236 = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcd, 0x8a, 0x13, 0x41,
	0x10, 0xc7, 0x89, 0x87, 0x3d, 0x0c, 0x08, 0xa1, 0x05, 0x0f, 0xed, 0xa2, 0xbd, 0x59, 0xf5, 0xe0,
	0x3a, 0xd3, 0xf8, 0xc1, 0xfa, 0x81, 0x97, 0x08, 0xb2, 0x17, 0x51, 0xd8, 0x5d, 0x11, 0xbc, 0x2c,
	0x9d, 0x99, 0x9a, 0x4e, 0x43, 0xd2, 0x3d, 0x76, 0x55, 0x66, 0x5d, 0xc4, 0x8b, 0x8f, 0x10, 0x9f,
	0xc4, 0xc3, 0x3e, 0x89, 0xde, 0xbc, 0xfa, 0x20, 0x92, 0xee, 0x99, 0x61, 0x74, 0x03, 0x59, 0x3c,
	0x05, 0x52, 0xbf, 0x54, 0xfd, 0x7f, 0xd5, 0xdd, 0x49, 0x76, 0xcb, 0xd9, 0x19, 0x81, 0x29, 0x66,
	0x12, 0xc1, 0xd7, 0x26, 0x07, 0x09, 0x35, 0x58, 0x3a, 0x41, 0xb0, 0xe8, 0x7c, 0x56, 0x79, 0x47,
	0x8e, 0x0d, 0x5b, 0x28, 0x6b, 0x20, 0xbe, 0xad, 0x9d, 0xd3, 0x33, 0x90, 0xaa, 0x32, 0x52, 0x59,
	0xeb, 0x48, 0x91, 0x71, 0x16, 0x23, 0xcf, 0x6f, 0x74, 0x4d, 0x43, 0x33, 0xd9, 0x6f, 0xc6, 0x77,
	0xd6, 0x16, 0x4f, 0x90, 0x14, 0x41, 0x83, 0xdc, 0x0f, 0x1f, 0x79, 0xaa, 0xc1, 0xa6, 0x78, 0xaa,
	0xb4, 0x06, 0x2f, 0x5d, 0x15, 0x26, 0x5c, 0x9c, 0xf6, 0xf0, 0x7c, 0x2b, 0x61, 0xaf, 0x56, 0xad,
	0x8e, 0x42, 0xa7, 0xa3, 0x18, 0x91, 0x7d, 0x1f, 0x24, 0xc3, 0xd7, 0x06, 0x29, 0x94, 0x8e, 0x95,
	0xd7, 0x40, 0xc8, 0xee, 0x66, 0x9d, 0x4a, 0x98, 0x9e, 0xf5, 0xaa, 0x2b, 0xf8, 0x10, 0x3e, 0x2e,
	0x00, 0x89, 0xdf, 0xda, 0xc0, 0x8d, 0x8e, 0x97, 0xe3, 0x94, 0xef, 0x1d, 0x02, 0x79, 0x03, 0x35,
	0x08, 0xf8, 0x64, 0x90, 0x8c, 0xd5, 0x22, 0xd0, 0x82, 0x02, 0x28, 0x0a, 0x28, 0x8d, 0x35, 0x31,
	0xeb, 0xd7, 0x1f, 0xbf, 0xbf, 0x5d, 0xb9, 0xc9, 0xb6, 0xc3, 0xca, 0xea, 0x07, 0x32, 0x22, 0x28,
	0x3f, 0xc7, 0x7d, 0xd3, 0x59, 0x05, 0x5f, 0xd8, 0xf9, 0x20, 0xb9, 0x1a, 0x26, 0xbd, 0xcd, 0xf3,
	0x85, 0xf7, 0x50, 0xb0, 0xdb, 0x6b, 0x83, 0xb4, 0xe5, 0x36, 0xee, 0x9d, 0x0d, 0x14, 0x56, 0xce,
	0x22, 0x8c, 0xde, 0x2f, 0xc7, 0x2f, 0xf8, 0xf3, 0x37, 0x8e, 0x4c, 0x69, 0x00, 0x85, 0x12, 0x85,
	0x3b, 0xb5, 0x48, 0x1e, 0xd4, 0x5c, 0xe4, 0xce, 0xe2, 0x62, 0x0e, 0x5e, 0xd0, 0x54, 0x91, 0x50,
	0xb6, 0x31, 0x99, 0x2a, 0x14, 0xae, 0xe9, 0x13, 0x1d, 0xd8, 0x68, 0xd8, 0x3a, 0xb4, 0x05, 0xf6,
	0x73, 0x90, 0x5c, 0x3b, 0x00, 0xea, 0x9f, 0xc2, 0xea, 0x38, 0xd9, 0xbd, 0xb5, 0xb9, 0x7a, 0xc4,
	0x01, 0x74, 0x2b, 0xdf, 0xbb, 0x14, 0xdb, 0x98, 0x14, 0xcb, 0xf1, 0x53, 0xbe, 0xdf, 0xad, 0x1f,
	0x55, 0x0d, 0x85, 0x08, 0x57, 0x48, 0x94, 0xce, 0x0b, 0x25, 0xb0, 0x82, 0xdc, 0x94, 0x26, 0x6f,
	0x34, 0xe2, 0x25, 0x13, 0xab, 0x2d, 0x47, 0x8b, 0x5d, 0xb6, 0xd3, 0x5a, 0xf4, 0x2f, 0xe0, 0xdf,
	0xc7, 0xf1, 0x6b, 0x90, 0x5c, 0x7f, 0x57, 0x15, 0x8a, 0xe0, 0x82, 0x59, 0xba, 0x29, 0x6d, 0xfc,
	0x5d, 0x2b, 0x97, 0x5d, 0x16, 0x6f, 0xfc, 0x26, 0xcb, 0xf1, 0x3e, 0x7f, 0x1c, 0xbf, 0xfc, 0x1f,
	0x3b, 0xbe, 0xd9, 0xee, 0xe5, 0xb3, 0x0f, 0x4f, 0xb4, 0xa1, 0xe9, 0x62, 0x92, 0xe5, 0x6e, 0x2e,
	0x43, 0x3e, 0xe7, 0xb5, 0xec, 0x9e, 0xa7, 0x06, 0x2b, 0xab, 0x49, 0xaa, 0x9d, 0xfc, 0xf7, 0x3f,
	0x62, 0xb2, 0x15, 0x5e, 0xde, 0xa3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe6, 0xe2, 0x79, 0xe9,
	0x3e, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventSensorServiceClient is the client API for EventSensorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventSensorServiceClient interface {
	ListEventTargets(ctx context.Context, in *event.EventTargetListRequest, opts ...grpc.CallOption) (*event.EventTargetList, error)
	// Enqueues an event target to be executed asynchronously.
	EventOccurred(ctx context.Context, in *event.EventOccurredRequest, opts ...grpc.CallOption) (*event.EventOccurredResponse, error)
	GetEventSensorState(ctx context.Context, in *event.EventSensorStateGetRequest, opts ...grpc.CallOption) (*event.EventSensorStateGetResponse, error)
	UpdateEventSensorState(ctx context.Context, in *event.EventSensorStateUpdateRequest, opts ...grpc.CallOption) (*event.EventSensorStateUpdateResponse, error)
}

type eventSensorServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventSensorServiceClient(cc *grpc.ClientConn) EventSensorServiceClient {
	return &eventSensorServiceClient{cc}
}

func (c *eventSensorServiceClient) ListEventTargets(ctx context.Context, in *event.EventTargetListRequest, opts ...grpc.CallOption) (*event.EventTargetList, error) {
	out := new(event.EventTargetList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.EventSensorService/ListEventTargets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventSensorServiceClient) EventOccurred(ctx context.Context, in *event.EventOccurredRequest, opts ...grpc.CallOption) (*event.EventOccurredResponse, error) {
	out := new(event.EventOccurredResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.EventSensorService/EventOccurred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventSensorServiceClient) GetEventSensorState(ctx context.Context, in *event.EventSensorStateGetRequest, opts ...grpc.CallOption) (*event.EventSensorStateGetResponse, error) {
	out := new(event.EventSensorStateGetResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.EventSensorService/GetEventSensorState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventSensorServiceClient) UpdateEventSensorState(ctx context.Context, in *event.EventSensorStateUpdateRequest, opts ...grpc.CallOption) (*event.EventSensorStateUpdateResponse, error) {
	out := new(event.EventSensorStateUpdateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.EventSensorService/UpdateEventSensorState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventSensorServiceServer is the server API for EventSensorService service.
type EventSensorServiceServer interface {
	ListEventTargets(context.Context, *event.EventTargetListRequest) (*event.EventTargetList, error)
	// Enqueues an event target to be executed asynchronously.
	EventOccurred(context.Context, *event.EventOccurredRequest) (*event.EventOccurredResponse, error)
	GetEventSensorState(context.Context, *event.EventSensorStateGetRequest) (*event.EventSensorStateGetResponse, error)
	UpdateEventSensorState(context.Context, *event.EventSensorStateUpdateRequest) (*event.EventSensorStateUpdateResponse, error)
}

// UnimplementedEventSensorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventSensorServiceServer struct {
}

func (*UnimplementedEventSensorServiceServer) ListEventTargets(ctx context.Context, req *event.EventTargetListRequest) (*event.EventTargetList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventTargets not implemented")
}
func (*UnimplementedEventSensorServiceServer) EventOccurred(ctx context.Context, req *event.EventOccurredRequest) (*event.EventOccurredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventOccurred not implemented")
}
func (*UnimplementedEventSensorServiceServer) GetEventSensorState(ctx context.Context, req *event.EventSensorStateGetRequest) (*event.EventSensorStateGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventSensorState not implemented")
}
func (*UnimplementedEventSensorServiceServer) UpdateEventSensorState(ctx context.Context, req *event.EventSensorStateUpdateRequest) (*event.EventSensorStateUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventSensorState not implemented")
}

func RegisterEventSensorServiceServer(s *grpc.Server, srv EventSensorServiceServer) {
	s.RegisterService(&_EventSensorService_serviceDesc, srv)
}

func _EventSensorService_ListEventTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.EventTargetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSensorServiceServer).ListEventTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.EventSensorService/ListEventTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSensorServiceServer).ListEventTargets(ctx, req.(*event.EventTargetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventSensorService_EventOccurred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.EventOccurredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSensorServiceServer).EventOccurred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.EventSensorService/EventOccurred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSensorServiceServer).EventOccurred(ctx, req.(*event.EventOccurredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventSensorService_GetEventSensorState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.EventSensorStateGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSensorServiceServer).GetEventSensorState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.EventSensorService/GetEventSensorState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSensorServiceServer).GetEventSensorState(ctx, req.(*event.EventSensorStateGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventSensorService_UpdateEventSensorState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.EventSensorStateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSensorServiceServer).UpdateEventSensorState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.EventSensorService/UpdateEventSensorState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSensorServiceServer).UpdateEventSensorState(ctx, req.(*event.EventSensorStateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventSensorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flyteidl.service.EventSensorService",
	HandlerType: (*EventSensorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEventTargets",
			Handler:    _EventSensorService_ListEventTargets_Handler,
		},
		{
			MethodName: "EventOccurred",
			Handler:    _EventSensorService_EventOccurred_Handler,
		},
		{
			MethodName: "GetEventSensorState",
			Handler:    _EventSensorService_GetEventSensorState_Handler,
		},
		{
			MethodName: "UpdateEventSensorState",
			Handler:    _EventSensorService_UpdateEventSensorState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flyteidl/service/event_sensor.proto",
}
