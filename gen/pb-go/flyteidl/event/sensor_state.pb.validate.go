// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl/event/sensor_state.proto

package event

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _sensor_state_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on EventSensorState with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EventSensorState) Validate() error {
	if m == nil {
		return nil
	}

	switch m.State.(type) {

	case *EventSensorState_Uri:
		// no validation rules for Uri

	case *EventSensorState_CustomInfo:

		if v, ok := interface{}(m.GetCustomInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventSensorStateValidationError{
					field:  "CustomInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EventSensorStateValidationError is the validation error returned by
// EventSensorState.Validate if the designated constraints aren't met.
type EventSensorStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventSensorStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventSensorStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventSensorStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventSensorStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventSensorStateValidationError) ErrorName() string { return "EventSensorStateValidationError" }

// Error satisfies the builtin error interface
func (e EventSensorStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventSensorState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventSensorStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventSensorStateValidationError{}

// Validate checks the field values on EventSensorStateGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EventSensorStateGetRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EventType

	return nil
}

// EventSensorStateGetRequestValidationError is the validation error returned
// by EventSensorStateGetRequest.Validate if the designated constraints aren't met.
type EventSensorStateGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventSensorStateGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventSensorStateGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventSensorStateGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventSensorStateGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventSensorStateGetRequestValidationError) ErrorName() string {
	return "EventSensorStateGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EventSensorStateGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventSensorStateGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventSensorStateGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventSensorStateGetRequestValidationError{}

// Validate checks the field values on EventSensorStateGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EventSensorStateGetResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventSensorStateGetResponseValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventSensorStateGetResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EventSensorStateGetResponseValidationError is the validation error returned
// by EventSensorStateGetResponse.Validate if the designated constraints
// aren't met.
type EventSensorStateGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventSensorStateGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventSensorStateGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventSensorStateGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventSensorStateGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventSensorStateGetResponseValidationError) ErrorName() string {
	return "EventSensorStateGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EventSensorStateGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventSensorStateGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventSensorStateGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventSensorStateGetResponseValidationError{}

// Validate checks the field values on EventSensorStateUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EventSensorStateUpdateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EventType

	if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventSensorStateUpdateRequestValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventSensorStateUpdateRequestValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EventSensorStateUpdateRequestValidationError is the validation error
// returned by EventSensorStateUpdateRequest.Validate if the designated
// constraints aren't met.
type EventSensorStateUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventSensorStateUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventSensorStateUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventSensorStateUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventSensorStateUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventSensorStateUpdateRequestValidationError) ErrorName() string {
	return "EventSensorStateUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EventSensorStateUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventSensorStateUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventSensorStateUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventSensorStateUpdateRequestValidationError{}

// Validate checks the field values on EventSensorStateUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EventSensorStateUpdateResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// EventSensorStateUpdateResponseValidationError is the validation error
// returned by EventSensorStateUpdateResponse.Validate if the designated
// constraints aren't met.
type EventSensorStateUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventSensorStateUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventSensorStateUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventSensorStateUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventSensorStateUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventSensorStateUpdateResponseValidationError) ErrorName() string {
	return "EventSensorStateUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EventSensorStateUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventSensorStateUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventSensorStateUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventSensorStateUpdateResponseValidationError{}
