// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/event/sensor.proto

package event

import (
	fmt "fmt"
	admin "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin"
	core "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	_struct "github.com/golang/protobuf/ptypes/struct"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Specifies what filetype action triggers the event.
type RemoteFileEvent_Action int32

const (
	// Trigger the event when a matching file has been created.
	RemoteFileEvent_CREATE RemoteFileEvent_Action = 0
)

var RemoteFileEvent_Action_name = map[int32]string{
	0: "CREATE",
}

var RemoteFileEvent_Action_value = map[string]int32{
	"CREATE": 0,
}

func (x RemoteFileEvent_Action) String() string {
	return proto.EnumName(RemoteFileEvent_Action_name, int32(x))
}

func (RemoteFileEvent_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b1170b584301cee1, []int{2, 0}
}

// This message is used to configure events triggered by a terminated workflow execution matching
// one of the designated phases.
type WorkflowEvent struct {
	// Specifies the upstream workflow whose completion triggers this event.
	//
	// Types that are valid to be assigned to Id:
	//	*WorkflowEvent_ExecutionIdentifier
	//	*WorkflowEvent_NamedEntityIdentifier
	Id                   isWorkflowEvent_Id             `protobuf_oneof:"id"`
	Phases               []core.WorkflowExecution_Phase `protobuf:"varint,3,rep,packed,name=phases,proto3,enum=flyteidl.core.WorkflowExecution_Phase" json:"phases,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *WorkflowEvent) Reset()         { *m = WorkflowEvent{} }
func (m *WorkflowEvent) String() string { return proto.CompactTextString(m) }
func (*WorkflowEvent) ProtoMessage()    {}
func (*WorkflowEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1170b584301cee1, []int{0}
}

func (m *WorkflowEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkflowEvent.Unmarshal(m, b)
}
func (m *WorkflowEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkflowEvent.Marshal(b, m, deterministic)
}
func (m *WorkflowEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowEvent.Merge(m, src)
}
func (m *WorkflowEvent) XXX_Size() int {
	return xxx_messageInfo_WorkflowEvent.Size(m)
}
func (m *WorkflowEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowEvent.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowEvent proto.InternalMessageInfo

type isWorkflowEvent_Id interface {
	isWorkflowEvent_Id()
}

type WorkflowEvent_ExecutionIdentifier struct {
	ExecutionIdentifier *core.Identifier `protobuf:"bytes,1,opt,name=execution_identifier,json=executionIdentifier,proto3,oneof"`
}

type WorkflowEvent_NamedEntityIdentifier struct {
	NamedEntityIdentifier *core.NamedEntityIdentifier `protobuf:"bytes,2,opt,name=named_entity_identifier,json=namedEntityIdentifier,proto3,oneof"`
}

func (*WorkflowEvent_ExecutionIdentifier) isWorkflowEvent_Id() {}

func (*WorkflowEvent_NamedEntityIdentifier) isWorkflowEvent_Id() {}

func (m *WorkflowEvent) GetId() isWorkflowEvent_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *WorkflowEvent) GetExecutionIdentifier() *core.Identifier {
	if x, ok := m.GetId().(*WorkflowEvent_ExecutionIdentifier); ok {
		return x.ExecutionIdentifier
	}
	return nil
}

func (m *WorkflowEvent) GetNamedEntityIdentifier() *core.NamedEntityIdentifier {
	if x, ok := m.GetId().(*WorkflowEvent_NamedEntityIdentifier); ok {
		return x.NamedEntityIdentifier
	}
	return nil
}

func (m *WorkflowEvent) GetPhases() []core.WorkflowExecution_Phase {
	if m != nil {
		return m.Phases
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WorkflowEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WorkflowEvent_ExecutionIdentifier)(nil),
		(*WorkflowEvent_NamedEntityIdentifier)(nil),
	}
}

// A file prefix defines a matchable prefix with an optional regex sub-pattern for which to trigger events.
// For example, with just the prefix s3://my-s3-bucket/foo/ matches all files under the prefix
// But with pattern "*/bar/*.txt", the file s3://my-s3-bucket/foo/1.txt would no longer match, whereas s3://my-s3-bucket/foo/2/bar/1.txt would.
type FilePrefix struct {
	// Full
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Optional, pattern to match within the prefix
	// +optional
	Pattern              string   `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FilePrefix) Reset()         { *m = FilePrefix{} }
func (m *FilePrefix) String() string { return proto.CompactTextString(m) }
func (*FilePrefix) ProtoMessage()    {}
func (*FilePrefix) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1170b584301cee1, []int{1}
}

func (m *FilePrefix) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilePrefix.Unmarshal(m, b)
}
func (m *FilePrefix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilePrefix.Marshal(b, m, deterministic)
}
func (m *FilePrefix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilePrefix.Merge(m, src)
}
func (m *FilePrefix) XXX_Size() int {
	return xxx_messageInfo_FilePrefix.Size(m)
}
func (m *FilePrefix) XXX_DiscardUnknown() {
	xxx_messageInfo_FilePrefix.DiscardUnknown(m)
}

var xxx_messageInfo_FilePrefix proto.InternalMessageInfo

func (m *FilePrefix) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *FilePrefix) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

// Defines events triggered by the designated action performed on the specified file (or prefix).
type RemoteFileEvent struct {
	// Types that are valid to be assigned to File:
	//	*RemoteFileEvent_Path
	//	*RemoteFileEvent_Prefix
	File                 isRemoteFileEvent_File `protobuf_oneof:"file"`
	Action               RemoteFileEvent_Action `protobuf:"varint,3,opt,name=action,proto3,enum=flyteidl.event.RemoteFileEvent_Action" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RemoteFileEvent) Reset()         { *m = RemoteFileEvent{} }
func (m *RemoteFileEvent) String() string { return proto.CompactTextString(m) }
func (*RemoteFileEvent) ProtoMessage()    {}
func (*RemoteFileEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1170b584301cee1, []int{2}
}

func (m *RemoteFileEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoteFileEvent.Unmarshal(m, b)
}
func (m *RemoteFileEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoteFileEvent.Marshal(b, m, deterministic)
}
func (m *RemoteFileEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteFileEvent.Merge(m, src)
}
func (m *RemoteFileEvent) XXX_Size() int {
	return xxx_messageInfo_RemoteFileEvent.Size(m)
}
func (m *RemoteFileEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteFileEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteFileEvent proto.InternalMessageInfo

type isRemoteFileEvent_File interface {
	isRemoteFileEvent_File()
}

type RemoteFileEvent_Path struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3,oneof"`
}

type RemoteFileEvent_Prefix struct {
	Prefix *FilePrefix `protobuf:"bytes,2,opt,name=prefix,proto3,oneof"`
}

func (*RemoteFileEvent_Path) isRemoteFileEvent_File() {}

func (*RemoteFileEvent_Prefix) isRemoteFileEvent_File() {}

func (m *RemoteFileEvent) GetFile() isRemoteFileEvent_File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *RemoteFileEvent) GetPath() string {
	if x, ok := m.GetFile().(*RemoteFileEvent_Path); ok {
		return x.Path
	}
	return ""
}

func (m *RemoteFileEvent) GetPrefix() *FilePrefix {
	if x, ok := m.GetFile().(*RemoteFileEvent_Prefix); ok {
		return x.Prefix
	}
	return nil
}

func (m *RemoteFileEvent) GetAction() RemoteFileEvent_Action {
	if m != nil {
		return m.Action
	}
	return RemoteFileEvent_CREATE
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RemoteFileEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RemoteFileEvent_Path)(nil),
		(*RemoteFileEvent_Prefix)(nil),
	}
}

// Allow users to register event targets for custom event sensors they deploy on their
// own Flyte deployments.
type CustomEvent struct {
	// Used to filter ListEventTarget queries by deployed sensors.
	TargetType string `protobuf:"bytes,1,opt,name=target_type,json=targetType,proto3" json:"target_type,omitempty"`
	// Custom, marshalled data that the event sensor of type knows how to parse.
	// This can be a marshalled WorkflowEvent, RemoteFileEvent or user-defined struct.
	CustomInfo           *_struct.Struct `protobuf:"bytes,2,opt,name=custom_info,json=customInfo,proto3" json:"custom_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CustomEvent) Reset()         { *m = CustomEvent{} }
func (m *CustomEvent) String() string { return proto.CompactTextString(m) }
func (*CustomEvent) ProtoMessage()    {}
func (*CustomEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1170b584301cee1, []int{3}
}

func (m *CustomEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomEvent.Unmarshal(m, b)
}
func (m *CustomEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomEvent.Marshal(b, m, deterministic)
}
func (m *CustomEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomEvent.Merge(m, src)
}
func (m *CustomEvent) XXX_Size() int {
	return xxx_messageInfo_CustomEvent.Size(m)
}
func (m *CustomEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CustomEvent proto.InternalMessageInfo

func (m *CustomEvent) GetTargetType() string {
	if m != nil {
		return m.TargetType
	}
	return ""
}

func (m *CustomEvent) GetCustomInfo() *_struct.Struct {
	if m != nil {
		return m.CustomInfo
	}
	return nil
}

// This messages defines an event which should trigger a corresponding target.
type EventTarget struct {
	// Types that are valid to be assigned to Event:
	//	*EventTarget_WorkflowEvent
	//	*EventTarget_RemoteFileEvent
	//	*EventTarget_CustomEvent
	Event isEventTarget_Event `protobuf_oneof:"event"`
	// Types that are valid to be assigned to Target:
	//	*EventTarget_LaunchPlan
	Target isEventTarget_Target `protobuf_oneof:"target"`
	// +optional
	EventTimeout *duration.Duration `protobuf:"bytes,4,opt,name=event_timeout,json=eventTimeout,proto3" json:"event_timeout,omitempty"`
	// Optional, the event trigger will schedule the execution with an input whose name is
	// the value of event_trigger_arg. The input value is determined by the specific event.
	// For example, in the case of a RemoteFileEvent, the full file path will be substituted as the trigger arg value.
	EventTriggerArg      string   `protobuf:"bytes,5,opt,name=event_trigger_arg,json=eventTriggerArg,proto3" json:"event_trigger_arg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventTarget) Reset()         { *m = EventTarget{} }
func (m *EventTarget) String() string { return proto.CompactTextString(m) }
func (*EventTarget) ProtoMessage()    {}
func (*EventTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1170b584301cee1, []int{4}
}

func (m *EventTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventTarget.Unmarshal(m, b)
}
func (m *EventTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventTarget.Marshal(b, m, deterministic)
}
func (m *EventTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTarget.Merge(m, src)
}
func (m *EventTarget) XXX_Size() int {
	return xxx_messageInfo_EventTarget.Size(m)
}
func (m *EventTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTarget.DiscardUnknown(m)
}

var xxx_messageInfo_EventTarget proto.InternalMessageInfo

type isEventTarget_Event interface {
	isEventTarget_Event()
}

type EventTarget_WorkflowEvent struct {
	WorkflowEvent *WorkflowEvent `protobuf:"bytes,1,opt,name=workflow_event,json=workflowEvent,proto3,oneof"`
}

type EventTarget_RemoteFileEvent struct {
	RemoteFileEvent *RemoteFileEvent `protobuf:"bytes,2,opt,name=remote_file_event,json=remoteFileEvent,proto3,oneof"`
}

type EventTarget_CustomEvent struct {
	CustomEvent *CustomEvent `protobuf:"bytes,16,opt,name=custom_event,json=customEvent,proto3,oneof"`
}

func (*EventTarget_WorkflowEvent) isEventTarget_Event() {}

func (*EventTarget_RemoteFileEvent) isEventTarget_Event() {}

func (*EventTarget_CustomEvent) isEventTarget_Event() {}

func (m *EventTarget) GetEvent() isEventTarget_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *EventTarget) GetWorkflowEvent() *WorkflowEvent {
	if x, ok := m.GetEvent().(*EventTarget_WorkflowEvent); ok {
		return x.WorkflowEvent
	}
	return nil
}

func (m *EventTarget) GetRemoteFileEvent() *RemoteFileEvent {
	if x, ok := m.GetEvent().(*EventTarget_RemoteFileEvent); ok {
		return x.RemoteFileEvent
	}
	return nil
}

func (m *EventTarget) GetCustomEvent() *CustomEvent {
	if x, ok := m.GetEvent().(*EventTarget_CustomEvent); ok {
		return x.CustomEvent
	}
	return nil
}

type isEventTarget_Target interface {
	isEventTarget_Target()
}

type EventTarget_LaunchPlan struct {
	LaunchPlan *core.Identifier `protobuf:"bytes,3,opt,name=launch_plan,json=launchPlan,proto3,oneof"`
}

func (*EventTarget_LaunchPlan) isEventTarget_Target() {}

func (m *EventTarget) GetTarget() isEventTarget_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *EventTarget) GetLaunchPlan() *core.Identifier {
	if x, ok := m.GetTarget().(*EventTarget_LaunchPlan); ok {
		return x.LaunchPlan
	}
	return nil
}

func (m *EventTarget) GetEventTimeout() *duration.Duration {
	if m != nil {
		return m.EventTimeout
	}
	return nil
}

func (m *EventTarget) GetEventTriggerArg() string {
	if m != nil {
		return m.EventTriggerArg
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EventTarget) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EventTarget_WorkflowEvent)(nil),
		(*EventTarget_RemoteFileEvent)(nil),
		(*EventTarget_CustomEvent)(nil),
		(*EventTarget_LaunchPlan)(nil),
	}
}

// A request to fetch event targets registered for a specific event type.
type EventTargetListRequest struct {
	// Indicates the event sensor type by unique name for which to fetch event targets.
	EventType string `protobuf:"bytes,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// Indicates the number of resources to be returned.
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// In the case of multiple pages of results, the server-provided token can be used to fetch the next page
	// in a query.
	// +optional
	Token                string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventTargetListRequest) Reset()         { *m = EventTargetListRequest{} }
func (m *EventTargetListRequest) String() string { return proto.CompactTextString(m) }
func (*EventTargetListRequest) ProtoMessage()    {}
func (*EventTargetListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1170b584301cee1, []int{5}
}

func (m *EventTargetListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventTargetListRequest.Unmarshal(m, b)
}
func (m *EventTargetListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventTargetListRequest.Marshal(b, m, deterministic)
}
func (m *EventTargetListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTargetListRequest.Merge(m, src)
}
func (m *EventTargetListRequest) XXX_Size() int {
	return xxx_messageInfo_EventTargetListRequest.Size(m)
}
func (m *EventTargetListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTargetListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventTargetListRequest proto.InternalMessageInfo

func (m *EventTargetListRequest) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *EventTargetListRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *EventTargetListRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type EventTargetList struct {
	// All event targets registered for an event type specified in an EventTargetListRequest.
	EventTargets []*EventTarget `protobuf:"bytes,1,rep,name=event_targets,json=eventTargets,proto3" json:"event_targets,omitempty"`
	// In the case of multiple pages of results, the server-provided token can be used to fetch the next page
	// in a query. If there are no more results, this value will be empty.
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventTargetList) Reset()         { *m = EventTargetList{} }
func (m *EventTargetList) String() string { return proto.CompactTextString(m) }
func (*EventTargetList) ProtoMessage()    {}
func (*EventTargetList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1170b584301cee1, []int{6}
}

func (m *EventTargetList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventTargetList.Unmarshal(m, b)
}
func (m *EventTargetList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventTargetList.Marshal(b, m, deterministic)
}
func (m *EventTargetList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTargetList.Merge(m, src)
}
func (m *EventTargetList) XXX_Size() int {
	return xxx_messageInfo_EventTargetList.Size(m)
}
func (m *EventTargetList) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTargetList.DiscardUnknown(m)
}

var xxx_messageInfo_EventTargetList proto.InternalMessageInfo

func (m *EventTargetList) GetEventTargets() []*EventTarget {
	if m != nil {
		return m.EventTargets
	}
	return nil
}

func (m *EventTargetList) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Notifies a downstream consumer that an event has occurred.
type EventOccurredRequest struct {
	// Types that are valid to be assigned to Target:
	//	*EventOccurredRequest_ExecutionCreateRequest
	Target isEventOccurredRequest_Target `protobuf_oneof:"target"`
	// Types that are valid to be assigned to Reference:
	//	*EventOccurredRequest_LaunchPlan
	Reference            isEventOccurredRequest_Reference `protobuf_oneof:"reference"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *EventOccurredRequest) Reset()         { *m = EventOccurredRequest{} }
func (m *EventOccurredRequest) String() string { return proto.CompactTextString(m) }
func (*EventOccurredRequest) ProtoMessage()    {}
func (*EventOccurredRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1170b584301cee1, []int{7}
}

func (m *EventOccurredRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventOccurredRequest.Unmarshal(m, b)
}
func (m *EventOccurredRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventOccurredRequest.Marshal(b, m, deterministic)
}
func (m *EventOccurredRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOccurredRequest.Merge(m, src)
}
func (m *EventOccurredRequest) XXX_Size() int {
	return xxx_messageInfo_EventOccurredRequest.Size(m)
}
func (m *EventOccurredRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOccurredRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventOccurredRequest proto.InternalMessageInfo

type isEventOccurredRequest_Target interface {
	isEventOccurredRequest_Target()
}

type EventOccurredRequest_ExecutionCreateRequest struct {
	ExecutionCreateRequest *admin.ExecutionCreateRequest `protobuf:"bytes,1,opt,name=execution_create_request,json=executionCreateRequest,proto3,oneof"`
}

func (*EventOccurredRequest_ExecutionCreateRequest) isEventOccurredRequest_Target() {}

func (m *EventOccurredRequest) GetTarget() isEventOccurredRequest_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *EventOccurredRequest) GetExecutionCreateRequest() *admin.ExecutionCreateRequest {
	if x, ok := m.GetTarget().(*EventOccurredRequest_ExecutionCreateRequest); ok {
		return x.ExecutionCreateRequest
	}
	return nil
}

type isEventOccurredRequest_Reference interface {
	isEventOccurredRequest_Reference()
}

type EventOccurredRequest_LaunchPlan struct {
	LaunchPlan *core.Identifier `protobuf:"bytes,2,opt,name=launch_plan,json=launchPlan,proto3,oneof"`
}

func (*EventOccurredRequest_LaunchPlan) isEventOccurredRequest_Reference() {}

func (m *EventOccurredRequest) GetReference() isEventOccurredRequest_Reference {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *EventOccurredRequest) GetLaunchPlan() *core.Identifier {
	if x, ok := m.GetReference().(*EventOccurredRequest_LaunchPlan); ok {
		return x.LaunchPlan
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EventOccurredRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EventOccurredRequest_ExecutionCreateRequest)(nil),
		(*EventOccurredRequest_LaunchPlan)(nil),
	}
}

// Purposefully empty, may be populated in the future.
type EventOccurredResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventOccurredResponse) Reset()         { *m = EventOccurredResponse{} }
func (m *EventOccurredResponse) String() string { return proto.CompactTextString(m) }
func (*EventOccurredResponse) ProtoMessage()    {}
func (*EventOccurredResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1170b584301cee1, []int{8}
}

func (m *EventOccurredResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventOccurredResponse.Unmarshal(m, b)
}
func (m *EventOccurredResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventOccurredResponse.Marshal(b, m, deterministic)
}
func (m *EventOccurredResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOccurredResponse.Merge(m, src)
}
func (m *EventOccurredResponse) XXX_Size() int {
	return xxx_messageInfo_EventOccurredResponse.Size(m)
}
func (m *EventOccurredResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOccurredResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EventOccurredResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("flyteidl.event.RemoteFileEvent_Action", RemoteFileEvent_Action_name, RemoteFileEvent_Action_value)
	proto.RegisterType((*WorkflowEvent)(nil), "flyteidl.event.WorkflowEvent")
	proto.RegisterType((*FilePrefix)(nil), "flyteidl.event.FilePrefix")
	proto.RegisterType((*RemoteFileEvent)(nil), "flyteidl.event.RemoteFileEvent")
	proto.RegisterType((*CustomEvent)(nil), "flyteidl.event.CustomEvent")
	proto.RegisterType((*EventTarget)(nil), "flyteidl.event.EventTarget")
	proto.RegisterType((*EventTargetListRequest)(nil), "flyteidl.event.EventTargetListRequest")
	proto.RegisterType((*EventTargetList)(nil), "flyteidl.event.EventTargetList")
	proto.RegisterType((*EventOccurredRequest)(nil), "flyteidl.event.EventOccurredRequest")
	proto.RegisterType((*EventOccurredResponse)(nil), "flyteidl.event.EventOccurredResponse")
}

func init() { proto.RegisterFile("flyteidl/event/sensor.proto", fileDescriptor_b1170b584301cee1) }

var fileDescriptor_b1170b584301cee1 = []byte{
	// 796 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xff, 0x8e, 0xdb, 0x44,
	0x10, 0x76, 0x7e, 0x9c, 0x4b, 0x26, 0xcd, 0xa5, 0x35, 0xe9, 0x9d, 0x49, 0xb9, 0x6b, 0x64, 0x21,
	0x54, 0x81, 0xb0, 0xa5, 0x02, 0x82, 0x3f, 0x50, 0xd4, 0xcb, 0x91, 0x2a, 0x95, 0xa0, 0x9c, 0x96,
	0x48, 0x48, 0xfc, 0x81, 0xe5, 0x38, 0x63, 0x67, 0x55, 0xc7, 0x6b, 0xd6, 0x6b, 0xae, 0x79, 0x00,
	0x9e, 0x84, 0xc7, 0xe0, 0x21, 0x78, 0x25, 0xe4, 0xdd, 0x8d, 0x13, 0xfb, 0x0e, 0x10, 0xff, 0x65,
	0x77, 0xbe, 0xf9, 0x66, 0xbe, 0x99, 0xcf, 0x1b, 0x78, 0x1a, 0x25, 0x3b, 0x81, 0x74, 0x9d, 0x78,
	0xf8, 0x1b, 0xa6, 0xc2, 0xcb, 0x31, 0xcd, 0x19, 0x77, 0x33, 0xce, 0x04, 0xb3, 0x4e, 0xf7, 0x41,
	0x57, 0x06, 0xc7, 0x97, 0x15, 0x38, 0x58, 0x6f, 0x69, 0xea, 0xe1, 0x3b, 0x0c, 0x0b, 0x41, 0x59,
	0xaa, 0xf0, 0xe3, 0x8b, 0x2a, 0x1e, 0x32, 0x8e, 0x77, 0xc2, 0x97, 0xf5, 0x30, 0x5d, 0x63, 0x2a,
	0x68, 0x44, 0x51, 0x97, 0x1b, 0x7f, 0x5a, 0x8f, 0xa7, 0xc1, 0x16, 0xd7, 0x7e, 0x89, 0x11, 0x3b,
	0xff, 0x0e, 0xf8, 0x32, 0x66, 0x2c, 0x4e, 0xd0, 0x93, 0xa7, 0x55, 0x11, 0x79, 0xeb, 0x82, 0x07,
	0x47, 0xc5, 0x3e, 0x6c, 0xc6, 0x73, 0xc1, 0x8b, 0x50, 0xa8, 0xa8, 0xf3, 0x7b, 0x1b, 0x06, 0x3f,
	0x31, 0xfe, 0x36, 0x4a, 0xd8, 0xed, 0xbc, 0xd4, 0x66, 0xbd, 0x81, 0x51, 0xd5, 0xef, 0x51, 0x35,
	0xbb, 0x35, 0x69, 0x3d, 0xef, 0xbf, 0xf8, 0xc0, 0xad, 0x46, 0x51, 0xf6, 0xe6, 0xbe, 0xae, 0x00,
	0x0b, 0x83, 0xbc, 0x5f, 0x25, 0x1e, 0xae, 0xad, 0x5f, 0xe0, 0xfc, 0x1f, 0x04, 0xd8, 0x6d, 0x49,
	0xf9, 0x51, 0x83, 0xf2, 0x4d, 0x89, 0x9e, 0x4b, 0x70, 0x8d, 0xfd, 0x49, 0x7a, 0x5f, 0xc0, 0x9a,
	0x82, 0x99, 0x6d, 0x82, 0x1c, 0x73, 0xbb, 0x33, 0xe9, 0x3c, 0x3f, 0x7d, 0xf1, 0x71, 0x83, 0xae,
	0x52, 0x57, 0x2d, 0xe1, 0xa6, 0x84, 0x13, 0x9d, 0x35, 0xeb, 0x42, 0x9b, 0xae, 0x9d, 0x29, 0xc0,
	0x2b, 0x9a, 0xe0, 0x0d, 0xc7, 0x88, 0xbe, 0xb3, 0xce, 0xc0, 0xcc, 0xe4, 0x2f, 0xa9, 0xba, 0x47,
	0xf4, 0xc9, 0xb2, 0xe1, 0x41, 0x16, 0x08, 0x81, 0x3c, 0x95, 0xbd, 0xf7, 0xc8, 0xfe, 0xe8, 0xfc,
	0xd9, 0x82, 0x21, 0xc1, 0x2d, 0x13, 0x58, 0xd2, 0xa8, 0x49, 0x8e, 0xa0, 0x9b, 0x05, 0x62, 0xa3,
	0x38, 0x16, 0x06, 0x91, 0x27, 0xeb, 0x8b, 0x8a, 0x5b, 0xc9, 0x1f, 0xbb, 0x75, 0x73, 0xb9, 0x87,
	0x3e, 0x16, 0x46, 0x55, 0x79, 0x0a, 0x66, 0x10, 0x96, 0xdd, 0xdb, 0x9d, 0x49, 0xab, 0xae, 0x52,
	0x65, 0x35, 0x8a, 0xbb, 0x57, 0x12, 0x4d, 0x74, 0x96, 0x33, 0x02, 0x53, 0xdd, 0x58, 0x00, 0xe6,
	0x35, 0x99, 0x5f, 0x2d, 0xe7, 0x8f, 0x8c, 0x99, 0x09, 0xdd, 0x88, 0x26, 0xe8, 0x6c, 0xa0, 0x7f,
	0x5d, 0xe4, 0x82, 0x6d, 0x55, 0xe3, 0xcf, 0xa0, 0x2f, 0x02, 0x1e, 0xa3, 0xf0, 0xc5, 0x2e, 0x43,
	0x3d, 0x03, 0x50, 0x57, 0xcb, 0x5d, 0x86, 0xd6, 0xd7, 0xd0, 0x0f, 0x25, 0xde, 0xa7, 0x69, 0xc4,
	0xb4, 0x90, 0x73, 0x57, 0x39, 0xcd, 0xdd, 0x3b, 0xcd, 0xfd, 0x51, 0x3a, 0x8d, 0x80, 0xc2, 0xbe,
	0x4e, 0x23, 0xe6, 0xfc, 0xd1, 0x81, 0xbe, 0x2c, 0xb2, 0x94, 0x6c, 0xd6, 0x2b, 0x38, 0xbd, 0xd5,
	0x0b, 0xf2, 0xa5, 0x10, 0xed, 0xb3, 0x8b, 0xa6, 0xbe, 0x9a, 0x49, 0x17, 0x06, 0x19, 0xdc, 0xd6,
	0x5c, 0xfb, 0x3d, 0x3c, 0xe6, 0x72, 0x02, 0x7e, 0x29, 0x48, 0x53, 0xa9, 0xbe, 0x9e, 0xfd, 0xc7,
	0xa8, 0x16, 0x06, 0x19, 0xf2, 0xc6, 0xea, 0x5e, 0xc2, 0x43, 0x2d, 0x50, 0x31, 0x3d, 0x92, 0x4c,
	0x4f, 0x9b, 0x4c, 0x47, 0x43, 0x5b, 0x18, 0x44, 0xcf, 0x44, 0x31, 0x7c, 0x03, 0xfd, 0x24, 0x28,
	0xd2, 0x70, 0xe3, 0x67, 0x49, 0xa0, 0xb6, 0xf6, 0xaf, 0x5f, 0x4f, 0x8b, 0x80, 0xc2, 0xdf, 0x24,
	0x41, 0x6a, 0x4d, 0x61, 0x20, 0x2b, 0xf8, 0x82, 0x6e, 0x91, 0x15, 0xc2, 0xee, 0xea, 0xfc, 0xe6,
	0x88, 0xbf, 0xd5, 0x1f, 0x3b, 0x79, 0x28, 0xf1, 0x4b, 0x05, 0xb7, 0x3e, 0x81, 0xc7, 0x3a, 0x9f,
	0xd3, 0x38, 0x46, 0xee, 0x07, 0x3c, 0xb6, 0x4f, 0xe4, 0x1e, 0x87, 0x0a, 0xa8, 0xee, 0xaf, 0x78,
	0x3c, 0x7b, 0x00, 0x27, 0xf2, 0x6a, 0xf6, 0x1e, 0x98, 0x6a, 0xc7, 0x4e, 0x08, 0x67, 0x47, 0x4b,
	0xfa, 0x8e, 0xe6, 0x82, 0xe0, 0xaf, 0x05, 0xe6, 0xc2, 0xba, 0x00, 0xd0, 0xc4, 0x07, 0x67, 0xf4,
	0x14, 0x63, 0x69, 0x8c, 0x11, 0x9c, 0x24, 0x74, 0x4b, 0xd5, 0xe8, 0x07, 0x44, 0x1d, 0xca, 0x5b,
	0xc1, 0xde, 0xa2, 0x9a, 0x42, 0x8f, 0xa8, 0x83, 0x43, 0x61, 0xd8, 0x28, 0x62, 0xbd, 0xac, 0x64,
	0xcb, 0xbb, 0xdc, 0x6e, 0x4d, 0x3a, 0xf7, 0xcd, 0xfd, 0x28, 0x6f, 0x2f, 0x5c, 0x25, 0x1c, 0x4a,
	0xb5, 0x8f, 0x4b, 0xfd, 0xd5, 0x82, 0x91, 0xcc, 0xf9, 0x21, 0x0c, 0x0b, 0xce, 0x71, 0xbd, 0x97,
	0xb3, 0x02, 0xfb, 0xf0, 0xd8, 0x85, 0x1c, 0x03, 0x81, 0x3e, 0x57, 0x31, 0x6d, 0xc4, 0xa3, 0x0f,
	0x4d, 0xbe, 0xf5, 0x6e, 0xf5, 0x8e, 0x5c, 0x4b, 0xb8, 0x66, 0x5a, 0x18, 0xe4, 0x0c, 0xef, 0x8d,
	0x34, 0x9d, 0xd0, 0xfe, 0x5f, 0x4e, 0x38, 0x2c, 0x65, 0xd6, 0x87, 0x1e, 0xc7, 0x08, 0x39, 0xa6,
	0x21, 0x3a, 0xe7, 0xf0, 0xa4, 0x21, 0x28, 0xcf, 0x58, 0x9a, 0xe3, 0xec, 0xab, 0x9f, 0xbf, 0x8c,
	0xa9, 0xd8, 0x14, 0x2b, 0x37, 0x64, 0x5b, 0x4f, 0x16, 0x61, 0x3c, 0xf6, 0xaa, 0x7f, 0x94, 0x18,
	0x53, 0x2f, 0x5b, 0x7d, 0x16, 0x33, 0xaf, 0xfe, 0x87, 0xb7, 0x32, 0xa5, 0xa7, 0x3e, 0xff, 0x3b,
	0x00, 0x00, 0xff, 0xff, 0xf4, 0x44, 0x33, 0xe4, 0x09, 0x07, 0x00, 0x00,
}
