// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl/event/sensor.proto

package event

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _sensor_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on WorkflowEvent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WorkflowEvent) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Id.(type) {

	case *WorkflowEvent_ExecutionIdentifier:

		if v, ok := interface{}(m.GetExecutionIdentifier()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkflowEventValidationError{
					field:  "ExecutionIdentifier",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WorkflowEvent_NamedEntityIdentifier:

		if v, ok := interface{}(m.GetNamedEntityIdentifier()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkflowEventValidationError{
					field:  "NamedEntityIdentifier",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// WorkflowEventValidationError is the validation error returned by
// WorkflowEvent.Validate if the designated constraints aren't met.
type WorkflowEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowEventValidationError) ErrorName() string { return "WorkflowEventValidationError" }

// Error satisfies the builtin error interface
func (e WorkflowEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowEventValidationError{}

// Validate checks the field values on FilePrefix with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FilePrefix) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Prefix

	// no validation rules for Pattern

	return nil
}

// FilePrefixValidationError is the validation error returned by
// FilePrefix.Validate if the designated constraints aren't met.
type FilePrefixValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilePrefixValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilePrefixValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilePrefixValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilePrefixValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilePrefixValidationError) ErrorName() string { return "FilePrefixValidationError" }

// Error satisfies the builtin error interface
func (e FilePrefixValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilePrefix.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilePrefixValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilePrefixValidationError{}

// Validate checks the field values on RemoteFileEvent with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RemoteFileEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Action

	switch m.File.(type) {

	case *RemoteFileEvent_Path:
		// no validation rules for Path

	case *RemoteFileEvent_Prefix:

		if v, ok := interface{}(m.GetPrefix()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RemoteFileEventValidationError{
					field:  "Prefix",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RemoteFileEventValidationError is the validation error returned by
// RemoteFileEvent.Validate if the designated constraints aren't met.
type RemoteFileEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoteFileEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoteFileEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoteFileEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoteFileEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoteFileEventValidationError) ErrorName() string { return "RemoteFileEventValidationError" }

// Error satisfies the builtin error interface
func (e RemoteFileEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoteFileEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoteFileEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoteFileEventValidationError{}

// Validate checks the field values on CustomEvent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CustomEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TargetType

	if v, ok := interface{}(m.GetCustomInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CustomEventValidationError{
				field:  "CustomInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CustomEventValidationError is the validation error returned by
// CustomEvent.Validate if the designated constraints aren't met.
type CustomEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomEventValidationError) ErrorName() string { return "CustomEventValidationError" }

// Error satisfies the builtin error interface
func (e CustomEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomEventValidationError{}

// Validate checks the field values on EventTarget with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EventTarget) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetEventTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventTargetValidationError{
				field:  "EventTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EventTriggerArg

	switch m.Event.(type) {

	case *EventTarget_WorkflowEvent:

		if v, ok := interface{}(m.GetWorkflowEvent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventTargetValidationError{
					field:  "WorkflowEvent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EventTarget_RemoteFileEvent:

		if v, ok := interface{}(m.GetRemoteFileEvent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventTargetValidationError{
					field:  "RemoteFileEvent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EventTarget_CustomEvent:

		if v, ok := interface{}(m.GetCustomEvent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventTargetValidationError{
					field:  "CustomEvent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	switch m.Target.(type) {

	case *EventTarget_LaunchPlan:

		if v, ok := interface{}(m.GetLaunchPlan()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventTargetValidationError{
					field:  "LaunchPlan",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EventTargetValidationError is the validation error returned by
// EventTarget.Validate if the designated constraints aren't met.
type EventTargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventTargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventTargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventTargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventTargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventTargetValidationError) ErrorName() string { return "EventTargetValidationError" }

// Error satisfies the builtin error interface
func (e EventTargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventTarget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventTargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventTargetValidationError{}

// Validate checks the field values on EventTargetListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EventTargetListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EventType

	// no validation rules for Limit

	// no validation rules for Token

	return nil
}

// EventTargetListRequestValidationError is the validation error returned by
// EventTargetListRequest.Validate if the designated constraints aren't met.
type EventTargetListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventTargetListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventTargetListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventTargetListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventTargetListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventTargetListRequestValidationError) ErrorName() string {
	return "EventTargetListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EventTargetListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventTargetListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventTargetListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventTargetListRequestValidationError{}

// Validate checks the field values on EventTargetList with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EventTargetList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEventTargets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventTargetListValidationError{
					field:  fmt.Sprintf("EventTargets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Token

	return nil
}

// EventTargetListValidationError is the validation error returned by
// EventTargetList.Validate if the designated constraints aren't met.
type EventTargetListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventTargetListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventTargetListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventTargetListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventTargetListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventTargetListValidationError) ErrorName() string { return "EventTargetListValidationError" }

// Error satisfies the builtin error interface
func (e EventTargetListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventTargetList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventTargetListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventTargetListValidationError{}

// Validate checks the field values on EventOccurredRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EventOccurredRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Target.(type) {

	case *EventOccurredRequest_ExecutionCreateRequest:

		if v, ok := interface{}(m.GetExecutionCreateRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventOccurredRequestValidationError{
					field:  "ExecutionCreateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	switch m.Reference.(type) {

	case *EventOccurredRequest_LaunchPlan:

		if v, ok := interface{}(m.GetLaunchPlan()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventOccurredRequestValidationError{
					field:  "LaunchPlan",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EventOccurredRequestValidationError is the validation error returned by
// EventOccurredRequest.Validate if the designated constraints aren't met.
type EventOccurredRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventOccurredRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventOccurredRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventOccurredRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventOccurredRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventOccurredRequestValidationError) ErrorName() string {
	return "EventOccurredRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EventOccurredRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventOccurredRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventOccurredRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventOccurredRequestValidationError{}

// Validate checks the field values on EventOccurredResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EventOccurredResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// EventOccurredResponseValidationError is the validation error returned by
// EventOccurredResponse.Validate if the designated constraints aren't met.
type EventOccurredResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventOccurredResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventOccurredResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventOccurredResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventOccurredResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventOccurredResponseValidationError) ErrorName() string {
	return "EventOccurredResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EventOccurredResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventOccurredResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventOccurredResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventOccurredResponseValidationError{}
