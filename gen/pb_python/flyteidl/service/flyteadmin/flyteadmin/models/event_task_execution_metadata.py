# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.event_resource_identifiers import EventResourceIdentifiers  # noqa: F401,E501
from flyteadmin.models.event_resource_pool_info import EventResourcePoolInfo  # noqa: F401,E501
from flyteadmin.models.task_execution_metadata_instance_class import TaskExecutionMetadataInstanceClass  # noqa: F401,E501


class EventTaskExecutionMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instance_class': 'TaskExecutionMetadataInstanceClass',
        'resource_ids': 'EventResourceIdentifiers',
        'resource_pool_info': 'list[EventResourcePoolInfo]',
        'plugin_identifier': 'str'
    }

    attribute_map = {
        'instance_class': 'instance_class',
        'resource_ids': 'resource_ids',
        'resource_pool_info': 'resource_pool_info',
        'plugin_identifier': 'plugin_identifier'
    }

    def __init__(self, instance_class=None, resource_ids=None, resource_pool_info=None, plugin_identifier=None):  # noqa: E501
        """EventTaskExecutionMetadata - a model defined in Swagger"""  # noqa: E501

        self._instance_class = None
        self._resource_ids = None
        self._resource_pool_info = None
        self._plugin_identifier = None
        self.discriminator = None

        if instance_class is not None:
            self.instance_class = instance_class
        if resource_ids is not None:
            self.resource_ids = resource_ids
        if resource_pool_info is not None:
            self.resource_pool_info = resource_pool_info
        if plugin_identifier is not None:
            self.plugin_identifier = plugin_identifier

    @property
    def instance_class(self):
        """Gets the instance_class of this EventTaskExecutionMetadata.  # noqa: E501


        :return: The instance_class of this EventTaskExecutionMetadata.  # noqa: E501
        :rtype: TaskExecutionMetadataInstanceClass
        """
        return self._instance_class

    @instance_class.setter
    def instance_class(self, instance_class):
        """Sets the instance_class of this EventTaskExecutionMetadata.


        :param instance_class: The instance_class of this EventTaskExecutionMetadata.  # noqa: E501
        :type: TaskExecutionMetadataInstanceClass
        """

        self._instance_class = instance_class

    @property
    def resource_ids(self):
        """Gets the resource_ids of this EventTaskExecutionMetadata.  # noqa: E501

        Contains various identifiers for resources used during execution.  # noqa: E501

        :return: The resource_ids of this EventTaskExecutionMetadata.  # noqa: E501
        :rtype: EventResourceIdentifiers
        """
        return self._resource_ids

    @resource_ids.setter
    def resource_ids(self, resource_ids):
        """Sets the resource_ids of this EventTaskExecutionMetadata.

        Contains various identifiers for resources used during execution.  # noqa: E501

        :param resource_ids: The resource_ids of this EventTaskExecutionMetadata.  # noqa: E501
        :type: EventResourceIdentifiers
        """

        self._resource_ids = resource_ids

    @property
    def resource_pool_info(self):
        """Gets the resource_pool_info of this EventTaskExecutionMetadata.  # noqa: E501

        Includes information about resource token allocation (if applicable). This is a repeated field because a plugin can request multiple resource allocations during execution.  # noqa: E501

        :return: The resource_pool_info of this EventTaskExecutionMetadata.  # noqa: E501
        :rtype: list[EventResourcePoolInfo]
        """
        return self._resource_pool_info

    @resource_pool_info.setter
    def resource_pool_info(self, resource_pool_info):
        """Sets the resource_pool_info of this EventTaskExecutionMetadata.

        Includes information about resource token allocation (if applicable). This is a repeated field because a plugin can request multiple resource allocations during execution.  # noqa: E501

        :param resource_pool_info: The resource_pool_info of this EventTaskExecutionMetadata.  # noqa: E501
        :type: list[EventResourcePoolInfo]
        """

        self._resource_pool_info = resource_pool_info

    @property
    def plugin_identifier(self):
        """Gets the plugin_identifier of this EventTaskExecutionMetadata.  # noqa: E501

        The identifier of the plugin used to execute this task.  # noqa: E501

        :return: The plugin_identifier of this EventTaskExecutionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._plugin_identifier

    @plugin_identifier.setter
    def plugin_identifier(self, plugin_identifier):
        """Sets the plugin_identifier of this EventTaskExecutionMetadata.

        The identifier of the plugin used to execute this task.  # noqa: E501

        :param plugin_identifier: The plugin_identifier of this EventTaskExecutionMetadata.  # noqa: E501
        :type: str
        """

        self._plugin_identifier = plugin_identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventTaskExecutionMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventTaskExecutionMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
