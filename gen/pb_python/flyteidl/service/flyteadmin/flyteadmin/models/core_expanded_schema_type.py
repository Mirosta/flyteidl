# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.core_literal_type import CoreLiteralType  # noqa: F401,E501


class CoreExpandedSchemaType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'columns': 'list[CoreLiteralType]',
        'names': 'list[str]',
        'external_schema_type': 'str',
        'external_schema_bytes': 'str'
    }

    attribute_map = {
        'columns': 'columns',
        'names': 'names',
        'external_schema_type': 'external_schema_type',
        'external_schema_bytes': 'external_schema_bytes'
    }

    def __init__(self, columns=None, names=None, external_schema_type=None, external_schema_bytes=None):  # noqa: E501
        """CoreExpandedSchemaType - a model defined in Swagger"""  # noqa: E501

        self._columns = None
        self._names = None
        self._external_schema_type = None
        self._external_schema_bytes = None
        self.discriminator = None

        if columns is not None:
            self.columns = columns
        if names is not None:
            self.names = names
        if external_schema_type is not None:
            self.external_schema_type = external_schema_type
        if external_schema_bytes is not None:
            self.external_schema_bytes = external_schema_bytes

    @property
    def columns(self):
        """Gets the columns of this CoreExpandedSchemaType.  # noqa: E501

        A list of ordered columns this schema comprises of.  # noqa: E501

        :return: The columns of this CoreExpandedSchemaType.  # noqa: E501
        :rtype: list[CoreLiteralType]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this CoreExpandedSchemaType.

        A list of ordered columns this schema comprises of.  # noqa: E501

        :param columns: The columns of this CoreExpandedSchemaType.  # noqa: E501
        :type: list[CoreLiteralType]
        """

        self._columns = columns

    @property
    def names(self):
        """Gets the names of this CoreExpandedSchemaType.  # noqa: E501


        :return: The names of this CoreExpandedSchemaType.  # noqa: E501
        :rtype: list[str]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this CoreExpandedSchemaType.


        :param names: The names of this CoreExpandedSchemaType.  # noqa: E501
        :type: list[str]
        """

        self._names = names

    @property
    def external_schema_type(self):
        """Gets the external_schema_type of this CoreExpandedSchemaType.  # noqa: E501


        :return: The external_schema_type of this CoreExpandedSchemaType.  # noqa: E501
        :rtype: str
        """
        return self._external_schema_type

    @external_schema_type.setter
    def external_schema_type(self, external_schema_type):
        """Sets the external_schema_type of this CoreExpandedSchemaType.


        :param external_schema_type: The external_schema_type of this CoreExpandedSchemaType.  # noqa: E501
        :type: str
        """

        self._external_schema_type = external_schema_type

    @property
    def external_schema_bytes(self):
        """Gets the external_schema_bytes of this CoreExpandedSchemaType.  # noqa: E501


        :return: The external_schema_bytes of this CoreExpandedSchemaType.  # noqa: E501
        :rtype: str
        """
        return self._external_schema_bytes

    @external_schema_bytes.setter
    def external_schema_bytes(self, external_schema_bytes):
        """Sets the external_schema_bytes of this CoreExpandedSchemaType.


        :param external_schema_bytes: The external_schema_bytes of this CoreExpandedSchemaType.  # noqa: E501
        :type: str
        """
        if external_schema_bytes is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', external_schema_bytes):  # noqa: E501
            raise ValueError(r"Invalid value for `external_schema_bytes`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._external_schema_bytes = external_schema_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreExpandedSchemaType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreExpandedSchemaType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
