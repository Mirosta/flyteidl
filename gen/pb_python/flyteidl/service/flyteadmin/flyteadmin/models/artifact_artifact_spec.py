# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.artifact_tag import ArtifactTag  # noqa: F401,E501
from flyteadmin.models.core_literal import CoreLiteral  # noqa: F401,E501
from flyteadmin.models.core_literal_type import CoreLiteralType  # noqa: F401,E501
from flyteadmin.models.core_task_execution_identifier import CoreTaskExecutionIdentifier  # noqa: F401,E501
from flyteadmin.models.core_workflow_execution_identifier import CoreWorkflowExecutionIdentifier  # noqa: F401,E501
from flyteadmin.models.flyteidlartifact_alias import FlyteidlartifactAlias  # noqa: F401,E501


class ArtifactArtifactSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'CoreLiteral',
        'type': 'CoreLiteralType',
        'tags': 'list[ArtifactTag]',
        'aliases': 'list[FlyteidlartifactAlias]',
        'task_execution': 'CoreTaskExecutionIdentifier',
        'execution': 'CoreWorkflowExecutionIdentifier',
        'principal': 'str',
        'short_description': 'str',
        'long_description': 'str'
    }

    attribute_map = {
        'value': 'value',
        'type': 'type',
        'tags': 'tags',
        'aliases': 'aliases',
        'task_execution': 'task_execution',
        'execution': 'execution',
        'principal': 'principal',
        'short_description': 'short_description',
        'long_description': 'long_description'
    }

    def __init__(self, value=None, type=None, tags=None, aliases=None, task_execution=None, execution=None, principal=None, short_description=None, long_description=None):  # noqa: E501
        """ArtifactArtifactSpec - a model defined in Swagger"""  # noqa: E501

        self._value = None
        self._type = None
        self._tags = None
        self._aliases = None
        self._task_execution = None
        self._execution = None
        self._principal = None
        self._short_description = None
        self._long_description = None
        self.discriminator = None

        if value is not None:
            self.value = value
        if type is not None:
            self.type = type
        if tags is not None:
            self.tags = tags
        if aliases is not None:
            self.aliases = aliases
        if task_execution is not None:
            self.task_execution = task_execution
        if execution is not None:
            self.execution = execution
        if principal is not None:
            self.principal = principal
        if short_description is not None:
            self.short_description = short_description
        if long_description is not None:
            self.long_description = long_description

    @property
    def value(self):
        """Gets the value of this ArtifactArtifactSpec.  # noqa: E501


        :return: The value of this ArtifactArtifactSpec.  # noqa: E501
        :rtype: CoreLiteral
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ArtifactArtifactSpec.


        :param value: The value of this ArtifactArtifactSpec.  # noqa: E501
        :type: CoreLiteral
        """

        self._value = value

    @property
    def type(self):
        """Gets the type of this ArtifactArtifactSpec.  # noqa: E501

        This type will not form part of the artifact key, so for user-named artifacts, if the user changes the type, but forgets to change the name, that is okay. And the reason why this is a separate field is because adding the type to all Literals is a lot of work.  # noqa: E501

        :return: The type of this ArtifactArtifactSpec.  # noqa: E501
        :rtype: CoreLiteralType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ArtifactArtifactSpec.

        This type will not form part of the artifact key, so for user-named artifacts, if the user changes the type, but forgets to change the name, that is okay. And the reason why this is a separate field is because adding the type to all Literals is a lot of work.  # noqa: E501

        :param type: The type of this ArtifactArtifactSpec.  # noqa: E501
        :type: CoreLiteralType
        """

        self._type = type

    @property
    def tags(self):
        """Gets the tags of this ArtifactArtifactSpec.  # noqa: E501

        When you want to set tags on creation.  # noqa: E501

        :return: The tags of this ArtifactArtifactSpec.  # noqa: E501
        :rtype: list[ArtifactTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ArtifactArtifactSpec.

        When you want to set tags on creation.  # noqa: E501

        :param tags: The tags of this ArtifactArtifactSpec.  # noqa: E501
        :type: list[ArtifactTag]
        """

        self._tags = tags

    @property
    def aliases(self):
        """Gets the aliases of this ArtifactArtifactSpec.  # noqa: E501


        :return: The aliases of this ArtifactArtifactSpec.  # noqa: E501
        :rtype: list[FlyteidlartifactAlias]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this ArtifactArtifactSpec.


        :param aliases: The aliases of this ArtifactArtifactSpec.  # noqa: E501
        :type: list[FlyteidlartifactAlias]
        """

        self._aliases = aliases

    @property
    def task_execution(self):
        """Gets the task_execution of this ArtifactArtifactSpec.  # noqa: E501

        Outputs of tasks will have this.  # noqa: E501

        :return: The task_execution of this ArtifactArtifactSpec.  # noqa: E501
        :rtype: CoreTaskExecutionIdentifier
        """
        return self._task_execution

    @task_execution.setter
    def task_execution(self, task_execution):
        """Sets the task_execution of this ArtifactArtifactSpec.

        Outputs of tasks will have this.  # noqa: E501

        :param task_execution: The task_execution of this ArtifactArtifactSpec.  # noqa: E501
        :type: CoreTaskExecutionIdentifier
        """

        self._task_execution = task_execution

    @property
    def execution(self):
        """Gets the execution of this ArtifactArtifactSpec.  # noqa: E501

        Workflow outputs will have this.  # noqa: E501

        :return: The execution of this ArtifactArtifactSpec.  # noqa: E501
        :rtype: CoreWorkflowExecutionIdentifier
        """
        return self._execution

    @execution.setter
    def execution(self, execution):
        """Sets the execution of this ArtifactArtifactSpec.

        Workflow outputs will have this.  # noqa: E501

        :param execution: The execution of this ArtifactArtifactSpec.  # noqa: E501
        :type: CoreWorkflowExecutionIdentifier
        """

        self._execution = execution

    @property
    def principal(self):
        """Gets the principal of this ArtifactArtifactSpec.  # noqa: E501

        Uploads, either from the UI or from the CLI, or FlyteRemote, will have this.  # noqa: E501

        :return: The principal of this ArtifactArtifactSpec.  # noqa: E501
        :rtype: str
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this ArtifactArtifactSpec.

        Uploads, either from the UI or from the CLI, or FlyteRemote, will have this.  # noqa: E501

        :param principal: The principal of this ArtifactArtifactSpec.  # noqa: E501
        :type: str
        """

        self._principal = principal

    @property
    def short_description(self):
        """Gets the short_description of this ArtifactArtifactSpec.  # noqa: E501


        :return: The short_description of this ArtifactArtifactSpec.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this ArtifactArtifactSpec.


        :param short_description: The short_description of this ArtifactArtifactSpec.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def long_description(self):
        """Gets the long_description of this ArtifactArtifactSpec.  # noqa: E501


        :return: The long_description of this ArtifactArtifactSpec.  # noqa: E501
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this ArtifactArtifactSpec.


        :param long_description: The long_description of this ArtifactArtifactSpec.  # noqa: E501
        :type: str
        """

        self._long_description = long_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArtifactArtifactSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArtifactArtifactSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
