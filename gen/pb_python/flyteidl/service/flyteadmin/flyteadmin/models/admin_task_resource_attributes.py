# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.admin_task_resource_spec import AdminTaskResourceSpec  # noqa: F401,E501


class AdminTaskResourceAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'defaults': 'AdminTaskResourceSpec',
        'limits': 'AdminTaskResourceSpec',
        'default_limits': 'AdminTaskResourceSpec'
    }

    attribute_map = {
        'defaults': 'defaults',
        'limits': 'limits',
        'default_limits': 'default_limits'
    }

    def __init__(self, defaults=None, limits=None, default_limits=None):  # noqa: E501
        """AdminTaskResourceAttributes - a model defined in Swagger"""  # noqa: E501

        self._defaults = None
        self._limits = None
        self._default_limits = None
        self.discriminator = None

        if defaults is not None:
            self.defaults = defaults
        if limits is not None:
            self.limits = limits
        if default_limits is not None:
            self.default_limits = default_limits

    @property
    def defaults(self):
        """Gets the defaults of this AdminTaskResourceAttributes.  # noqa: E501


        :return: The defaults of this AdminTaskResourceAttributes.  # noqa: E501
        :rtype: AdminTaskResourceSpec
        """
        return self._defaults

    @defaults.setter
    def defaults(self, defaults):
        """Sets the defaults of this AdminTaskResourceAttributes.


        :param defaults: The defaults of this AdminTaskResourceAttributes.  # noqa: E501
        :type: AdminTaskResourceSpec
        """

        self._defaults = defaults

    @property
    def limits(self):
        """Gets the limits of this AdminTaskResourceAttributes.  # noqa: E501

        These are limits from the system's perspective. Resources requested by the user (either in defaults or limits) are checked against these limits. Defaults in this message, (fields 1 and 3) are also checked against these limits.  # noqa: E501

        :return: The limits of this AdminTaskResourceAttributes.  # noqa: E501
        :rtype: AdminTaskResourceSpec
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this AdminTaskResourceAttributes.

        These are limits from the system's perspective. Resources requested by the user (either in defaults or limits) are checked against these limits. Defaults in this message, (fields 1 and 3) are also checked against these limits.  # noqa: E501

        :param limits: The limits of this AdminTaskResourceAttributes.  # noqa: E501
        :type: AdminTaskResourceSpec
        """

        self._limits = limits

    @property
    def default_limits(self):
        """Gets the default_limits of this AdminTaskResourceAttributes.  # noqa: E501

        If set, these limits will be used as the default limits for tasks that do not specify limits. If not set, but defaults (field 1) are set, then the defaults will be used as the limits.  # noqa: E501

        :return: The default_limits of this AdminTaskResourceAttributes.  # noqa: E501
        :rtype: AdminTaskResourceSpec
        """
        return self._default_limits

    @default_limits.setter
    def default_limits(self, default_limits):
        """Sets the default_limits of this AdminTaskResourceAttributes.

        If set, these limits will be used as the default limits for tasks that do not specify limits. If not set, but defaults (field 1) are set, then the defaults will be used as the limits.  # noqa: E501

        :param default_limits: The default_limits of this AdminTaskResourceAttributes.  # noqa: E501
        :type: AdminTaskResourceSpec
        """

        self._default_limits = default_limits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminTaskResourceAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminTaskResourceAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
