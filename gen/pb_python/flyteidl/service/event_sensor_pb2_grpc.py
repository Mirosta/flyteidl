# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from flyteidl.event import sensor_pb2 as flyteidl_dot_event_dot_sensor__pb2
from flyteidl.event import sensor_state_pb2 as flyteidl_dot_event_dot_sensor__state__pb2


class EventSensorServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ListEventTargets = channel.unary_unary(
        '/flyteidl.service.EventSensorService/ListEventTargets',
        request_serializer=flyteidl_dot_event_dot_sensor__pb2.EventTargetListRequest.SerializeToString,
        response_deserializer=flyteidl_dot_event_dot_sensor__pb2.EventTargetList.FromString,
        )
    self.EventOccurred = channel.unary_unary(
        '/flyteidl.service.EventSensorService/EventOccurred',
        request_serializer=flyteidl_dot_event_dot_sensor__pb2.EventOccurredRequest.SerializeToString,
        response_deserializer=flyteidl_dot_event_dot_sensor__pb2.EventOccurredResponse.FromString,
        )
    self.GetEventSensorState = channel.unary_unary(
        '/flyteidl.service.EventSensorService/GetEventSensorState',
        request_serializer=flyteidl_dot_event_dot_sensor__state__pb2.EventSensorStateGetRequest.SerializeToString,
        response_deserializer=flyteidl_dot_event_dot_sensor__state__pb2.EventSensorStateGetResponse.FromString,
        )
    self.UpdateEventSensorState = channel.unary_unary(
        '/flyteidl.service.EventSensorService/UpdateEventSensorState',
        request_serializer=flyteidl_dot_event_dot_sensor__state__pb2.EventSensorStateUpdateRequest.SerializeToString,
        response_deserializer=flyteidl_dot_event_dot_sensor__state__pb2.EventSensorStateUpdateResponse.FromString,
        )


class EventSensorServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def ListEventTargets(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def EventOccurred(self, request, context):
    """Enqueues an event target to be executed asynchronously.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetEventSensorState(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdateEventSensorState(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_EventSensorServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ListEventTargets': grpc.unary_unary_rpc_method_handler(
          servicer.ListEventTargets,
          request_deserializer=flyteidl_dot_event_dot_sensor__pb2.EventTargetListRequest.FromString,
          response_serializer=flyteidl_dot_event_dot_sensor__pb2.EventTargetList.SerializeToString,
      ),
      'EventOccurred': grpc.unary_unary_rpc_method_handler(
          servicer.EventOccurred,
          request_deserializer=flyteidl_dot_event_dot_sensor__pb2.EventOccurredRequest.FromString,
          response_serializer=flyteidl_dot_event_dot_sensor__pb2.EventOccurredResponse.SerializeToString,
      ),
      'GetEventSensorState': grpc.unary_unary_rpc_method_handler(
          servicer.GetEventSensorState,
          request_deserializer=flyteidl_dot_event_dot_sensor__state__pb2.EventSensorStateGetRequest.FromString,
          response_serializer=flyteidl_dot_event_dot_sensor__state__pb2.EventSensorStateGetResponse.SerializeToString,
      ),
      'UpdateEventSensorState': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateEventSensorState,
          request_deserializer=flyteidl_dot_event_dot_sensor__state__pb2.EventSensorStateUpdateRequest.FromString,
          response_serializer=flyteidl_dot_event_dot_sensor__state__pb2.EventSensorStateUpdateResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'flyteidl.service.EventSensorService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
