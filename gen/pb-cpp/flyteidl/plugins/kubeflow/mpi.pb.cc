// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/kubeflow/mpi.proto

#include "flyteidl/plugins/kubeflow/mpi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fkubeflow_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RunPolicy_flyteidl_2fplugins_2fkubeflow_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DistributedMPITrainingReplicaSpec_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto;
namespace flyteidl {
namespace plugins {
namespace kubeflow {
class DistributedMPITrainingTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DistributedMPITrainingTask> _instance;
} _DistributedMPITrainingTask_default_instance_;
class DistributedMPITrainingReplicaSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DistributedMPITrainingReplicaSpec> _instance;
} _DistributedMPITrainingReplicaSpec_default_instance_;
}  // namespace kubeflow
}  // namespace plugins
}  // namespace flyteidl
static void InitDefaultsDistributedMPITrainingTask_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::plugins::kubeflow::_DistributedMPITrainingTask_default_instance_;
    new (ptr) ::flyteidl::plugins::kubeflow::DistributedMPITrainingTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::kubeflow::DistributedMPITrainingTask::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DistributedMPITrainingTask_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDistributedMPITrainingTask_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto}, {
      &scc_info_DistributedMPITrainingReplicaSpec_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto.base,
      &scc_info_RunPolicy_flyteidl_2fplugins_2fkubeflow_2fcommon_2eproto.base,}};

static void InitDefaultsDistributedMPITrainingReplicaSpec_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::plugins::kubeflow::_DistributedMPITrainingReplicaSpec_default_instance_;
    new (ptr) ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DistributedMPITrainingReplicaSpec_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDistributedMPITrainingReplicaSpec_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto}, {}};

void InitDefaults_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_DistributedMPITrainingTask_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DistributedMPITrainingReplicaSpec_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::kubeflow::DistributedMPITrainingTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::kubeflow::DistributedMPITrainingTask, worker_replicas_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::kubeflow::DistributedMPITrainingTask, launcher_replicas_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::kubeflow::DistributedMPITrainingTask, run_policy_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::kubeflow::DistributedMPITrainingTask, success_policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec, replicas_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec, pod_template_name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec, restart_policy_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::plugins::kubeflow::DistributedMPITrainingTask)},
  { 9, -1, sizeof(::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::kubeflow::_DistributedMPITrainingTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::kubeflow::_DistributedMPITrainingReplicaSpec_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto = {
  {}, AddDescriptors_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto, "flyteidl/plugins/kubeflow/mpi.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto::offsets,
  file_level_metadata_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto, 2, file_level_enum_descriptors_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto, file_level_service_descriptors_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto[] =
  "\n#flyteidl/plugins/kubeflow/mpi.proto\022\031f"
  "lyteidl.plugins.kubeflow\032&flyteidl/plugi"
  "ns/kubeflow/common.proto\"\310\002\n\032Distributed"
  "MPITrainingTask\022U\n\017worker_replicas\030\001 \001(\013"
  "2<.flyteidl.plugins.kubeflow.Distributed"
  "MPITrainingReplicaSpec\022W\n\021launcher_repli"
  "cas\030\002 \001(\0132<.flyteidl.plugins.kubeflow.Di"
  "stributedMPITrainingReplicaSpec\0228\n\nrun_p"
  "olicy\030\003 \001(\0132$.flyteidl.plugins.kubeflow."
  "RunPolicy\022@\n\016success_policy\030\004 \001(\0162(.flyt"
  "eidl.plugins.kubeflow.SuccessPolicy\"\222\001\n!"
  "DistributedMPITrainingReplicaSpec\022\020\n\010rep"
  "licas\030\001 \001(\005\022\031\n\021pod_template_name\030\002 \001(\t\022@"
  "\n\016restart_policy\030\003 \001(\0162(.flyteidl.plugin"
  "s.kubeflow.RestartPolicyB9Z7github.com/f"
  "lyteorg/flyteidl/gen/pb-go/flyteidl/plug"
  "insb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto = {
  false, InitDefaults_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto, 
  descriptor_table_protodef_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto,
  "flyteidl/plugins/kubeflow/mpi.proto", &assign_descriptors_table_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto, 651,
};

void AddDescriptors_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_flyteidl_2fplugins_2fkubeflow_2fcommon_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto = []() { AddDescriptors_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto(); return true; }();
namespace flyteidl {
namespace plugins {
namespace kubeflow {

// ===================================================================

void DistributedMPITrainingTask::InitAsDefaultInstance() {
  ::flyteidl::plugins::kubeflow::_DistributedMPITrainingTask_default_instance_._instance.get_mutable()->worker_replicas_ = const_cast< ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec*>(
      ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec::internal_default_instance());
  ::flyteidl::plugins::kubeflow::_DistributedMPITrainingTask_default_instance_._instance.get_mutable()->launcher_replicas_ = const_cast< ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec*>(
      ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec::internal_default_instance());
  ::flyteidl::plugins::kubeflow::_DistributedMPITrainingTask_default_instance_._instance.get_mutable()->run_policy_ = const_cast< ::flyteidl::plugins::kubeflow::RunPolicy*>(
      ::flyteidl::plugins::kubeflow::RunPolicy::internal_default_instance());
}
class DistributedMPITrainingTask::HasBitSetters {
 public:
  static const ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec& worker_replicas(const DistributedMPITrainingTask* msg);
  static const ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec& launcher_replicas(const DistributedMPITrainingTask* msg);
  static const ::flyteidl::plugins::kubeflow::RunPolicy& run_policy(const DistributedMPITrainingTask* msg);
};

const ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec&
DistributedMPITrainingTask::HasBitSetters::worker_replicas(const DistributedMPITrainingTask* msg) {
  return *msg->worker_replicas_;
}
const ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec&
DistributedMPITrainingTask::HasBitSetters::launcher_replicas(const DistributedMPITrainingTask* msg) {
  return *msg->launcher_replicas_;
}
const ::flyteidl::plugins::kubeflow::RunPolicy&
DistributedMPITrainingTask::HasBitSetters::run_policy(const DistributedMPITrainingTask* msg) {
  return *msg->run_policy_;
}
void DistributedMPITrainingTask::clear_run_policy() {
  if (GetArenaNoVirtual() == nullptr && run_policy_ != nullptr) {
    delete run_policy_;
  }
  run_policy_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistributedMPITrainingTask::kWorkerReplicasFieldNumber;
const int DistributedMPITrainingTask::kLauncherReplicasFieldNumber;
const int DistributedMPITrainingTask::kRunPolicyFieldNumber;
const int DistributedMPITrainingTask::kSuccessPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistributedMPITrainingTask::DistributedMPITrainingTask()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.kubeflow.DistributedMPITrainingTask)
}
DistributedMPITrainingTask::DistributedMPITrainingTask(const DistributedMPITrainingTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_worker_replicas()) {
    worker_replicas_ = new ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec(*from.worker_replicas_);
  } else {
    worker_replicas_ = nullptr;
  }
  if (from.has_launcher_replicas()) {
    launcher_replicas_ = new ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec(*from.launcher_replicas_);
  } else {
    launcher_replicas_ = nullptr;
  }
  if (from.has_run_policy()) {
    run_policy_ = new ::flyteidl::plugins::kubeflow::RunPolicy(*from.run_policy_);
  } else {
    run_policy_ = nullptr;
  }
  success_policy_ = from.success_policy_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.kubeflow.DistributedMPITrainingTask)
}

void DistributedMPITrainingTask::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DistributedMPITrainingTask_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto.base);
  ::memset(&worker_replicas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_policy_) -
      reinterpret_cast<char*>(&worker_replicas_)) + sizeof(success_policy_));
}

DistributedMPITrainingTask::~DistributedMPITrainingTask() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.kubeflow.DistributedMPITrainingTask)
  SharedDtor();
}

void DistributedMPITrainingTask::SharedDtor() {
  if (this != internal_default_instance()) delete worker_replicas_;
  if (this != internal_default_instance()) delete launcher_replicas_;
  if (this != internal_default_instance()) delete run_policy_;
}

void DistributedMPITrainingTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DistributedMPITrainingTask& DistributedMPITrainingTask::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DistributedMPITrainingTask_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto.base);
  return *internal_default_instance();
}


void DistributedMPITrainingTask::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.kubeflow.DistributedMPITrainingTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && worker_replicas_ != nullptr) {
    delete worker_replicas_;
  }
  worker_replicas_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && launcher_replicas_ != nullptr) {
    delete launcher_replicas_;
  }
  launcher_replicas_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && run_policy_ != nullptr) {
    delete run_policy_;
  }
  run_policy_ = nullptr;
  success_policy_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DistributedMPITrainingTask::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DistributedMPITrainingTask*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec worker_replicas = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec::_InternalParse;
        object = msg->mutable_worker_replicas();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec launcher_replicas = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec::_InternalParse;
        object = msg->mutable_launcher_replicas();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.plugins.kubeflow.RunPolicy run_policy = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::plugins::kubeflow::RunPolicy::_InternalParse;
        object = msg->mutable_run_policy();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.plugins.kubeflow.SuccessPolicy success_policy = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_success_policy(static_cast<::flyteidl::plugins::kubeflow::SuccessPolicy>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DistributedMPITrainingTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.kubeflow.DistributedMPITrainingTask)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec worker_replicas = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_worker_replicas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec launcher_replicas = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_launcher_replicas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.plugins.kubeflow.RunPolicy run_policy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_run_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.plugins.kubeflow.SuccessPolicy success_policy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_success_policy(static_cast< ::flyteidl::plugins::kubeflow::SuccessPolicy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.kubeflow.DistributedMPITrainingTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.kubeflow.DistributedMPITrainingTask)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DistributedMPITrainingTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.kubeflow.DistributedMPITrainingTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec worker_replicas = 1;
  if (this->has_worker_replicas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::worker_replicas(this), output);
  }

  // .flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec launcher_replicas = 2;
  if (this->has_launcher_replicas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::launcher_replicas(this), output);
  }

  // .flyteidl.plugins.kubeflow.RunPolicy run_policy = 3;
  if (this->has_run_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::run_policy(this), output);
  }

  // .flyteidl.plugins.kubeflow.SuccessPolicy success_policy = 4;
  if (this->success_policy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->success_policy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.kubeflow.DistributedMPITrainingTask)
}

::google::protobuf::uint8* DistributedMPITrainingTask::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.kubeflow.DistributedMPITrainingTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec worker_replicas = 1;
  if (this->has_worker_replicas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::worker_replicas(this), target);
  }

  // .flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec launcher_replicas = 2;
  if (this->has_launcher_replicas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::launcher_replicas(this), target);
  }

  // .flyteidl.plugins.kubeflow.RunPolicy run_policy = 3;
  if (this->has_run_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::run_policy(this), target);
  }

  // .flyteidl.plugins.kubeflow.SuccessPolicy success_policy = 4;
  if (this->success_policy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->success_policy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.kubeflow.DistributedMPITrainingTask)
  return target;
}

size_t DistributedMPITrainingTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.kubeflow.DistributedMPITrainingTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec worker_replicas = 1;
  if (this->has_worker_replicas()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *worker_replicas_);
  }

  // .flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec launcher_replicas = 2;
  if (this->has_launcher_replicas()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *launcher_replicas_);
  }

  // .flyteidl.plugins.kubeflow.RunPolicy run_policy = 3;
  if (this->has_run_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *run_policy_);
  }

  // .flyteidl.plugins.kubeflow.SuccessPolicy success_policy = 4;
  if (this->success_policy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->success_policy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistributedMPITrainingTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.kubeflow.DistributedMPITrainingTask)
  GOOGLE_DCHECK_NE(&from, this);
  const DistributedMPITrainingTask* source =
      ::google::protobuf::DynamicCastToGenerated<DistributedMPITrainingTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.kubeflow.DistributedMPITrainingTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.kubeflow.DistributedMPITrainingTask)
    MergeFrom(*source);
  }
}

void DistributedMPITrainingTask::MergeFrom(const DistributedMPITrainingTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.kubeflow.DistributedMPITrainingTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_worker_replicas()) {
    mutable_worker_replicas()->::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec::MergeFrom(from.worker_replicas());
  }
  if (from.has_launcher_replicas()) {
    mutable_launcher_replicas()->::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec::MergeFrom(from.launcher_replicas());
  }
  if (from.has_run_policy()) {
    mutable_run_policy()->::flyteidl::plugins::kubeflow::RunPolicy::MergeFrom(from.run_policy());
  }
  if (from.success_policy() != 0) {
    set_success_policy(from.success_policy());
  }
}

void DistributedMPITrainingTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.kubeflow.DistributedMPITrainingTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistributedMPITrainingTask::CopyFrom(const DistributedMPITrainingTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.kubeflow.DistributedMPITrainingTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistributedMPITrainingTask::IsInitialized() const {
  return true;
}

void DistributedMPITrainingTask::Swap(DistributedMPITrainingTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistributedMPITrainingTask::InternalSwap(DistributedMPITrainingTask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(worker_replicas_, other->worker_replicas_);
  swap(launcher_replicas_, other->launcher_replicas_);
  swap(run_policy_, other->run_policy_);
  swap(success_policy_, other->success_policy_);
}

::google::protobuf::Metadata DistributedMPITrainingTask::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto);
  return ::file_level_metadata_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DistributedMPITrainingReplicaSpec::InitAsDefaultInstance() {
}
class DistributedMPITrainingReplicaSpec::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistributedMPITrainingReplicaSpec::kReplicasFieldNumber;
const int DistributedMPITrainingReplicaSpec::kPodTemplateNameFieldNumber;
const int DistributedMPITrainingReplicaSpec::kRestartPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistributedMPITrainingReplicaSpec::DistributedMPITrainingReplicaSpec()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec)
}
DistributedMPITrainingReplicaSpec::DistributedMPITrainingReplicaSpec(const DistributedMPITrainingReplicaSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pod_template_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pod_template_name().size() > 0) {
    pod_template_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pod_template_name_);
  }
  ::memcpy(&replicas_, &from.replicas_,
    static_cast<size_t>(reinterpret_cast<char*>(&restart_policy_) -
    reinterpret_cast<char*>(&replicas_)) + sizeof(restart_policy_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec)
}

void DistributedMPITrainingReplicaSpec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DistributedMPITrainingReplicaSpec_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto.base);
  pod_template_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&replicas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restart_policy_) -
      reinterpret_cast<char*>(&replicas_)) + sizeof(restart_policy_));
}

DistributedMPITrainingReplicaSpec::~DistributedMPITrainingReplicaSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec)
  SharedDtor();
}

void DistributedMPITrainingReplicaSpec::SharedDtor() {
  pod_template_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DistributedMPITrainingReplicaSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DistributedMPITrainingReplicaSpec& DistributedMPITrainingReplicaSpec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DistributedMPITrainingReplicaSpec_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto.base);
  return *internal_default_instance();
}


void DistributedMPITrainingReplicaSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pod_template_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&replicas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restart_policy_) -
      reinterpret_cast<char*>(&replicas_)) + sizeof(restart_policy_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DistributedMPITrainingReplicaSpec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DistributedMPITrainingReplicaSpec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 replicas = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_replicas(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string pod_template_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.pod_template_name");
        object = msg->mutable_pod_template_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.plugins.kubeflow.RestartPolicy restart_policy = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_restart_policy(static_cast<::flyteidl::plugins::kubeflow::RestartPolicy>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DistributedMPITrainingReplicaSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 replicas = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replicas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pod_template_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pod_template_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pod_template_name().data(), static_cast<int>(this->pod_template_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.pod_template_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.plugins.kubeflow.RestartPolicy restart_policy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_restart_policy(static_cast< ::flyteidl::plugins::kubeflow::RestartPolicy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DistributedMPITrainingReplicaSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 replicas = 1;
  if (this->replicas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->replicas(), output);
  }

  // string pod_template_name = 2;
  if (this->pod_template_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pod_template_name().data(), static_cast<int>(this->pod_template_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.pod_template_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pod_template_name(), output);
  }

  // .flyteidl.plugins.kubeflow.RestartPolicy restart_policy = 3;
  if (this->restart_policy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->restart_policy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec)
}

::google::protobuf::uint8* DistributedMPITrainingReplicaSpec::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 replicas = 1;
  if (this->replicas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->replicas(), target);
  }

  // string pod_template_name = 2;
  if (this->pod_template_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pod_template_name().data(), static_cast<int>(this->pod_template_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.pod_template_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pod_template_name(), target);
  }

  // .flyteidl.plugins.kubeflow.RestartPolicy restart_policy = 3;
  if (this->restart_policy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->restart_policy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec)
  return target;
}

size_t DistributedMPITrainingReplicaSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pod_template_name = 2;
  if (this->pod_template_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pod_template_name());
  }

  // int32 replicas = 1;
  if (this->replicas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replicas());
  }

  // .flyteidl.plugins.kubeflow.RestartPolicy restart_policy = 3;
  if (this->restart_policy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->restart_policy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistributedMPITrainingReplicaSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const DistributedMPITrainingReplicaSpec* source =
      ::google::protobuf::DynamicCastToGenerated<DistributedMPITrainingReplicaSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec)
    MergeFrom(*source);
  }
}

void DistributedMPITrainingReplicaSpec::MergeFrom(const DistributedMPITrainingReplicaSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pod_template_name().size() > 0) {

    pod_template_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pod_template_name_);
  }
  if (from.replicas() != 0) {
    set_replicas(from.replicas());
  }
  if (from.restart_policy() != 0) {
    set_restart_policy(from.restart_policy());
  }
}

void DistributedMPITrainingReplicaSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistributedMPITrainingReplicaSpec::CopyFrom(const DistributedMPITrainingReplicaSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistributedMPITrainingReplicaSpec::IsInitialized() const {
  return true;
}

void DistributedMPITrainingReplicaSpec::Swap(DistributedMPITrainingReplicaSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistributedMPITrainingReplicaSpec::InternalSwap(DistributedMPITrainingReplicaSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pod_template_name_.Swap(&other->pod_template_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(replicas_, other->replicas_);
  swap(restart_policy_, other->restart_policy_);
}

::google::protobuf::Metadata DistributedMPITrainingReplicaSpec::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto);
  return ::file_level_metadata_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace kubeflow
}  // namespace plugins
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::kubeflow::DistributedMPITrainingTask* Arena::CreateMaybeMessage< ::flyteidl::plugins::kubeflow::DistributedMPITrainingTask >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::plugins::kubeflow::DistributedMPITrainingTask >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec* Arena::CreateMaybeMessage< ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
