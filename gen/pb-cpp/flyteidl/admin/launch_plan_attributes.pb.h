// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/launch_plan_attributes.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fadmin_2flaunch_5fplan_5fattributes_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fadmin_2flaunch_5fplan_5fattributes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/admin/matchable_resource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2flaunch_5fplan_5fattributes_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2flaunch_5fplan_5fattributes_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fadmin_2flaunch_5fplan_5fattributes_2eproto();
namespace flyteidl {
namespace admin {
class LaunchPlanAttributes;
class LaunchPlanAttributesDefaultTypeInternal;
extern LaunchPlanAttributesDefaultTypeInternal _LaunchPlanAttributes_default_instance_;
class LaunchPlanAttributesDeleteRequest;
class LaunchPlanAttributesDeleteRequestDefaultTypeInternal;
extern LaunchPlanAttributesDeleteRequestDefaultTypeInternal _LaunchPlanAttributesDeleteRequest_default_instance_;
class LaunchPlanAttributesDeleteResponse;
class LaunchPlanAttributesDeleteResponseDefaultTypeInternal;
extern LaunchPlanAttributesDeleteResponseDefaultTypeInternal _LaunchPlanAttributesDeleteResponse_default_instance_;
class LaunchPlanAttributesGetRequest;
class LaunchPlanAttributesGetRequestDefaultTypeInternal;
extern LaunchPlanAttributesGetRequestDefaultTypeInternal _LaunchPlanAttributesGetRequest_default_instance_;
class LaunchPlanAttributesGetResponse;
class LaunchPlanAttributesGetResponseDefaultTypeInternal;
extern LaunchPlanAttributesGetResponseDefaultTypeInternal _LaunchPlanAttributesGetResponse_default_instance_;
class LaunchPlanAttributesUpdateRequest;
class LaunchPlanAttributesUpdateRequestDefaultTypeInternal;
extern LaunchPlanAttributesUpdateRequestDefaultTypeInternal _LaunchPlanAttributesUpdateRequest_default_instance_;
class LaunchPlanAttributesUpdateResponse;
class LaunchPlanAttributesUpdateResponseDefaultTypeInternal;
extern LaunchPlanAttributesUpdateResponseDefaultTypeInternal _LaunchPlanAttributesUpdateResponse_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::admin::LaunchPlanAttributes* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanAttributes>(Arena*);
template<> ::flyteidl::admin::LaunchPlanAttributesDeleteRequest* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanAttributesDeleteRequest>(Arena*);
template<> ::flyteidl::admin::LaunchPlanAttributesDeleteResponse* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanAttributesDeleteResponse>(Arena*);
template<> ::flyteidl::admin::LaunchPlanAttributesGetRequest* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanAttributesGetRequest>(Arena*);
template<> ::flyteidl::admin::LaunchPlanAttributesGetResponse* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanAttributesGetResponse>(Arena*);
template<> ::flyteidl::admin::LaunchPlanAttributesUpdateRequest* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanAttributesUpdateRequest>(Arena*);
template<> ::flyteidl::admin::LaunchPlanAttributesUpdateResponse* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanAttributesUpdateResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace admin {

// ===================================================================

class LaunchPlanAttributes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanAttributes) */ {
 public:
  LaunchPlanAttributes();
  virtual ~LaunchPlanAttributes();

  LaunchPlanAttributes(const LaunchPlanAttributes& from);

  inline LaunchPlanAttributes& operator=(const LaunchPlanAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaunchPlanAttributes(LaunchPlanAttributes&& from) noexcept
    : LaunchPlanAttributes() {
    *this = ::std::move(from);
  }

  inline LaunchPlanAttributes& operator=(LaunchPlanAttributes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LaunchPlanAttributes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchPlanAttributes* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanAttributes*>(
               &_LaunchPlanAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LaunchPlanAttributes* other);
  friend void swap(LaunchPlanAttributes& a, LaunchPlanAttributes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaunchPlanAttributes* New() const final {
    return CreateMaybeMessage<LaunchPlanAttributes>(nullptr);
  }

  LaunchPlanAttributes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaunchPlanAttributes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaunchPlanAttributes& from);
  void MergeFrom(const LaunchPlanAttributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlanAttributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // string domain = 2;
  void clear_domain();
  static const int kDomainFieldNumber = 2;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string workflow = 3;
  void clear_workflow();
  static const int kWorkflowFieldNumber = 3;
  const ::std::string& workflow() const;
  void set_workflow(const ::std::string& value);
  #if LANG_CXX11
  void set_workflow(::std::string&& value);
  #endif
  void set_workflow(const char* value);
  void set_workflow(const char* value, size_t size);
  ::std::string* mutable_workflow();
  ::std::string* release_workflow();
  void set_allocated_workflow(::std::string* workflow);

  // string launch_plan = 4;
  void clear_launch_plan();
  static const int kLaunchPlanFieldNumber = 4;
  const ::std::string& launch_plan() const;
  void set_launch_plan(const ::std::string& value);
  #if LANG_CXX11
  void set_launch_plan(::std::string&& value);
  #endif
  void set_launch_plan(const char* value);
  void set_launch_plan(const char* value, size_t size);
  ::std::string* mutable_launch_plan();
  ::std::string* release_launch_plan();
  void set_allocated_launch_plan(::std::string* launch_plan);

  // .flyteidl.admin.MatchingAttributes matching_attributes = 5;
  bool has_matching_attributes() const;
  void clear_matching_attributes();
  static const int kMatchingAttributesFieldNumber = 5;
  const ::flyteidl::admin::MatchingAttributes& matching_attributes() const;
  ::flyteidl::admin::MatchingAttributes* release_matching_attributes();
  ::flyteidl::admin::MatchingAttributes* mutable_matching_attributes();
  void set_allocated_matching_attributes(::flyteidl::admin::MatchingAttributes* matching_attributes);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanAttributes)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr workflow_;
  ::google::protobuf::internal::ArenaStringPtr launch_plan_;
  ::flyteidl::admin::MatchingAttributes* matching_attributes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_5fattributes_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlanAttributesUpdateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanAttributesUpdateRequest) */ {
 public:
  LaunchPlanAttributesUpdateRequest();
  virtual ~LaunchPlanAttributesUpdateRequest();

  LaunchPlanAttributesUpdateRequest(const LaunchPlanAttributesUpdateRequest& from);

  inline LaunchPlanAttributesUpdateRequest& operator=(const LaunchPlanAttributesUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaunchPlanAttributesUpdateRequest(LaunchPlanAttributesUpdateRequest&& from) noexcept
    : LaunchPlanAttributesUpdateRequest() {
    *this = ::std::move(from);
  }

  inline LaunchPlanAttributesUpdateRequest& operator=(LaunchPlanAttributesUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LaunchPlanAttributesUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchPlanAttributesUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanAttributesUpdateRequest*>(
               &_LaunchPlanAttributesUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LaunchPlanAttributesUpdateRequest* other);
  friend void swap(LaunchPlanAttributesUpdateRequest& a, LaunchPlanAttributesUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaunchPlanAttributesUpdateRequest* New() const final {
    return CreateMaybeMessage<LaunchPlanAttributesUpdateRequest>(nullptr);
  }

  LaunchPlanAttributesUpdateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaunchPlanAttributesUpdateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaunchPlanAttributesUpdateRequest& from);
  void MergeFrom(const LaunchPlanAttributesUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlanAttributesUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.LaunchPlanAttributes attributes = 1;
  bool has_attributes() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 1;
  const ::flyteidl::admin::LaunchPlanAttributes& attributes() const;
  ::flyteidl::admin::LaunchPlanAttributes* release_attributes();
  ::flyteidl::admin::LaunchPlanAttributes* mutable_attributes();
  void set_allocated_attributes(::flyteidl::admin::LaunchPlanAttributes* attributes);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanAttributesUpdateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::admin::LaunchPlanAttributes* attributes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_5fattributes_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlanAttributesUpdateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanAttributesUpdateResponse) */ {
 public:
  LaunchPlanAttributesUpdateResponse();
  virtual ~LaunchPlanAttributesUpdateResponse();

  LaunchPlanAttributesUpdateResponse(const LaunchPlanAttributesUpdateResponse& from);

  inline LaunchPlanAttributesUpdateResponse& operator=(const LaunchPlanAttributesUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaunchPlanAttributesUpdateResponse(LaunchPlanAttributesUpdateResponse&& from) noexcept
    : LaunchPlanAttributesUpdateResponse() {
    *this = ::std::move(from);
  }

  inline LaunchPlanAttributesUpdateResponse& operator=(LaunchPlanAttributesUpdateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LaunchPlanAttributesUpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchPlanAttributesUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanAttributesUpdateResponse*>(
               &_LaunchPlanAttributesUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LaunchPlanAttributesUpdateResponse* other);
  friend void swap(LaunchPlanAttributesUpdateResponse& a, LaunchPlanAttributesUpdateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaunchPlanAttributesUpdateResponse* New() const final {
    return CreateMaybeMessage<LaunchPlanAttributesUpdateResponse>(nullptr);
  }

  LaunchPlanAttributesUpdateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaunchPlanAttributesUpdateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaunchPlanAttributesUpdateResponse& from);
  void MergeFrom(const LaunchPlanAttributesUpdateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlanAttributesUpdateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanAttributesUpdateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_5fattributes_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlanAttributesGetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanAttributesGetRequest) */ {
 public:
  LaunchPlanAttributesGetRequest();
  virtual ~LaunchPlanAttributesGetRequest();

  LaunchPlanAttributesGetRequest(const LaunchPlanAttributesGetRequest& from);

  inline LaunchPlanAttributesGetRequest& operator=(const LaunchPlanAttributesGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaunchPlanAttributesGetRequest(LaunchPlanAttributesGetRequest&& from) noexcept
    : LaunchPlanAttributesGetRequest() {
    *this = ::std::move(from);
  }

  inline LaunchPlanAttributesGetRequest& operator=(LaunchPlanAttributesGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LaunchPlanAttributesGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchPlanAttributesGetRequest* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanAttributesGetRequest*>(
               &_LaunchPlanAttributesGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LaunchPlanAttributesGetRequest* other);
  friend void swap(LaunchPlanAttributesGetRequest& a, LaunchPlanAttributesGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaunchPlanAttributesGetRequest* New() const final {
    return CreateMaybeMessage<LaunchPlanAttributesGetRequest>(nullptr);
  }

  LaunchPlanAttributesGetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaunchPlanAttributesGetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaunchPlanAttributesGetRequest& from);
  void MergeFrom(const LaunchPlanAttributesGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlanAttributesGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // string domain = 2;
  void clear_domain();
  static const int kDomainFieldNumber = 2;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string workflow = 3;
  void clear_workflow();
  static const int kWorkflowFieldNumber = 3;
  const ::std::string& workflow() const;
  void set_workflow(const ::std::string& value);
  #if LANG_CXX11
  void set_workflow(::std::string&& value);
  #endif
  void set_workflow(const char* value);
  void set_workflow(const char* value, size_t size);
  ::std::string* mutable_workflow();
  ::std::string* release_workflow();
  void set_allocated_workflow(::std::string* workflow);

  // string launch_plan = 4;
  void clear_launch_plan();
  static const int kLaunchPlanFieldNumber = 4;
  const ::std::string& launch_plan() const;
  void set_launch_plan(const ::std::string& value);
  #if LANG_CXX11
  void set_launch_plan(::std::string&& value);
  #endif
  void set_launch_plan(const char* value);
  void set_launch_plan(const char* value, size_t size);
  ::std::string* mutable_launch_plan();
  ::std::string* release_launch_plan();
  void set_allocated_launch_plan(::std::string* launch_plan);

  // .flyteidl.admin.MatchableResource resource_type = 5;
  void clear_resource_type();
  static const int kResourceTypeFieldNumber = 5;
  ::flyteidl::admin::MatchableResource resource_type() const;
  void set_resource_type(::flyteidl::admin::MatchableResource value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanAttributesGetRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr workflow_;
  ::google::protobuf::internal::ArenaStringPtr launch_plan_;
  int resource_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_5fattributes_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlanAttributesGetResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanAttributesGetResponse) */ {
 public:
  LaunchPlanAttributesGetResponse();
  virtual ~LaunchPlanAttributesGetResponse();

  LaunchPlanAttributesGetResponse(const LaunchPlanAttributesGetResponse& from);

  inline LaunchPlanAttributesGetResponse& operator=(const LaunchPlanAttributesGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaunchPlanAttributesGetResponse(LaunchPlanAttributesGetResponse&& from) noexcept
    : LaunchPlanAttributesGetResponse() {
    *this = ::std::move(from);
  }

  inline LaunchPlanAttributesGetResponse& operator=(LaunchPlanAttributesGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LaunchPlanAttributesGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchPlanAttributesGetResponse* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanAttributesGetResponse*>(
               &_LaunchPlanAttributesGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(LaunchPlanAttributesGetResponse* other);
  friend void swap(LaunchPlanAttributesGetResponse& a, LaunchPlanAttributesGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaunchPlanAttributesGetResponse* New() const final {
    return CreateMaybeMessage<LaunchPlanAttributesGetResponse>(nullptr);
  }

  LaunchPlanAttributesGetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaunchPlanAttributesGetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaunchPlanAttributesGetResponse& from);
  void MergeFrom(const LaunchPlanAttributesGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlanAttributesGetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.LaunchPlanAttributes attributes = 1;
  bool has_attributes() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 1;
  const ::flyteidl::admin::LaunchPlanAttributes& attributes() const;
  ::flyteidl::admin::LaunchPlanAttributes* release_attributes();
  ::flyteidl::admin::LaunchPlanAttributes* mutable_attributes();
  void set_allocated_attributes(::flyteidl::admin::LaunchPlanAttributes* attributes);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanAttributesGetResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::admin::LaunchPlanAttributes* attributes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_5fattributes_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlanAttributesDeleteRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanAttributesDeleteRequest) */ {
 public:
  LaunchPlanAttributesDeleteRequest();
  virtual ~LaunchPlanAttributesDeleteRequest();

  LaunchPlanAttributesDeleteRequest(const LaunchPlanAttributesDeleteRequest& from);

  inline LaunchPlanAttributesDeleteRequest& operator=(const LaunchPlanAttributesDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaunchPlanAttributesDeleteRequest(LaunchPlanAttributesDeleteRequest&& from) noexcept
    : LaunchPlanAttributesDeleteRequest() {
    *this = ::std::move(from);
  }

  inline LaunchPlanAttributesDeleteRequest& operator=(LaunchPlanAttributesDeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LaunchPlanAttributesDeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchPlanAttributesDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanAttributesDeleteRequest*>(
               &_LaunchPlanAttributesDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(LaunchPlanAttributesDeleteRequest* other);
  friend void swap(LaunchPlanAttributesDeleteRequest& a, LaunchPlanAttributesDeleteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaunchPlanAttributesDeleteRequest* New() const final {
    return CreateMaybeMessage<LaunchPlanAttributesDeleteRequest>(nullptr);
  }

  LaunchPlanAttributesDeleteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaunchPlanAttributesDeleteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaunchPlanAttributesDeleteRequest& from);
  void MergeFrom(const LaunchPlanAttributesDeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlanAttributesDeleteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // string domain = 2;
  void clear_domain();
  static const int kDomainFieldNumber = 2;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string workflow = 3;
  void clear_workflow();
  static const int kWorkflowFieldNumber = 3;
  const ::std::string& workflow() const;
  void set_workflow(const ::std::string& value);
  #if LANG_CXX11
  void set_workflow(::std::string&& value);
  #endif
  void set_workflow(const char* value);
  void set_workflow(const char* value, size_t size);
  ::std::string* mutable_workflow();
  ::std::string* release_workflow();
  void set_allocated_workflow(::std::string* workflow);

  // string launch_plan = 4;
  void clear_launch_plan();
  static const int kLaunchPlanFieldNumber = 4;
  const ::std::string& launch_plan() const;
  void set_launch_plan(const ::std::string& value);
  #if LANG_CXX11
  void set_launch_plan(::std::string&& value);
  #endif
  void set_launch_plan(const char* value);
  void set_launch_plan(const char* value, size_t size);
  ::std::string* mutable_launch_plan();
  ::std::string* release_launch_plan();
  void set_allocated_launch_plan(::std::string* launch_plan);

  // .flyteidl.admin.MatchableResource resource_type = 5;
  void clear_resource_type();
  static const int kResourceTypeFieldNumber = 5;
  ::flyteidl::admin::MatchableResource resource_type() const;
  void set_resource_type(::flyteidl::admin::MatchableResource value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanAttributesDeleteRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr workflow_;
  ::google::protobuf::internal::ArenaStringPtr launch_plan_;
  int resource_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_5fattributes_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlanAttributesDeleteResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanAttributesDeleteResponse) */ {
 public:
  LaunchPlanAttributesDeleteResponse();
  virtual ~LaunchPlanAttributesDeleteResponse();

  LaunchPlanAttributesDeleteResponse(const LaunchPlanAttributesDeleteResponse& from);

  inline LaunchPlanAttributesDeleteResponse& operator=(const LaunchPlanAttributesDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaunchPlanAttributesDeleteResponse(LaunchPlanAttributesDeleteResponse&& from) noexcept
    : LaunchPlanAttributesDeleteResponse() {
    *this = ::std::move(from);
  }

  inline LaunchPlanAttributesDeleteResponse& operator=(LaunchPlanAttributesDeleteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LaunchPlanAttributesDeleteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchPlanAttributesDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanAttributesDeleteResponse*>(
               &_LaunchPlanAttributesDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(LaunchPlanAttributesDeleteResponse* other);
  friend void swap(LaunchPlanAttributesDeleteResponse& a, LaunchPlanAttributesDeleteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaunchPlanAttributesDeleteResponse* New() const final {
    return CreateMaybeMessage<LaunchPlanAttributesDeleteResponse>(nullptr);
  }

  LaunchPlanAttributesDeleteResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaunchPlanAttributesDeleteResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaunchPlanAttributesDeleteResponse& from);
  void MergeFrom(const LaunchPlanAttributesDeleteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlanAttributesDeleteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanAttributesDeleteResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_5fattributes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaunchPlanAttributes

// string project = 1;
inline void LaunchPlanAttributes::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaunchPlanAttributes::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanAttributes.project)
  return project_.GetNoArena();
}
inline void LaunchPlanAttributes::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanAttributes.project)
}
#if LANG_CXX11
inline void LaunchPlanAttributes::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.LaunchPlanAttributes.project)
}
#endif
inline void LaunchPlanAttributes::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.LaunchPlanAttributes.project)
}
inline void LaunchPlanAttributes::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.LaunchPlanAttributes.project)
}
inline ::std::string* LaunchPlanAttributes::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanAttributes.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaunchPlanAttributes::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanAttributes.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchPlanAttributes::set_allocated_project(::std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanAttributes.project)
}

// string domain = 2;
inline void LaunchPlanAttributes::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaunchPlanAttributes::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanAttributes.domain)
  return domain_.GetNoArena();
}
inline void LaunchPlanAttributes::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanAttributes.domain)
}
#if LANG_CXX11
inline void LaunchPlanAttributes::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.LaunchPlanAttributes.domain)
}
#endif
inline void LaunchPlanAttributes::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.LaunchPlanAttributes.domain)
}
inline void LaunchPlanAttributes::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.LaunchPlanAttributes.domain)
}
inline ::std::string* LaunchPlanAttributes::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanAttributes.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaunchPlanAttributes::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanAttributes.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchPlanAttributes::set_allocated_domain(::std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanAttributes.domain)
}

// string workflow = 3;
inline void LaunchPlanAttributes::clear_workflow() {
  workflow_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaunchPlanAttributes::workflow() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanAttributes.workflow)
  return workflow_.GetNoArena();
}
inline void LaunchPlanAttributes::set_workflow(const ::std::string& value) {
  
  workflow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanAttributes.workflow)
}
#if LANG_CXX11
inline void LaunchPlanAttributes::set_workflow(::std::string&& value) {
  
  workflow_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.LaunchPlanAttributes.workflow)
}
#endif
inline void LaunchPlanAttributes::set_workflow(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.LaunchPlanAttributes.workflow)
}
inline void LaunchPlanAttributes::set_workflow(const char* value, size_t size) {
  
  workflow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.LaunchPlanAttributes.workflow)
}
inline ::std::string* LaunchPlanAttributes::mutable_workflow() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanAttributes.workflow)
  return workflow_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaunchPlanAttributes::release_workflow() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanAttributes.workflow)
  
  return workflow_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchPlanAttributes::set_allocated_workflow(::std::string* workflow) {
  if (workflow != nullptr) {
    
  } else {
    
  }
  workflow_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workflow);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanAttributes.workflow)
}

// string launch_plan = 4;
inline void LaunchPlanAttributes::clear_launch_plan() {
  launch_plan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaunchPlanAttributes::launch_plan() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanAttributes.launch_plan)
  return launch_plan_.GetNoArena();
}
inline void LaunchPlanAttributes::set_launch_plan(const ::std::string& value) {
  
  launch_plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanAttributes.launch_plan)
}
#if LANG_CXX11
inline void LaunchPlanAttributes::set_launch_plan(::std::string&& value) {
  
  launch_plan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.LaunchPlanAttributes.launch_plan)
}
#endif
inline void LaunchPlanAttributes::set_launch_plan(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  launch_plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.LaunchPlanAttributes.launch_plan)
}
inline void LaunchPlanAttributes::set_launch_plan(const char* value, size_t size) {
  
  launch_plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.LaunchPlanAttributes.launch_plan)
}
inline ::std::string* LaunchPlanAttributes::mutable_launch_plan() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanAttributes.launch_plan)
  return launch_plan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaunchPlanAttributes::release_launch_plan() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanAttributes.launch_plan)
  
  return launch_plan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchPlanAttributes::set_allocated_launch_plan(::std::string* launch_plan) {
  if (launch_plan != nullptr) {
    
  } else {
    
  }
  launch_plan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), launch_plan);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanAttributes.launch_plan)
}

// .flyteidl.admin.MatchingAttributes matching_attributes = 5;
inline bool LaunchPlanAttributes::has_matching_attributes() const {
  return this != internal_default_instance() && matching_attributes_ != nullptr;
}
inline const ::flyteidl::admin::MatchingAttributes& LaunchPlanAttributes::matching_attributes() const {
  const ::flyteidl::admin::MatchingAttributes* p = matching_attributes_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanAttributes.matching_attributes)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::MatchingAttributes*>(
      &::flyteidl::admin::_MatchingAttributes_default_instance_);
}
inline ::flyteidl::admin::MatchingAttributes* LaunchPlanAttributes::release_matching_attributes() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanAttributes.matching_attributes)
  
  ::flyteidl::admin::MatchingAttributes* temp = matching_attributes_;
  matching_attributes_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::MatchingAttributes* LaunchPlanAttributes::mutable_matching_attributes() {
  
  if (matching_attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::MatchingAttributes>(GetArenaNoVirtual());
    matching_attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanAttributes.matching_attributes)
  return matching_attributes_;
}
inline void LaunchPlanAttributes::set_allocated_matching_attributes(::flyteidl::admin::MatchingAttributes* matching_attributes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(matching_attributes_);
  }
  if (matching_attributes) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      matching_attributes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, matching_attributes, submessage_arena);
    }
    
  } else {
    
  }
  matching_attributes_ = matching_attributes;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanAttributes.matching_attributes)
}

// -------------------------------------------------------------------

// LaunchPlanAttributesUpdateRequest

// .flyteidl.admin.LaunchPlanAttributes attributes = 1;
inline bool LaunchPlanAttributesUpdateRequest::has_attributes() const {
  return this != internal_default_instance() && attributes_ != nullptr;
}
inline void LaunchPlanAttributesUpdateRequest::clear_attributes() {
  if (GetArenaNoVirtual() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
inline const ::flyteidl::admin::LaunchPlanAttributes& LaunchPlanAttributesUpdateRequest::attributes() const {
  const ::flyteidl::admin::LaunchPlanAttributes* p = attributes_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanAttributesUpdateRequest.attributes)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::LaunchPlanAttributes*>(
      &::flyteidl::admin::_LaunchPlanAttributes_default_instance_);
}
inline ::flyteidl::admin::LaunchPlanAttributes* LaunchPlanAttributesUpdateRequest::release_attributes() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanAttributesUpdateRequest.attributes)
  
  ::flyteidl::admin::LaunchPlanAttributes* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::LaunchPlanAttributes* LaunchPlanAttributesUpdateRequest::mutable_attributes() {
  
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::LaunchPlanAttributes>(GetArenaNoVirtual());
    attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanAttributesUpdateRequest.attributes)
  return attributes_;
}
inline void LaunchPlanAttributesUpdateRequest::set_allocated_attributes(::flyteidl::admin::LaunchPlanAttributes* attributes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attributes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanAttributesUpdateRequest.attributes)
}

// -------------------------------------------------------------------

// LaunchPlanAttributesUpdateResponse

// -------------------------------------------------------------------

// LaunchPlanAttributesGetRequest

// string project = 1;
inline void LaunchPlanAttributesGetRequest::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaunchPlanAttributesGetRequest::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanAttributesGetRequest.project)
  return project_.GetNoArena();
}
inline void LaunchPlanAttributesGetRequest::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanAttributesGetRequest.project)
}
#if LANG_CXX11
inline void LaunchPlanAttributesGetRequest::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.LaunchPlanAttributesGetRequest.project)
}
#endif
inline void LaunchPlanAttributesGetRequest::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.LaunchPlanAttributesGetRequest.project)
}
inline void LaunchPlanAttributesGetRequest::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.LaunchPlanAttributesGetRequest.project)
}
inline ::std::string* LaunchPlanAttributesGetRequest::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanAttributesGetRequest.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaunchPlanAttributesGetRequest::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanAttributesGetRequest.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchPlanAttributesGetRequest::set_allocated_project(::std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanAttributesGetRequest.project)
}

// string domain = 2;
inline void LaunchPlanAttributesGetRequest::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaunchPlanAttributesGetRequest::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanAttributesGetRequest.domain)
  return domain_.GetNoArena();
}
inline void LaunchPlanAttributesGetRequest::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanAttributesGetRequest.domain)
}
#if LANG_CXX11
inline void LaunchPlanAttributesGetRequest::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.LaunchPlanAttributesGetRequest.domain)
}
#endif
inline void LaunchPlanAttributesGetRequest::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.LaunchPlanAttributesGetRequest.domain)
}
inline void LaunchPlanAttributesGetRequest::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.LaunchPlanAttributesGetRequest.domain)
}
inline ::std::string* LaunchPlanAttributesGetRequest::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanAttributesGetRequest.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaunchPlanAttributesGetRequest::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanAttributesGetRequest.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchPlanAttributesGetRequest::set_allocated_domain(::std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanAttributesGetRequest.domain)
}

// string workflow = 3;
inline void LaunchPlanAttributesGetRequest::clear_workflow() {
  workflow_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaunchPlanAttributesGetRequest::workflow() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanAttributesGetRequest.workflow)
  return workflow_.GetNoArena();
}
inline void LaunchPlanAttributesGetRequest::set_workflow(const ::std::string& value) {
  
  workflow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanAttributesGetRequest.workflow)
}
#if LANG_CXX11
inline void LaunchPlanAttributesGetRequest::set_workflow(::std::string&& value) {
  
  workflow_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.LaunchPlanAttributesGetRequest.workflow)
}
#endif
inline void LaunchPlanAttributesGetRequest::set_workflow(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.LaunchPlanAttributesGetRequest.workflow)
}
inline void LaunchPlanAttributesGetRequest::set_workflow(const char* value, size_t size) {
  
  workflow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.LaunchPlanAttributesGetRequest.workflow)
}
inline ::std::string* LaunchPlanAttributesGetRequest::mutable_workflow() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanAttributesGetRequest.workflow)
  return workflow_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaunchPlanAttributesGetRequest::release_workflow() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanAttributesGetRequest.workflow)
  
  return workflow_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchPlanAttributesGetRequest::set_allocated_workflow(::std::string* workflow) {
  if (workflow != nullptr) {
    
  } else {
    
  }
  workflow_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workflow);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanAttributesGetRequest.workflow)
}

// string launch_plan = 4;
inline void LaunchPlanAttributesGetRequest::clear_launch_plan() {
  launch_plan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaunchPlanAttributesGetRequest::launch_plan() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanAttributesGetRequest.launch_plan)
  return launch_plan_.GetNoArena();
}
inline void LaunchPlanAttributesGetRequest::set_launch_plan(const ::std::string& value) {
  
  launch_plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanAttributesGetRequest.launch_plan)
}
#if LANG_CXX11
inline void LaunchPlanAttributesGetRequest::set_launch_plan(::std::string&& value) {
  
  launch_plan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.LaunchPlanAttributesGetRequest.launch_plan)
}
#endif
inline void LaunchPlanAttributesGetRequest::set_launch_plan(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  launch_plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.LaunchPlanAttributesGetRequest.launch_plan)
}
inline void LaunchPlanAttributesGetRequest::set_launch_plan(const char* value, size_t size) {
  
  launch_plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.LaunchPlanAttributesGetRequest.launch_plan)
}
inline ::std::string* LaunchPlanAttributesGetRequest::mutable_launch_plan() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanAttributesGetRequest.launch_plan)
  return launch_plan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaunchPlanAttributesGetRequest::release_launch_plan() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanAttributesGetRequest.launch_plan)
  
  return launch_plan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchPlanAttributesGetRequest::set_allocated_launch_plan(::std::string* launch_plan) {
  if (launch_plan != nullptr) {
    
  } else {
    
  }
  launch_plan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), launch_plan);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanAttributesGetRequest.launch_plan)
}

// .flyteidl.admin.MatchableResource resource_type = 5;
inline void LaunchPlanAttributesGetRequest::clear_resource_type() {
  resource_type_ = 0;
}
inline ::flyteidl::admin::MatchableResource LaunchPlanAttributesGetRequest::resource_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanAttributesGetRequest.resource_type)
  return static_cast< ::flyteidl::admin::MatchableResource >(resource_type_);
}
inline void LaunchPlanAttributesGetRequest::set_resource_type(::flyteidl::admin::MatchableResource value) {
  
  resource_type_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanAttributesGetRequest.resource_type)
}

// -------------------------------------------------------------------

// LaunchPlanAttributesGetResponse

// .flyteidl.admin.LaunchPlanAttributes attributes = 1;
inline bool LaunchPlanAttributesGetResponse::has_attributes() const {
  return this != internal_default_instance() && attributes_ != nullptr;
}
inline void LaunchPlanAttributesGetResponse::clear_attributes() {
  if (GetArenaNoVirtual() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
inline const ::flyteidl::admin::LaunchPlanAttributes& LaunchPlanAttributesGetResponse::attributes() const {
  const ::flyteidl::admin::LaunchPlanAttributes* p = attributes_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanAttributesGetResponse.attributes)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::LaunchPlanAttributes*>(
      &::flyteidl::admin::_LaunchPlanAttributes_default_instance_);
}
inline ::flyteidl::admin::LaunchPlanAttributes* LaunchPlanAttributesGetResponse::release_attributes() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanAttributesGetResponse.attributes)
  
  ::flyteidl::admin::LaunchPlanAttributes* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::LaunchPlanAttributes* LaunchPlanAttributesGetResponse::mutable_attributes() {
  
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::LaunchPlanAttributes>(GetArenaNoVirtual());
    attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanAttributesGetResponse.attributes)
  return attributes_;
}
inline void LaunchPlanAttributesGetResponse::set_allocated_attributes(::flyteidl::admin::LaunchPlanAttributes* attributes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attributes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanAttributesGetResponse.attributes)
}

// -------------------------------------------------------------------

// LaunchPlanAttributesDeleteRequest

// string project = 1;
inline void LaunchPlanAttributesDeleteRequest::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaunchPlanAttributesDeleteRequest::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanAttributesDeleteRequest.project)
  return project_.GetNoArena();
}
inline void LaunchPlanAttributesDeleteRequest::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanAttributesDeleteRequest.project)
}
#if LANG_CXX11
inline void LaunchPlanAttributesDeleteRequest::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.LaunchPlanAttributesDeleteRequest.project)
}
#endif
inline void LaunchPlanAttributesDeleteRequest::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.LaunchPlanAttributesDeleteRequest.project)
}
inline void LaunchPlanAttributesDeleteRequest::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.LaunchPlanAttributesDeleteRequest.project)
}
inline ::std::string* LaunchPlanAttributesDeleteRequest::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanAttributesDeleteRequest.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaunchPlanAttributesDeleteRequest::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanAttributesDeleteRequest.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchPlanAttributesDeleteRequest::set_allocated_project(::std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanAttributesDeleteRequest.project)
}

// string domain = 2;
inline void LaunchPlanAttributesDeleteRequest::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaunchPlanAttributesDeleteRequest::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanAttributesDeleteRequest.domain)
  return domain_.GetNoArena();
}
inline void LaunchPlanAttributesDeleteRequest::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanAttributesDeleteRequest.domain)
}
#if LANG_CXX11
inline void LaunchPlanAttributesDeleteRequest::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.LaunchPlanAttributesDeleteRequest.domain)
}
#endif
inline void LaunchPlanAttributesDeleteRequest::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.LaunchPlanAttributesDeleteRequest.domain)
}
inline void LaunchPlanAttributesDeleteRequest::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.LaunchPlanAttributesDeleteRequest.domain)
}
inline ::std::string* LaunchPlanAttributesDeleteRequest::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanAttributesDeleteRequest.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaunchPlanAttributesDeleteRequest::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanAttributesDeleteRequest.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchPlanAttributesDeleteRequest::set_allocated_domain(::std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanAttributesDeleteRequest.domain)
}

// string workflow = 3;
inline void LaunchPlanAttributesDeleteRequest::clear_workflow() {
  workflow_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaunchPlanAttributesDeleteRequest::workflow() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanAttributesDeleteRequest.workflow)
  return workflow_.GetNoArena();
}
inline void LaunchPlanAttributesDeleteRequest::set_workflow(const ::std::string& value) {
  
  workflow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanAttributesDeleteRequest.workflow)
}
#if LANG_CXX11
inline void LaunchPlanAttributesDeleteRequest::set_workflow(::std::string&& value) {
  
  workflow_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.LaunchPlanAttributesDeleteRequest.workflow)
}
#endif
inline void LaunchPlanAttributesDeleteRequest::set_workflow(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.LaunchPlanAttributesDeleteRequest.workflow)
}
inline void LaunchPlanAttributesDeleteRequest::set_workflow(const char* value, size_t size) {
  
  workflow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.LaunchPlanAttributesDeleteRequest.workflow)
}
inline ::std::string* LaunchPlanAttributesDeleteRequest::mutable_workflow() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanAttributesDeleteRequest.workflow)
  return workflow_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaunchPlanAttributesDeleteRequest::release_workflow() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanAttributesDeleteRequest.workflow)
  
  return workflow_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchPlanAttributesDeleteRequest::set_allocated_workflow(::std::string* workflow) {
  if (workflow != nullptr) {
    
  } else {
    
  }
  workflow_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workflow);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanAttributesDeleteRequest.workflow)
}

// string launch_plan = 4;
inline void LaunchPlanAttributesDeleteRequest::clear_launch_plan() {
  launch_plan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaunchPlanAttributesDeleteRequest::launch_plan() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanAttributesDeleteRequest.launch_plan)
  return launch_plan_.GetNoArena();
}
inline void LaunchPlanAttributesDeleteRequest::set_launch_plan(const ::std::string& value) {
  
  launch_plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanAttributesDeleteRequest.launch_plan)
}
#if LANG_CXX11
inline void LaunchPlanAttributesDeleteRequest::set_launch_plan(::std::string&& value) {
  
  launch_plan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.LaunchPlanAttributesDeleteRequest.launch_plan)
}
#endif
inline void LaunchPlanAttributesDeleteRequest::set_launch_plan(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  launch_plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.LaunchPlanAttributesDeleteRequest.launch_plan)
}
inline void LaunchPlanAttributesDeleteRequest::set_launch_plan(const char* value, size_t size) {
  
  launch_plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.LaunchPlanAttributesDeleteRequest.launch_plan)
}
inline ::std::string* LaunchPlanAttributesDeleteRequest::mutable_launch_plan() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanAttributesDeleteRequest.launch_plan)
  return launch_plan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaunchPlanAttributesDeleteRequest::release_launch_plan() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanAttributesDeleteRequest.launch_plan)
  
  return launch_plan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchPlanAttributesDeleteRequest::set_allocated_launch_plan(::std::string* launch_plan) {
  if (launch_plan != nullptr) {
    
  } else {
    
  }
  launch_plan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), launch_plan);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanAttributesDeleteRequest.launch_plan)
}

// .flyteidl.admin.MatchableResource resource_type = 5;
inline void LaunchPlanAttributesDeleteRequest::clear_resource_type() {
  resource_type_ = 0;
}
inline ::flyteidl::admin::MatchableResource LaunchPlanAttributesDeleteRequest::resource_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanAttributesDeleteRequest.resource_type)
  return static_cast< ::flyteidl::admin::MatchableResource >(resource_type_);
}
inline void LaunchPlanAttributesDeleteRequest::set_resource_type(::flyteidl::admin::MatchableResource value) {
  
  resource_type_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanAttributesDeleteRequest.resource_type)
}

// -------------------------------------------------------------------

// LaunchPlanAttributesDeleteResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fadmin_2flaunch_5fplan_5fattributes_2eproto
