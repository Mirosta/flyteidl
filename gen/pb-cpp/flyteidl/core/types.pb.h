// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/types.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fcore_2ftypes_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fcore_2ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftypes_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fcore_2ftypes_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fcore_2ftypes_2eproto();
namespace flyteidl {
namespace core {
class BlobType;
class BlobTypeDefaultTypeInternal;
extern BlobTypeDefaultTypeInternal _BlobType_default_instance_;
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class Identity;
class IdentityDefaultTypeInternal;
extern IdentityDefaultTypeInternal _Identity_default_instance_;
class LiteralType;
class LiteralTypeDefaultTypeInternal;
extern LiteralTypeDefaultTypeInternal _LiteralType_default_instance_;
class OAuth2Client;
class OAuth2ClientDefaultTypeInternal;
extern OAuth2ClientDefaultTypeInternal _OAuth2Client_default_instance_;
class OAuth2TokenRequest;
class OAuth2TokenRequestDefaultTypeInternal;
extern OAuth2TokenRequestDefaultTypeInternal _OAuth2TokenRequest_default_instance_;
class OutputReference;
class OutputReferenceDefaultTypeInternal;
extern OutputReferenceDefaultTypeInternal _OutputReference_default_instance_;
class SchemaType;
class SchemaTypeDefaultTypeInternal;
extern SchemaTypeDefaultTypeInternal _SchemaType_default_instance_;
class SchemaType_SchemaColumn;
class SchemaType_SchemaColumnDefaultTypeInternal;
extern SchemaType_SchemaColumnDefaultTypeInternal _SchemaType_SchemaColumn_default_instance_;
class Secret;
class SecretDefaultTypeInternal;
extern SecretDefaultTypeInternal _Secret_default_instance_;
class SecurityContext;
class SecurityContextDefaultTypeInternal;
extern SecurityContextDefaultTypeInternal _SecurityContext_default_instance_;
}  // namespace core
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::core::BlobType* Arena::CreateMaybeMessage<::flyteidl::core::BlobType>(Arena*);
template<> ::flyteidl::core::Error* Arena::CreateMaybeMessage<::flyteidl::core::Error>(Arena*);
template<> ::flyteidl::core::Identity* Arena::CreateMaybeMessage<::flyteidl::core::Identity>(Arena*);
template<> ::flyteidl::core::LiteralType* Arena::CreateMaybeMessage<::flyteidl::core::LiteralType>(Arena*);
template<> ::flyteidl::core::OAuth2Client* Arena::CreateMaybeMessage<::flyteidl::core::OAuth2Client>(Arena*);
template<> ::flyteidl::core::OAuth2TokenRequest* Arena::CreateMaybeMessage<::flyteidl::core::OAuth2TokenRequest>(Arena*);
template<> ::flyteidl::core::OutputReference* Arena::CreateMaybeMessage<::flyteidl::core::OutputReference>(Arena*);
template<> ::flyteidl::core::SchemaType* Arena::CreateMaybeMessage<::flyteidl::core::SchemaType>(Arena*);
template<> ::flyteidl::core::SchemaType_SchemaColumn* Arena::CreateMaybeMessage<::flyteidl::core::SchemaType_SchemaColumn>(Arena*);
template<> ::flyteidl::core::Secret* Arena::CreateMaybeMessage<::flyteidl::core::Secret>(Arena*);
template<> ::flyteidl::core::SecurityContext* Arena::CreateMaybeMessage<::flyteidl::core::SecurityContext>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace core {

enum SchemaType_SchemaColumn_SchemaColumnType {
  SchemaType_SchemaColumn_SchemaColumnType_INTEGER = 0,
  SchemaType_SchemaColumn_SchemaColumnType_FLOAT = 1,
  SchemaType_SchemaColumn_SchemaColumnType_STRING = 2,
  SchemaType_SchemaColumn_SchemaColumnType_BOOLEAN = 3,
  SchemaType_SchemaColumn_SchemaColumnType_DATETIME = 4,
  SchemaType_SchemaColumn_SchemaColumnType_DURATION = 5,
  SchemaType_SchemaColumn_SchemaColumnType_SchemaType_SchemaColumn_SchemaColumnType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  SchemaType_SchemaColumn_SchemaColumnType_SchemaType_SchemaColumn_SchemaColumnType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool SchemaType_SchemaColumn_SchemaColumnType_IsValid(int value);
const SchemaType_SchemaColumn_SchemaColumnType SchemaType_SchemaColumn_SchemaColumnType_SchemaColumnType_MIN = SchemaType_SchemaColumn_SchemaColumnType_INTEGER;
const SchemaType_SchemaColumn_SchemaColumnType SchemaType_SchemaColumn_SchemaColumnType_SchemaColumnType_MAX = SchemaType_SchemaColumn_SchemaColumnType_DURATION;
const int SchemaType_SchemaColumn_SchemaColumnType_SchemaColumnType_ARRAYSIZE = SchemaType_SchemaColumn_SchemaColumnType_SchemaColumnType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SchemaType_SchemaColumn_SchemaColumnType_descriptor();
inline const ::std::string& SchemaType_SchemaColumn_SchemaColumnType_Name(SchemaType_SchemaColumn_SchemaColumnType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SchemaType_SchemaColumn_SchemaColumnType_descriptor(), value);
}
inline bool SchemaType_SchemaColumn_SchemaColumnType_Parse(
    const ::std::string& name, SchemaType_SchemaColumn_SchemaColumnType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SchemaType_SchemaColumn_SchemaColumnType>(
    SchemaType_SchemaColumn_SchemaColumnType_descriptor(), name, value);
}
enum BlobType_BlobDimensionality {
  BlobType_BlobDimensionality_SINGLE = 0,
  BlobType_BlobDimensionality_MULTIPART = 1,
  BlobType_BlobDimensionality_BlobType_BlobDimensionality_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  BlobType_BlobDimensionality_BlobType_BlobDimensionality_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool BlobType_BlobDimensionality_IsValid(int value);
const BlobType_BlobDimensionality BlobType_BlobDimensionality_BlobDimensionality_MIN = BlobType_BlobDimensionality_SINGLE;
const BlobType_BlobDimensionality BlobType_BlobDimensionality_BlobDimensionality_MAX = BlobType_BlobDimensionality_MULTIPART;
const int BlobType_BlobDimensionality_BlobDimensionality_ARRAYSIZE = BlobType_BlobDimensionality_BlobDimensionality_MAX + 1;

const ::google::protobuf::EnumDescriptor* BlobType_BlobDimensionality_descriptor();
inline const ::std::string& BlobType_BlobDimensionality_Name(BlobType_BlobDimensionality value) {
  return ::google::protobuf::internal::NameOfEnum(
    BlobType_BlobDimensionality_descriptor(), value);
}
inline bool BlobType_BlobDimensionality_Parse(
    const ::std::string& name, BlobType_BlobDimensionality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BlobType_BlobDimensionality>(
    BlobType_BlobDimensionality_descriptor(), name, value);
}
enum Secret_Type {
  Secret_Type_Symmetric = 0,
  Secret_Type_Asymmetric = 1,
  Secret_Type_Secret_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Secret_Type_Secret_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Secret_Type_IsValid(int value);
const Secret_Type Secret_Type_Type_MIN = Secret_Type_Symmetric;
const Secret_Type Secret_Type_Type_MAX = Secret_Type_Asymmetric;
const int Secret_Type_Type_ARRAYSIZE = Secret_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Secret_Type_descriptor();
inline const ::std::string& Secret_Type_Name(Secret_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Secret_Type_descriptor(), value);
}
inline bool Secret_Type_Parse(
    const ::std::string& name, Secret_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Secret_Type>(
    Secret_Type_descriptor(), name, value);
}
enum OAuth2TokenRequest_Type {
  OAuth2TokenRequest_Type_CLIENT_CREDENTIALS = 0,
  OAuth2TokenRequest_Type_OAuth2TokenRequest_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  OAuth2TokenRequest_Type_OAuth2TokenRequest_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool OAuth2TokenRequest_Type_IsValid(int value);
const OAuth2TokenRequest_Type OAuth2TokenRequest_Type_Type_MIN = OAuth2TokenRequest_Type_CLIENT_CREDENTIALS;
const OAuth2TokenRequest_Type OAuth2TokenRequest_Type_Type_MAX = OAuth2TokenRequest_Type_CLIENT_CREDENTIALS;
const int OAuth2TokenRequest_Type_Type_ARRAYSIZE = OAuth2TokenRequest_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* OAuth2TokenRequest_Type_descriptor();
inline const ::std::string& OAuth2TokenRequest_Type_Name(OAuth2TokenRequest_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    OAuth2TokenRequest_Type_descriptor(), value);
}
inline bool OAuth2TokenRequest_Type_Parse(
    const ::std::string& name, OAuth2TokenRequest_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OAuth2TokenRequest_Type>(
    OAuth2TokenRequest_Type_descriptor(), name, value);
}
enum SimpleType {
  NONE = 0,
  INTEGER = 1,
  FLOAT = 2,
  STRING = 3,
  BOOLEAN = 4,
  DATETIME = 5,
  DURATION = 6,
  BINARY = 7,
  ERROR = 8,
  STRUCT = 9,
  SimpleType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  SimpleType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool SimpleType_IsValid(int value);
const SimpleType SimpleType_MIN = NONE;
const SimpleType SimpleType_MAX = STRUCT;
const int SimpleType_ARRAYSIZE = SimpleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SimpleType_descriptor();
inline const ::std::string& SimpleType_Name(SimpleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SimpleType_descriptor(), value);
}
inline bool SimpleType_Parse(
    const ::std::string& name, SimpleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SimpleType>(
    SimpleType_descriptor(), name, value);
}
// ===================================================================

class SchemaType_SchemaColumn final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.SchemaType.SchemaColumn) */ {
 public:
  SchemaType_SchemaColumn();
  virtual ~SchemaType_SchemaColumn();

  SchemaType_SchemaColumn(const SchemaType_SchemaColumn& from);

  inline SchemaType_SchemaColumn& operator=(const SchemaType_SchemaColumn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SchemaType_SchemaColumn(SchemaType_SchemaColumn&& from) noexcept
    : SchemaType_SchemaColumn() {
    *this = ::std::move(from);
  }

  inline SchemaType_SchemaColumn& operator=(SchemaType_SchemaColumn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SchemaType_SchemaColumn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SchemaType_SchemaColumn* internal_default_instance() {
    return reinterpret_cast<const SchemaType_SchemaColumn*>(
               &_SchemaType_SchemaColumn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SchemaType_SchemaColumn* other);
  friend void swap(SchemaType_SchemaColumn& a, SchemaType_SchemaColumn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SchemaType_SchemaColumn* New() const final {
    return CreateMaybeMessage<SchemaType_SchemaColumn>(nullptr);
  }

  SchemaType_SchemaColumn* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SchemaType_SchemaColumn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SchemaType_SchemaColumn& from);
  void MergeFrom(const SchemaType_SchemaColumn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaType_SchemaColumn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SchemaType_SchemaColumn_SchemaColumnType SchemaColumnType;
  static const SchemaColumnType INTEGER =
    SchemaType_SchemaColumn_SchemaColumnType_INTEGER;
  static const SchemaColumnType FLOAT =
    SchemaType_SchemaColumn_SchemaColumnType_FLOAT;
  static const SchemaColumnType STRING =
    SchemaType_SchemaColumn_SchemaColumnType_STRING;
  static const SchemaColumnType BOOLEAN =
    SchemaType_SchemaColumn_SchemaColumnType_BOOLEAN;
  static const SchemaColumnType DATETIME =
    SchemaType_SchemaColumn_SchemaColumnType_DATETIME;
  static const SchemaColumnType DURATION =
    SchemaType_SchemaColumn_SchemaColumnType_DURATION;
  static inline bool SchemaColumnType_IsValid(int value) {
    return SchemaType_SchemaColumn_SchemaColumnType_IsValid(value);
  }
  static const SchemaColumnType SchemaColumnType_MIN =
    SchemaType_SchemaColumn_SchemaColumnType_SchemaColumnType_MIN;
  static const SchemaColumnType SchemaColumnType_MAX =
    SchemaType_SchemaColumn_SchemaColumnType_SchemaColumnType_MAX;
  static const int SchemaColumnType_ARRAYSIZE =
    SchemaType_SchemaColumn_SchemaColumnType_SchemaColumnType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SchemaColumnType_descriptor() {
    return SchemaType_SchemaColumn_SchemaColumnType_descriptor();
  }
  static inline const ::std::string& SchemaColumnType_Name(SchemaColumnType value) {
    return SchemaType_SchemaColumn_SchemaColumnType_Name(value);
  }
  static inline bool SchemaColumnType_Parse(const ::std::string& name,
      SchemaColumnType* value) {
    return SchemaType_SchemaColumn_SchemaColumnType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .flyteidl.core.SchemaType.SchemaColumn.SchemaColumnType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::flyteidl::core::SchemaType_SchemaColumn_SchemaColumnType type() const;
  void set_type(::flyteidl::core::SchemaType_SchemaColumn_SchemaColumnType value);

  // @@protoc_insertion_point(class_scope:flyteidl.core.SchemaType.SchemaColumn)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class SchemaType final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.SchemaType) */ {
 public:
  SchemaType();
  virtual ~SchemaType();

  SchemaType(const SchemaType& from);

  inline SchemaType& operator=(const SchemaType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SchemaType(SchemaType&& from) noexcept
    : SchemaType() {
    *this = ::std::move(from);
  }

  inline SchemaType& operator=(SchemaType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SchemaType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SchemaType* internal_default_instance() {
    return reinterpret_cast<const SchemaType*>(
               &_SchemaType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SchemaType* other);
  friend void swap(SchemaType& a, SchemaType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SchemaType* New() const final {
    return CreateMaybeMessage<SchemaType>(nullptr);
  }

  SchemaType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SchemaType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SchemaType& from);
  void MergeFrom(const SchemaType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SchemaType_SchemaColumn SchemaColumn;

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.SchemaType.SchemaColumn columns = 3;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 3;
  ::flyteidl::core::SchemaType_SchemaColumn* mutable_columns(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::SchemaType_SchemaColumn >*
      mutable_columns();
  const ::flyteidl::core::SchemaType_SchemaColumn& columns(int index) const;
  ::flyteidl::core::SchemaType_SchemaColumn* add_columns();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::SchemaType_SchemaColumn >&
      columns() const;

  // @@protoc_insertion_point(class_scope:flyteidl.core.SchemaType)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::SchemaType_SchemaColumn > columns_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class BlobType final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.BlobType) */ {
 public:
  BlobType();
  virtual ~BlobType();

  BlobType(const BlobType& from);

  inline BlobType& operator=(const BlobType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlobType(BlobType&& from) noexcept
    : BlobType() {
    *this = ::std::move(from);
  }

  inline BlobType& operator=(BlobType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BlobType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlobType* internal_default_instance() {
    return reinterpret_cast<const BlobType*>(
               &_BlobType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BlobType* other);
  friend void swap(BlobType& a, BlobType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlobType* New() const final {
    return CreateMaybeMessage<BlobType>(nullptr);
  }

  BlobType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlobType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlobType& from);
  void MergeFrom(const BlobType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlobType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BlobType_BlobDimensionality BlobDimensionality;
  static const BlobDimensionality SINGLE =
    BlobType_BlobDimensionality_SINGLE;
  static const BlobDimensionality MULTIPART =
    BlobType_BlobDimensionality_MULTIPART;
  static inline bool BlobDimensionality_IsValid(int value) {
    return BlobType_BlobDimensionality_IsValid(value);
  }
  static const BlobDimensionality BlobDimensionality_MIN =
    BlobType_BlobDimensionality_BlobDimensionality_MIN;
  static const BlobDimensionality BlobDimensionality_MAX =
    BlobType_BlobDimensionality_BlobDimensionality_MAX;
  static const int BlobDimensionality_ARRAYSIZE =
    BlobType_BlobDimensionality_BlobDimensionality_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BlobDimensionality_descriptor() {
    return BlobType_BlobDimensionality_descriptor();
  }
  static inline const ::std::string& BlobDimensionality_Name(BlobDimensionality value) {
    return BlobType_BlobDimensionality_Name(value);
  }
  static inline bool BlobDimensionality_Parse(const ::std::string& name,
      BlobDimensionality* value) {
    return BlobType_BlobDimensionality_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string format = 1;
  void clear_format();
  static const int kFormatFieldNumber = 1;
  const ::std::string& format() const;
  void set_format(const ::std::string& value);
  #if LANG_CXX11
  void set_format(::std::string&& value);
  #endif
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  ::std::string* mutable_format();
  ::std::string* release_format();
  void set_allocated_format(::std::string* format);

  // .flyteidl.core.BlobType.BlobDimensionality dimensionality = 2;
  void clear_dimensionality();
  static const int kDimensionalityFieldNumber = 2;
  ::flyteidl::core::BlobType_BlobDimensionality dimensionality() const;
  void set_dimensionality(::flyteidl::core::BlobType_BlobDimensionality value);

  // @@protoc_insertion_point(class_scope:flyteidl.core.BlobType)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr format_;
  int dimensionality_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class LiteralType final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.LiteralType) */ {
 public:
  LiteralType();
  virtual ~LiteralType();

  LiteralType(const LiteralType& from);

  inline LiteralType& operator=(const LiteralType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LiteralType(LiteralType&& from) noexcept
    : LiteralType() {
    *this = ::std::move(from);
  }

  inline LiteralType& operator=(LiteralType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LiteralType& default_instance();

  enum TypeCase {
    kSimple = 1,
    kSchema = 2,
    kCollectionType = 3,
    kMapValueType = 4,
    kBlob = 5,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiteralType* internal_default_instance() {
    return reinterpret_cast<const LiteralType*>(
               &_LiteralType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LiteralType* other);
  friend void swap(LiteralType& a, LiteralType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LiteralType* New() const final {
    return CreateMaybeMessage<LiteralType>(nullptr);
  }

  LiteralType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LiteralType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LiteralType& from);
  void MergeFrom(const LiteralType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiteralType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Struct metadata = 6;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 6;
  const ::google::protobuf::Struct& metadata() const;
  ::google::protobuf::Struct* release_metadata();
  ::google::protobuf::Struct* mutable_metadata();
  void set_allocated_metadata(::google::protobuf::Struct* metadata);

  // .flyteidl.core.SimpleType simple = 1;
  private:
  bool has_simple() const;
  public:
  void clear_simple();
  static const int kSimpleFieldNumber = 1;
  ::flyteidl::core::SimpleType simple() const;
  void set_simple(::flyteidl::core::SimpleType value);

  // .flyteidl.core.SchemaType schema = 2;
  bool has_schema() const;
  void clear_schema();
  static const int kSchemaFieldNumber = 2;
  const ::flyteidl::core::SchemaType& schema() const;
  ::flyteidl::core::SchemaType* release_schema();
  ::flyteidl::core::SchemaType* mutable_schema();
  void set_allocated_schema(::flyteidl::core::SchemaType* schema);

  // .flyteidl.core.LiteralType collection_type = 3;
  bool has_collection_type() const;
  void clear_collection_type();
  static const int kCollectionTypeFieldNumber = 3;
  const ::flyteidl::core::LiteralType& collection_type() const;
  ::flyteidl::core::LiteralType* release_collection_type();
  ::flyteidl::core::LiteralType* mutable_collection_type();
  void set_allocated_collection_type(::flyteidl::core::LiteralType* collection_type);

  // .flyteidl.core.LiteralType map_value_type = 4;
  bool has_map_value_type() const;
  void clear_map_value_type();
  static const int kMapValueTypeFieldNumber = 4;
  const ::flyteidl::core::LiteralType& map_value_type() const;
  ::flyteidl::core::LiteralType* release_map_value_type();
  ::flyteidl::core::LiteralType* mutable_map_value_type();
  void set_allocated_map_value_type(::flyteidl::core::LiteralType* map_value_type);

  // .flyteidl.core.BlobType blob = 5;
  bool has_blob() const;
  void clear_blob();
  static const int kBlobFieldNumber = 5;
  const ::flyteidl::core::BlobType& blob() const;
  ::flyteidl::core::BlobType* release_blob();
  ::flyteidl::core::BlobType* mutable_blob();
  void set_allocated_blob(::flyteidl::core::BlobType* blob);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.LiteralType)
 private:
  class HasBitSetters;
  void set_has_simple();
  void set_has_schema();
  void set_has_collection_type();
  void set_has_map_value_type();
  void set_has_blob();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Struct* metadata_;
  union TypeUnion {
    TypeUnion() {}
    int simple_;
    ::flyteidl::core::SchemaType* schema_;
    ::flyteidl::core::LiteralType* collection_type_;
    ::flyteidl::core::LiteralType* map_value_type_;
    ::flyteidl::core::BlobType* blob_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fcore_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class OutputReference final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.OutputReference) */ {
 public:
  OutputReference();
  virtual ~OutputReference();

  OutputReference(const OutputReference& from);

  inline OutputReference& operator=(const OutputReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OutputReference(OutputReference&& from) noexcept
    : OutputReference() {
    *this = ::std::move(from);
  }

  inline OutputReference& operator=(OutputReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OutputReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputReference* internal_default_instance() {
    return reinterpret_cast<const OutputReference*>(
               &_OutputReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(OutputReference* other);
  friend void swap(OutputReference& a, OutputReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OutputReference* New() const final {
    return CreateMaybeMessage<OutputReference>(nullptr);
  }

  OutputReference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OutputReference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OutputReference& from);
  void MergeFrom(const OutputReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const ::std::string& node_id() const;
  void set_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_node_id(::std::string&& value);
  #endif
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  ::std::string* mutable_node_id();
  ::std::string* release_node_id();
  void set_allocated_node_id(::std::string* node_id);

  // string var = 2;
  void clear_var();
  static const int kVarFieldNumber = 2;
  const ::std::string& var() const;
  void set_var(const ::std::string& value);
  #if LANG_CXX11
  void set_var(::std::string&& value);
  #endif
  void set_var(const char* value);
  void set_var(const char* value, size_t size);
  ::std::string* mutable_var();
  ::std::string* release_var();
  void set_allocated_var(::std::string* var);

  // @@protoc_insertion_point(class_scope:flyteidl.core.OutputReference)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_id_;
  ::google::protobuf::internal::ArenaStringPtr var_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Error final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Error* other);
  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const final {
    return CreateMaybeMessage<Error>(nullptr);
  }

  Error* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string failed_node_id = 1;
  void clear_failed_node_id();
  static const int kFailedNodeIdFieldNumber = 1;
  const ::std::string& failed_node_id() const;
  void set_failed_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_failed_node_id(::std::string&& value);
  #endif
  void set_failed_node_id(const char* value);
  void set_failed_node_id(const char* value, size_t size);
  ::std::string* mutable_failed_node_id();
  ::std::string* release_failed_node_id();
  void set_allocated_failed_node_id(::std::string* failed_node_id);

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:flyteidl.core.Error)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr failed_node_id_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Secret final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.Secret) */ {
 public:
  Secret();
  virtual ~Secret();

  Secret(const Secret& from);

  inline Secret& operator=(const Secret& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Secret(Secret&& from) noexcept
    : Secret() {
    *this = ::std::move(from);
  }

  inline Secret& operator=(Secret&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Secret& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Secret* internal_default_instance() {
    return reinterpret_cast<const Secret*>(
               &_Secret_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Secret* other);
  friend void swap(Secret& a, Secret& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Secret* New() const final {
    return CreateMaybeMessage<Secret>(nullptr);
  }

  Secret* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Secret>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Secret& from);
  void MergeFrom(const Secret& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Secret* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Secret_Type Type;
  static const Type Symmetric =
    Secret_Type_Symmetric;
  static const Type Asymmetric =
    Secret_Type_Asymmetric;
  static inline bool Type_IsValid(int value) {
    return Secret_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Secret_Type_Type_MIN;
  static const Type Type_MAX =
    Secret_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Secret_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Secret_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Secret_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Secret_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .flyteidl.core.Secret.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::flyteidl::core::Secret_Type type() const;
  void set_type(::flyteidl::core::Secret_Type value);

  // @@protoc_insertion_point(class_scope:flyteidl.core.Secret)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class OAuth2Client final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.OAuth2Client) */ {
 public:
  OAuth2Client();
  virtual ~OAuth2Client();

  OAuth2Client(const OAuth2Client& from);

  inline OAuth2Client& operator=(const OAuth2Client& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OAuth2Client(OAuth2Client&& from) noexcept
    : OAuth2Client() {
    *this = ::std::move(from);
  }

  inline OAuth2Client& operator=(OAuth2Client&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OAuth2Client& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OAuth2Client* internal_default_instance() {
    return reinterpret_cast<const OAuth2Client*>(
               &_OAuth2Client_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(OAuth2Client* other);
  friend void swap(OAuth2Client& a, OAuth2Client& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OAuth2Client* New() const final {
    return CreateMaybeMessage<OAuth2Client>(nullptr);
  }

  OAuth2Client* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OAuth2Client>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OAuth2Client& from);
  void MergeFrom(const OAuth2Client& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OAuth2Client* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string client_id = 1;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // .flyteidl.core.Secret client_secret = 2;
  bool has_client_secret() const;
  void clear_client_secret();
  static const int kClientSecretFieldNumber = 2;
  const ::flyteidl::core::Secret& client_secret() const;
  ::flyteidl::core::Secret* release_client_secret();
  ::flyteidl::core::Secret* mutable_client_secret();
  void set_allocated_client_secret(::flyteidl::core::Secret* client_secret);

  // @@protoc_insertion_point(class_scope:flyteidl.core.OAuth2Client)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::flyteidl::core::Secret* client_secret_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Identity final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.Identity) */ {
 public:
  Identity();
  virtual ~Identity();

  Identity(const Identity& from);

  inline Identity& operator=(const Identity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Identity(Identity&& from) noexcept
    : Identity() {
    *this = ::std::move(from);
  }

  inline Identity& operator=(Identity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Identity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identity* internal_default_instance() {
    return reinterpret_cast<const Identity*>(
               &_Identity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Identity* other);
  friend void swap(Identity& a, Identity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Identity* New() const final {
    return CreateMaybeMessage<Identity>(nullptr);
  }

  Identity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Identity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Identity& from);
  void MergeFrom(const Identity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string iam_role = 1;
  void clear_iam_role();
  static const int kIamRoleFieldNumber = 1;
  const ::std::string& iam_role() const;
  void set_iam_role(const ::std::string& value);
  #if LANG_CXX11
  void set_iam_role(::std::string&& value);
  #endif
  void set_iam_role(const char* value);
  void set_iam_role(const char* value, size_t size);
  ::std::string* mutable_iam_role();
  ::std::string* release_iam_role();
  void set_allocated_iam_role(::std::string* iam_role);

  // string k8s_service_account = 2;
  void clear_k8s_service_account();
  static const int kK8SServiceAccountFieldNumber = 2;
  const ::std::string& k8s_service_account() const;
  void set_k8s_service_account(const ::std::string& value);
  #if LANG_CXX11
  void set_k8s_service_account(::std::string&& value);
  #endif
  void set_k8s_service_account(const char* value);
  void set_k8s_service_account(const char* value, size_t size);
  ::std::string* mutable_k8s_service_account();
  ::std::string* release_k8s_service_account();
  void set_allocated_k8s_service_account(::std::string* k8s_service_account);

  // .flyteidl.core.OAuth2Client oauth2_client = 3;
  bool has_oauth2_client() const;
  void clear_oauth2_client();
  static const int kOauth2ClientFieldNumber = 3;
  const ::flyteidl::core::OAuth2Client& oauth2_client() const;
  ::flyteidl::core::OAuth2Client* release_oauth2_client();
  ::flyteidl::core::OAuth2Client* mutable_oauth2_client();
  void set_allocated_oauth2_client(::flyteidl::core::OAuth2Client* oauth2_client);

  // @@protoc_insertion_point(class_scope:flyteidl.core.Identity)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr iam_role_;
  ::google::protobuf::internal::ArenaStringPtr k8s_service_account_;
  ::flyteidl::core::OAuth2Client* oauth2_client_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class OAuth2TokenRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.OAuth2TokenRequest) */ {
 public:
  OAuth2TokenRequest();
  virtual ~OAuth2TokenRequest();

  OAuth2TokenRequest(const OAuth2TokenRequest& from);

  inline OAuth2TokenRequest& operator=(const OAuth2TokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OAuth2TokenRequest(OAuth2TokenRequest&& from) noexcept
    : OAuth2TokenRequest() {
    *this = ::std::move(from);
  }

  inline OAuth2TokenRequest& operator=(OAuth2TokenRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OAuth2TokenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OAuth2TokenRequest* internal_default_instance() {
    return reinterpret_cast<const OAuth2TokenRequest*>(
               &_OAuth2TokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(OAuth2TokenRequest* other);
  friend void swap(OAuth2TokenRequest& a, OAuth2TokenRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OAuth2TokenRequest* New() const final {
    return CreateMaybeMessage<OAuth2TokenRequest>(nullptr);
  }

  OAuth2TokenRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OAuth2TokenRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OAuth2TokenRequest& from);
  void MergeFrom(const OAuth2TokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OAuth2TokenRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OAuth2TokenRequest_Type Type;
  static const Type CLIENT_CREDENTIALS =
    OAuth2TokenRequest_Type_CLIENT_CREDENTIALS;
  static inline bool Type_IsValid(int value) {
    return OAuth2TokenRequest_Type_IsValid(value);
  }
  static const Type Type_MIN =
    OAuth2TokenRequest_Type_Type_MIN;
  static const Type Type_MAX =
    OAuth2TokenRequest_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    OAuth2TokenRequest_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return OAuth2TokenRequest_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return OAuth2TokenRequest_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return OAuth2TokenRequest_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string idp_discovery_endpoint = 4;
  void clear_idp_discovery_endpoint();
  static const int kIdpDiscoveryEndpointFieldNumber = 4;
  const ::std::string& idp_discovery_endpoint() const;
  void set_idp_discovery_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_idp_discovery_endpoint(::std::string&& value);
  #endif
  void set_idp_discovery_endpoint(const char* value);
  void set_idp_discovery_endpoint(const char* value, size_t size);
  ::std::string* mutable_idp_discovery_endpoint();
  ::std::string* release_idp_discovery_endpoint();
  void set_allocated_idp_discovery_endpoint(::std::string* idp_discovery_endpoint);

  // string token_endpoint = 5;
  void clear_token_endpoint();
  static const int kTokenEndpointFieldNumber = 5;
  const ::std::string& token_endpoint() const;
  void set_token_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_token_endpoint(::std::string&& value);
  #endif
  void set_token_endpoint(const char* value);
  void set_token_endpoint(const char* value, size_t size);
  ::std::string* mutable_token_endpoint();
  ::std::string* release_token_endpoint();
  void set_allocated_token_endpoint(::std::string* token_endpoint);

  // .flyteidl.core.OAuth2Client client = 3;
  bool has_client() const;
  void clear_client();
  static const int kClientFieldNumber = 3;
  const ::flyteidl::core::OAuth2Client& client() const;
  ::flyteidl::core::OAuth2Client* release_client();
  ::flyteidl::core::OAuth2Client* mutable_client();
  void set_allocated_client(::flyteidl::core::OAuth2Client* client);

  // .flyteidl.core.OAuth2TokenRequest.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::flyteidl::core::OAuth2TokenRequest_Type type() const;
  void set_type(::flyteidl::core::OAuth2TokenRequest_Type value);

  // @@protoc_insertion_point(class_scope:flyteidl.core.OAuth2TokenRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr idp_discovery_endpoint_;
  ::google::protobuf::internal::ArenaStringPtr token_endpoint_;
  ::flyteidl::core::OAuth2Client* client_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class SecurityContext final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.SecurityContext) */ {
 public:
  SecurityContext();
  virtual ~SecurityContext();

  SecurityContext(const SecurityContext& from);

  inline SecurityContext& operator=(const SecurityContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SecurityContext(SecurityContext&& from) noexcept
    : SecurityContext() {
    *this = ::std::move(from);
  }

  inline SecurityContext& operator=(SecurityContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SecurityContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityContext* internal_default_instance() {
    return reinterpret_cast<const SecurityContext*>(
               &_SecurityContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(SecurityContext* other);
  friend void swap(SecurityContext& a, SecurityContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SecurityContext* New() const final {
    return CreateMaybeMessage<SecurityContext>(nullptr);
  }

  SecurityContext* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SecurityContext>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SecurityContext& from);
  void MergeFrom(const SecurityContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.Secret secrets = 2;
  int secrets_size() const;
  void clear_secrets();
  static const int kSecretsFieldNumber = 2;
  ::flyteidl::core::Secret* mutable_secrets(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Secret >*
      mutable_secrets();
  const ::flyteidl::core::Secret& secrets(int index) const;
  ::flyteidl::core::Secret* add_secrets();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Secret >&
      secrets() const;

  // repeated .flyteidl.core.OAuth2TokenRequest tokens = 3;
  int tokens_size() const;
  void clear_tokens();
  static const int kTokensFieldNumber = 3;
  ::flyteidl::core::OAuth2TokenRequest* mutable_tokens(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::OAuth2TokenRequest >*
      mutable_tokens();
  const ::flyteidl::core::OAuth2TokenRequest& tokens(int index) const;
  ::flyteidl::core::OAuth2TokenRequest* add_tokens();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::OAuth2TokenRequest >&
      tokens() const;

  // .flyteidl.core.Identity run_as = 1;
  bool has_run_as() const;
  void clear_run_as();
  static const int kRunAsFieldNumber = 1;
  const ::flyteidl::core::Identity& run_as() const;
  ::flyteidl::core::Identity* release_run_as();
  ::flyteidl::core::Identity* mutable_run_as();
  void set_allocated_run_as(::flyteidl::core::Identity* run_as);

  // @@protoc_insertion_point(class_scope:flyteidl.core.SecurityContext)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Secret > secrets_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::OAuth2TokenRequest > tokens_;
  ::flyteidl::core::Identity* run_as_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SchemaType_SchemaColumn

// string name = 1;
inline void SchemaType_SchemaColumn::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SchemaType_SchemaColumn::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.SchemaType.SchemaColumn.name)
  return name_.GetNoArena();
}
inline void SchemaType_SchemaColumn::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.SchemaType.SchemaColumn.name)
}
#if LANG_CXX11
inline void SchemaType_SchemaColumn::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.SchemaType.SchemaColumn.name)
}
#endif
inline void SchemaType_SchemaColumn::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.SchemaType.SchemaColumn.name)
}
inline void SchemaType_SchemaColumn::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.SchemaType.SchemaColumn.name)
}
inline ::std::string* SchemaType_SchemaColumn::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.SchemaType.SchemaColumn.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SchemaType_SchemaColumn::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.core.SchemaType.SchemaColumn.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SchemaType_SchemaColumn::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.SchemaType.SchemaColumn.name)
}

// .flyteidl.core.SchemaType.SchemaColumn.SchemaColumnType type = 2;
inline void SchemaType_SchemaColumn::clear_type() {
  type_ = 0;
}
inline ::flyteidl::core::SchemaType_SchemaColumn_SchemaColumnType SchemaType_SchemaColumn::type() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.SchemaType.SchemaColumn.type)
  return static_cast< ::flyteidl::core::SchemaType_SchemaColumn_SchemaColumnType >(type_);
}
inline void SchemaType_SchemaColumn::set_type(::flyteidl::core::SchemaType_SchemaColumn_SchemaColumnType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.core.SchemaType.SchemaColumn.type)
}

// -------------------------------------------------------------------

// SchemaType

// repeated .flyteidl.core.SchemaType.SchemaColumn columns = 3;
inline int SchemaType::columns_size() const {
  return columns_.size();
}
inline void SchemaType::clear_columns() {
  columns_.Clear();
}
inline ::flyteidl::core::SchemaType_SchemaColumn* SchemaType::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.SchemaType.columns)
  return columns_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::SchemaType_SchemaColumn >*
SchemaType::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.SchemaType.columns)
  return &columns_;
}
inline const ::flyteidl::core::SchemaType_SchemaColumn& SchemaType::columns(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.SchemaType.columns)
  return columns_.Get(index);
}
inline ::flyteidl::core::SchemaType_SchemaColumn* SchemaType::add_columns() {
  // @@protoc_insertion_point(field_add:flyteidl.core.SchemaType.columns)
  return columns_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::SchemaType_SchemaColumn >&
SchemaType::columns() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.SchemaType.columns)
  return columns_;
}

// -------------------------------------------------------------------

// BlobType

// string format = 1;
inline void BlobType::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlobType::format() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.BlobType.format)
  return format_.GetNoArena();
}
inline void BlobType::set_format(const ::std::string& value) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.BlobType.format)
}
#if LANG_CXX11
inline void BlobType::set_format(::std::string&& value) {
  
  format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.BlobType.format)
}
#endif
inline void BlobType::set_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.BlobType.format)
}
inline void BlobType::set_format(const char* value, size_t size) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.BlobType.format)
}
inline ::std::string* BlobType::mutable_format() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.BlobType.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlobType::release_format() {
  // @@protoc_insertion_point(field_release:flyteidl.core.BlobType.format)
  
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlobType::set_allocated_format(::std::string* format) {
  if (format != nullptr) {
    
  } else {
    
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.BlobType.format)
}

// .flyteidl.core.BlobType.BlobDimensionality dimensionality = 2;
inline void BlobType::clear_dimensionality() {
  dimensionality_ = 0;
}
inline ::flyteidl::core::BlobType_BlobDimensionality BlobType::dimensionality() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.BlobType.dimensionality)
  return static_cast< ::flyteidl::core::BlobType_BlobDimensionality >(dimensionality_);
}
inline void BlobType::set_dimensionality(::flyteidl::core::BlobType_BlobDimensionality value) {
  
  dimensionality_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.core.BlobType.dimensionality)
}

// -------------------------------------------------------------------

// LiteralType

// .flyteidl.core.SimpleType simple = 1;
inline bool LiteralType::has_simple() const {
  return type_case() == kSimple;
}
inline void LiteralType::set_has_simple() {
  _oneof_case_[0] = kSimple;
}
inline void LiteralType::clear_simple() {
  if (has_simple()) {
    type_.simple_ = 0;
    clear_has_type();
  }
}
inline ::flyteidl::core::SimpleType LiteralType::simple() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.LiteralType.simple)
  if (has_simple()) {
    return static_cast< ::flyteidl::core::SimpleType >(type_.simple_);
  }
  return static_cast< ::flyteidl::core::SimpleType >(0);
}
inline void LiteralType::set_simple(::flyteidl::core::SimpleType value) {
  if (!has_simple()) {
    clear_type();
    set_has_simple();
  }
  type_.simple_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.core.LiteralType.simple)
}

// .flyteidl.core.SchemaType schema = 2;
inline bool LiteralType::has_schema() const {
  return type_case() == kSchema;
}
inline void LiteralType::set_has_schema() {
  _oneof_case_[0] = kSchema;
}
inline void LiteralType::clear_schema() {
  if (has_schema()) {
    delete type_.schema_;
    clear_has_type();
  }
}
inline ::flyteidl::core::SchemaType* LiteralType::release_schema() {
  // @@protoc_insertion_point(field_release:flyteidl.core.LiteralType.schema)
  if (has_schema()) {
    clear_has_type();
      ::flyteidl::core::SchemaType* temp = type_.schema_;
    type_.schema_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::SchemaType& LiteralType::schema() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.LiteralType.schema)
  return has_schema()
      ? *type_.schema_
      : *reinterpret_cast< ::flyteidl::core::SchemaType*>(&::flyteidl::core::_SchemaType_default_instance_);
}
inline ::flyteidl::core::SchemaType* LiteralType::mutable_schema() {
  if (!has_schema()) {
    clear_type();
    set_has_schema();
    type_.schema_ = CreateMaybeMessage< ::flyteidl::core::SchemaType >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.LiteralType.schema)
  return type_.schema_;
}

// .flyteidl.core.LiteralType collection_type = 3;
inline bool LiteralType::has_collection_type() const {
  return type_case() == kCollectionType;
}
inline void LiteralType::set_has_collection_type() {
  _oneof_case_[0] = kCollectionType;
}
inline void LiteralType::clear_collection_type() {
  if (has_collection_type()) {
    delete type_.collection_type_;
    clear_has_type();
  }
}
inline ::flyteidl::core::LiteralType* LiteralType::release_collection_type() {
  // @@protoc_insertion_point(field_release:flyteidl.core.LiteralType.collection_type)
  if (has_collection_type()) {
    clear_has_type();
      ::flyteidl::core::LiteralType* temp = type_.collection_type_;
    type_.collection_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::LiteralType& LiteralType::collection_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.LiteralType.collection_type)
  return has_collection_type()
      ? *type_.collection_type_
      : *reinterpret_cast< ::flyteidl::core::LiteralType*>(&::flyteidl::core::_LiteralType_default_instance_);
}
inline ::flyteidl::core::LiteralType* LiteralType::mutable_collection_type() {
  if (!has_collection_type()) {
    clear_type();
    set_has_collection_type();
    type_.collection_type_ = CreateMaybeMessage< ::flyteidl::core::LiteralType >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.LiteralType.collection_type)
  return type_.collection_type_;
}

// .flyteidl.core.LiteralType map_value_type = 4;
inline bool LiteralType::has_map_value_type() const {
  return type_case() == kMapValueType;
}
inline void LiteralType::set_has_map_value_type() {
  _oneof_case_[0] = kMapValueType;
}
inline void LiteralType::clear_map_value_type() {
  if (has_map_value_type()) {
    delete type_.map_value_type_;
    clear_has_type();
  }
}
inline ::flyteidl::core::LiteralType* LiteralType::release_map_value_type() {
  // @@protoc_insertion_point(field_release:flyteidl.core.LiteralType.map_value_type)
  if (has_map_value_type()) {
    clear_has_type();
      ::flyteidl::core::LiteralType* temp = type_.map_value_type_;
    type_.map_value_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::LiteralType& LiteralType::map_value_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.LiteralType.map_value_type)
  return has_map_value_type()
      ? *type_.map_value_type_
      : *reinterpret_cast< ::flyteidl::core::LiteralType*>(&::flyteidl::core::_LiteralType_default_instance_);
}
inline ::flyteidl::core::LiteralType* LiteralType::mutable_map_value_type() {
  if (!has_map_value_type()) {
    clear_type();
    set_has_map_value_type();
    type_.map_value_type_ = CreateMaybeMessage< ::flyteidl::core::LiteralType >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.LiteralType.map_value_type)
  return type_.map_value_type_;
}

// .flyteidl.core.BlobType blob = 5;
inline bool LiteralType::has_blob() const {
  return type_case() == kBlob;
}
inline void LiteralType::set_has_blob() {
  _oneof_case_[0] = kBlob;
}
inline void LiteralType::clear_blob() {
  if (has_blob()) {
    delete type_.blob_;
    clear_has_type();
  }
}
inline ::flyteidl::core::BlobType* LiteralType::release_blob() {
  // @@protoc_insertion_point(field_release:flyteidl.core.LiteralType.blob)
  if (has_blob()) {
    clear_has_type();
      ::flyteidl::core::BlobType* temp = type_.blob_;
    type_.blob_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::BlobType& LiteralType::blob() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.LiteralType.blob)
  return has_blob()
      ? *type_.blob_
      : *reinterpret_cast< ::flyteidl::core::BlobType*>(&::flyteidl::core::_BlobType_default_instance_);
}
inline ::flyteidl::core::BlobType* LiteralType::mutable_blob() {
  if (!has_blob()) {
    clear_type();
    set_has_blob();
    type_.blob_ = CreateMaybeMessage< ::flyteidl::core::BlobType >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.LiteralType.blob)
  return type_.blob_;
}

// .google.protobuf.Struct metadata = 6;
inline bool LiteralType::has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline const ::google::protobuf::Struct& LiteralType::metadata() const {
  const ::google::protobuf::Struct* p = metadata_;
  // @@protoc_insertion_point(field_get:flyteidl.core.LiteralType.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* LiteralType::release_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.core.LiteralType.metadata)
  
  ::google::protobuf::Struct* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::google::protobuf::Struct* LiteralType::mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.LiteralType.metadata)
  return metadata_;
}
inline void LiteralType::set_allocated_metadata(::google::protobuf::Struct* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.LiteralType.metadata)
}

inline bool LiteralType::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void LiteralType::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline LiteralType::TypeCase LiteralType::type_case() const {
  return LiteralType::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OutputReference

// string node_id = 1;
inline void OutputReference::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OutputReference::node_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.OutputReference.node_id)
  return node_id_.GetNoArena();
}
inline void OutputReference::set_node_id(const ::std::string& value) {
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.OutputReference.node_id)
}
#if LANG_CXX11
inline void OutputReference::set_node_id(::std::string&& value) {
  
  node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.OutputReference.node_id)
}
#endif
inline void OutputReference::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.OutputReference.node_id)
}
inline void OutputReference::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.OutputReference.node_id)
}
inline ::std::string* OutputReference::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.OutputReference.node_id)
  return node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutputReference::release_node_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.OutputReference.node_id)
  
  return node_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutputReference::set_allocated_node_id(::std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.OutputReference.node_id)
}

// string var = 2;
inline void OutputReference::clear_var() {
  var_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OutputReference::var() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.OutputReference.var)
  return var_.GetNoArena();
}
inline void OutputReference::set_var(const ::std::string& value) {
  
  var_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.OutputReference.var)
}
#if LANG_CXX11
inline void OutputReference::set_var(::std::string&& value) {
  
  var_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.OutputReference.var)
}
#endif
inline void OutputReference::set_var(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  var_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.OutputReference.var)
}
inline void OutputReference::set_var(const char* value, size_t size) {
  
  var_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.OutputReference.var)
}
inline ::std::string* OutputReference::mutable_var() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.OutputReference.var)
  return var_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutputReference::release_var() {
  // @@protoc_insertion_point(field_release:flyteidl.core.OutputReference.var)
  
  return var_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutputReference::set_allocated_var(::std::string* var) {
  if (var != nullptr) {
    
  } else {
    
  }
  var_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), var);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.OutputReference.var)
}

// -------------------------------------------------------------------

// Error

// string failed_node_id = 1;
inline void Error::clear_failed_node_id() {
  failed_node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Error::failed_node_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Error.failed_node_id)
  return failed_node_id_.GetNoArena();
}
inline void Error::set_failed_node_id(const ::std::string& value) {
  
  failed_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Error.failed_node_id)
}
#if LANG_CXX11
inline void Error::set_failed_node_id(::std::string&& value) {
  
  failed_node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.Error.failed_node_id)
}
#endif
inline void Error::set_failed_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  failed_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Error.failed_node_id)
}
inline void Error::set_failed_node_id(const char* value, size_t size) {
  
  failed_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Error.failed_node_id)
}
inline ::std::string* Error::mutable_failed_node_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Error.failed_node_id)
  return failed_node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_failed_node_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Error.failed_node_id)
  
  return failed_node_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_failed_node_id(::std::string* failed_node_id) {
  if (failed_node_id != nullptr) {
    
  } else {
    
  }
  failed_node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), failed_node_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Error.failed_node_id)
}

// string message = 2;
inline void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Error.message)
  return message_.GetNoArena();
}
inline void Error::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Error.message)
}
#if LANG_CXX11
inline void Error::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.Error.message)
}
#endif
inline void Error::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Error.message)
}
inline void Error::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Error.message)
}
inline ::std::string* Error::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Error.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Error.message)
}

// -------------------------------------------------------------------

// Secret

// string name = 1;
inline void Secret::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Secret::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Secret.name)
  return name_.GetNoArena();
}
inline void Secret::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Secret.name)
}
#if LANG_CXX11
inline void Secret::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.Secret.name)
}
#endif
inline void Secret::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Secret.name)
}
inline void Secret::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Secret.name)
}
inline ::std::string* Secret::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Secret.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Secret::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Secret.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Secret::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Secret.name)
}

// .flyteidl.core.Secret.Type type = 2;
inline void Secret::clear_type() {
  type_ = 0;
}
inline ::flyteidl::core::Secret_Type Secret::type() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Secret.type)
  return static_cast< ::flyteidl::core::Secret_Type >(type_);
}
inline void Secret::set_type(::flyteidl::core::Secret_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.core.Secret.type)
}

// -------------------------------------------------------------------

// OAuth2Client

// string client_id = 1;
inline void OAuth2Client::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OAuth2Client::client_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.OAuth2Client.client_id)
  return client_id_.GetNoArena();
}
inline void OAuth2Client::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.OAuth2Client.client_id)
}
#if LANG_CXX11
inline void OAuth2Client::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.OAuth2Client.client_id)
}
#endif
inline void OAuth2Client::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.OAuth2Client.client_id)
}
inline void OAuth2Client::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.OAuth2Client.client_id)
}
inline ::std::string* OAuth2Client::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.OAuth2Client.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OAuth2Client::release_client_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.OAuth2Client.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OAuth2Client::set_allocated_client_id(::std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.OAuth2Client.client_id)
}

// .flyteidl.core.Secret client_secret = 2;
inline bool OAuth2Client::has_client_secret() const {
  return this != internal_default_instance() && client_secret_ != nullptr;
}
inline void OAuth2Client::clear_client_secret() {
  if (GetArenaNoVirtual() == nullptr && client_secret_ != nullptr) {
    delete client_secret_;
  }
  client_secret_ = nullptr;
}
inline const ::flyteidl::core::Secret& OAuth2Client::client_secret() const {
  const ::flyteidl::core::Secret* p = client_secret_;
  // @@protoc_insertion_point(field_get:flyteidl.core.OAuth2Client.client_secret)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Secret*>(
      &::flyteidl::core::_Secret_default_instance_);
}
inline ::flyteidl::core::Secret* OAuth2Client::release_client_secret() {
  // @@protoc_insertion_point(field_release:flyteidl.core.OAuth2Client.client_secret)
  
  ::flyteidl::core::Secret* temp = client_secret_;
  client_secret_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Secret* OAuth2Client::mutable_client_secret() {
  
  if (client_secret_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Secret>(GetArenaNoVirtual());
    client_secret_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.OAuth2Client.client_secret)
  return client_secret_;
}
inline void OAuth2Client::set_allocated_client_secret(::flyteidl::core::Secret* client_secret) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete client_secret_;
  }
  if (client_secret) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_secret = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_secret, submessage_arena);
    }
    
  } else {
    
  }
  client_secret_ = client_secret;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.OAuth2Client.client_secret)
}

// -------------------------------------------------------------------

// Identity

// string iam_role = 1;
inline void Identity::clear_iam_role() {
  iam_role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Identity::iam_role() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Identity.iam_role)
  return iam_role_.GetNoArena();
}
inline void Identity::set_iam_role(const ::std::string& value) {
  
  iam_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Identity.iam_role)
}
#if LANG_CXX11
inline void Identity::set_iam_role(::std::string&& value) {
  
  iam_role_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.Identity.iam_role)
}
#endif
inline void Identity::set_iam_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iam_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Identity.iam_role)
}
inline void Identity::set_iam_role(const char* value, size_t size) {
  
  iam_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Identity.iam_role)
}
inline ::std::string* Identity::mutable_iam_role() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Identity.iam_role)
  return iam_role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Identity::release_iam_role() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Identity.iam_role)
  
  return iam_role_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Identity::set_allocated_iam_role(::std::string* iam_role) {
  if (iam_role != nullptr) {
    
  } else {
    
  }
  iam_role_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iam_role);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Identity.iam_role)
}

// string k8s_service_account = 2;
inline void Identity::clear_k8s_service_account() {
  k8s_service_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Identity::k8s_service_account() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Identity.k8s_service_account)
  return k8s_service_account_.GetNoArena();
}
inline void Identity::set_k8s_service_account(const ::std::string& value) {
  
  k8s_service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Identity.k8s_service_account)
}
#if LANG_CXX11
inline void Identity::set_k8s_service_account(::std::string&& value) {
  
  k8s_service_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.Identity.k8s_service_account)
}
#endif
inline void Identity::set_k8s_service_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  k8s_service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Identity.k8s_service_account)
}
inline void Identity::set_k8s_service_account(const char* value, size_t size) {
  
  k8s_service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Identity.k8s_service_account)
}
inline ::std::string* Identity::mutable_k8s_service_account() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Identity.k8s_service_account)
  return k8s_service_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Identity::release_k8s_service_account() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Identity.k8s_service_account)
  
  return k8s_service_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Identity::set_allocated_k8s_service_account(::std::string* k8s_service_account) {
  if (k8s_service_account != nullptr) {
    
  } else {
    
  }
  k8s_service_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k8s_service_account);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Identity.k8s_service_account)
}

// .flyteidl.core.OAuth2Client oauth2_client = 3;
inline bool Identity::has_oauth2_client() const {
  return this != internal_default_instance() && oauth2_client_ != nullptr;
}
inline void Identity::clear_oauth2_client() {
  if (GetArenaNoVirtual() == nullptr && oauth2_client_ != nullptr) {
    delete oauth2_client_;
  }
  oauth2_client_ = nullptr;
}
inline const ::flyteidl::core::OAuth2Client& Identity::oauth2_client() const {
  const ::flyteidl::core::OAuth2Client* p = oauth2_client_;
  // @@protoc_insertion_point(field_get:flyteidl.core.Identity.oauth2_client)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::OAuth2Client*>(
      &::flyteidl::core::_OAuth2Client_default_instance_);
}
inline ::flyteidl::core::OAuth2Client* Identity::release_oauth2_client() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Identity.oauth2_client)
  
  ::flyteidl::core::OAuth2Client* temp = oauth2_client_;
  oauth2_client_ = nullptr;
  return temp;
}
inline ::flyteidl::core::OAuth2Client* Identity::mutable_oauth2_client() {
  
  if (oauth2_client_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::OAuth2Client>(GetArenaNoVirtual());
    oauth2_client_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Identity.oauth2_client)
  return oauth2_client_;
}
inline void Identity::set_allocated_oauth2_client(::flyteidl::core::OAuth2Client* oauth2_client) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete oauth2_client_;
  }
  if (oauth2_client) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      oauth2_client = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oauth2_client, submessage_arena);
    }
    
  } else {
    
  }
  oauth2_client_ = oauth2_client;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Identity.oauth2_client)
}

// -------------------------------------------------------------------

// OAuth2TokenRequest

// string name = 1;
inline void OAuth2TokenRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OAuth2TokenRequest::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.OAuth2TokenRequest.name)
  return name_.GetNoArena();
}
inline void OAuth2TokenRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.OAuth2TokenRequest.name)
}
#if LANG_CXX11
inline void OAuth2TokenRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.OAuth2TokenRequest.name)
}
#endif
inline void OAuth2TokenRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.OAuth2TokenRequest.name)
}
inline void OAuth2TokenRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.OAuth2TokenRequest.name)
}
inline ::std::string* OAuth2TokenRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.OAuth2TokenRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OAuth2TokenRequest::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.core.OAuth2TokenRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OAuth2TokenRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.OAuth2TokenRequest.name)
}

// .flyteidl.core.OAuth2TokenRequest.Type type = 2;
inline void OAuth2TokenRequest::clear_type() {
  type_ = 0;
}
inline ::flyteidl::core::OAuth2TokenRequest_Type OAuth2TokenRequest::type() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.OAuth2TokenRequest.type)
  return static_cast< ::flyteidl::core::OAuth2TokenRequest_Type >(type_);
}
inline void OAuth2TokenRequest::set_type(::flyteidl::core::OAuth2TokenRequest_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.core.OAuth2TokenRequest.type)
}

// .flyteidl.core.OAuth2Client client = 3;
inline bool OAuth2TokenRequest::has_client() const {
  return this != internal_default_instance() && client_ != nullptr;
}
inline void OAuth2TokenRequest::clear_client() {
  if (GetArenaNoVirtual() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
}
inline const ::flyteidl::core::OAuth2Client& OAuth2TokenRequest::client() const {
  const ::flyteidl::core::OAuth2Client* p = client_;
  // @@protoc_insertion_point(field_get:flyteidl.core.OAuth2TokenRequest.client)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::OAuth2Client*>(
      &::flyteidl::core::_OAuth2Client_default_instance_);
}
inline ::flyteidl::core::OAuth2Client* OAuth2TokenRequest::release_client() {
  // @@protoc_insertion_point(field_release:flyteidl.core.OAuth2TokenRequest.client)
  
  ::flyteidl::core::OAuth2Client* temp = client_;
  client_ = nullptr;
  return temp;
}
inline ::flyteidl::core::OAuth2Client* OAuth2TokenRequest::mutable_client() {
  
  if (client_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::OAuth2Client>(GetArenaNoVirtual());
    client_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.OAuth2TokenRequest.client)
  return client_;
}
inline void OAuth2TokenRequest::set_allocated_client(::flyteidl::core::OAuth2Client* client) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete client_;
  }
  if (client) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.OAuth2TokenRequest.client)
}

// string idp_discovery_endpoint = 4;
inline void OAuth2TokenRequest::clear_idp_discovery_endpoint() {
  idp_discovery_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OAuth2TokenRequest::idp_discovery_endpoint() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.OAuth2TokenRequest.idp_discovery_endpoint)
  return idp_discovery_endpoint_.GetNoArena();
}
inline void OAuth2TokenRequest::set_idp_discovery_endpoint(const ::std::string& value) {
  
  idp_discovery_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.OAuth2TokenRequest.idp_discovery_endpoint)
}
#if LANG_CXX11
inline void OAuth2TokenRequest::set_idp_discovery_endpoint(::std::string&& value) {
  
  idp_discovery_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.OAuth2TokenRequest.idp_discovery_endpoint)
}
#endif
inline void OAuth2TokenRequest::set_idp_discovery_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  idp_discovery_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.OAuth2TokenRequest.idp_discovery_endpoint)
}
inline void OAuth2TokenRequest::set_idp_discovery_endpoint(const char* value, size_t size) {
  
  idp_discovery_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.OAuth2TokenRequest.idp_discovery_endpoint)
}
inline ::std::string* OAuth2TokenRequest::mutable_idp_discovery_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.OAuth2TokenRequest.idp_discovery_endpoint)
  return idp_discovery_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OAuth2TokenRequest::release_idp_discovery_endpoint() {
  // @@protoc_insertion_point(field_release:flyteidl.core.OAuth2TokenRequest.idp_discovery_endpoint)
  
  return idp_discovery_endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OAuth2TokenRequest::set_allocated_idp_discovery_endpoint(::std::string* idp_discovery_endpoint) {
  if (idp_discovery_endpoint != nullptr) {
    
  } else {
    
  }
  idp_discovery_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), idp_discovery_endpoint);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.OAuth2TokenRequest.idp_discovery_endpoint)
}

// string token_endpoint = 5;
inline void OAuth2TokenRequest::clear_token_endpoint() {
  token_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OAuth2TokenRequest::token_endpoint() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.OAuth2TokenRequest.token_endpoint)
  return token_endpoint_.GetNoArena();
}
inline void OAuth2TokenRequest::set_token_endpoint(const ::std::string& value) {
  
  token_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.OAuth2TokenRequest.token_endpoint)
}
#if LANG_CXX11
inline void OAuth2TokenRequest::set_token_endpoint(::std::string&& value) {
  
  token_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.OAuth2TokenRequest.token_endpoint)
}
#endif
inline void OAuth2TokenRequest::set_token_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.OAuth2TokenRequest.token_endpoint)
}
inline void OAuth2TokenRequest::set_token_endpoint(const char* value, size_t size) {
  
  token_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.OAuth2TokenRequest.token_endpoint)
}
inline ::std::string* OAuth2TokenRequest::mutable_token_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.OAuth2TokenRequest.token_endpoint)
  return token_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OAuth2TokenRequest::release_token_endpoint() {
  // @@protoc_insertion_point(field_release:flyteidl.core.OAuth2TokenRequest.token_endpoint)
  
  return token_endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OAuth2TokenRequest::set_allocated_token_endpoint(::std::string* token_endpoint) {
  if (token_endpoint != nullptr) {
    
  } else {
    
  }
  token_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token_endpoint);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.OAuth2TokenRequest.token_endpoint)
}

// -------------------------------------------------------------------

// SecurityContext

// .flyteidl.core.Identity run_as = 1;
inline bool SecurityContext::has_run_as() const {
  return this != internal_default_instance() && run_as_ != nullptr;
}
inline void SecurityContext::clear_run_as() {
  if (GetArenaNoVirtual() == nullptr && run_as_ != nullptr) {
    delete run_as_;
  }
  run_as_ = nullptr;
}
inline const ::flyteidl::core::Identity& SecurityContext::run_as() const {
  const ::flyteidl::core::Identity* p = run_as_;
  // @@protoc_insertion_point(field_get:flyteidl.core.SecurityContext.run_as)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Identity*>(
      &::flyteidl::core::_Identity_default_instance_);
}
inline ::flyteidl::core::Identity* SecurityContext::release_run_as() {
  // @@protoc_insertion_point(field_release:flyteidl.core.SecurityContext.run_as)
  
  ::flyteidl::core::Identity* temp = run_as_;
  run_as_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identity* SecurityContext::mutable_run_as() {
  
  if (run_as_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identity>(GetArenaNoVirtual());
    run_as_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.SecurityContext.run_as)
  return run_as_;
}
inline void SecurityContext::set_allocated_run_as(::flyteidl::core::Identity* run_as) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete run_as_;
  }
  if (run_as) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      run_as = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, run_as, submessage_arena);
    }
    
  } else {
    
  }
  run_as_ = run_as;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.SecurityContext.run_as)
}

// repeated .flyteidl.core.Secret secrets = 2;
inline int SecurityContext::secrets_size() const {
  return secrets_.size();
}
inline void SecurityContext::clear_secrets() {
  secrets_.Clear();
}
inline ::flyteidl::core::Secret* SecurityContext::mutable_secrets(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.SecurityContext.secrets)
  return secrets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Secret >*
SecurityContext::mutable_secrets() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.SecurityContext.secrets)
  return &secrets_;
}
inline const ::flyteidl::core::Secret& SecurityContext::secrets(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.SecurityContext.secrets)
  return secrets_.Get(index);
}
inline ::flyteidl::core::Secret* SecurityContext::add_secrets() {
  // @@protoc_insertion_point(field_add:flyteidl.core.SecurityContext.secrets)
  return secrets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Secret >&
SecurityContext::secrets() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.SecurityContext.secrets)
  return secrets_;
}

// repeated .flyteidl.core.OAuth2TokenRequest tokens = 3;
inline int SecurityContext::tokens_size() const {
  return tokens_.size();
}
inline void SecurityContext::clear_tokens() {
  tokens_.Clear();
}
inline ::flyteidl::core::OAuth2TokenRequest* SecurityContext::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.SecurityContext.tokens)
  return tokens_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::OAuth2TokenRequest >*
SecurityContext::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.SecurityContext.tokens)
  return &tokens_;
}
inline const ::flyteidl::core::OAuth2TokenRequest& SecurityContext::tokens(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.SecurityContext.tokens)
  return tokens_.Get(index);
}
inline ::flyteidl::core::OAuth2TokenRequest* SecurityContext::add_tokens() {
  // @@protoc_insertion_point(field_add:flyteidl.core.SecurityContext.tokens)
  return tokens_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::OAuth2TokenRequest >&
SecurityContext::tokens() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.SecurityContext.tokens)
  return tokens_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace flyteidl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flyteidl::core::SchemaType_SchemaColumn_SchemaColumnType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::SchemaType_SchemaColumn_SchemaColumnType>() {
  return ::flyteidl::core::SchemaType_SchemaColumn_SchemaColumnType_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::core::BlobType_BlobDimensionality> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::BlobType_BlobDimensionality>() {
  return ::flyteidl::core::BlobType_BlobDimensionality_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::core::Secret_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::Secret_Type>() {
  return ::flyteidl::core::Secret_Type_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::core::OAuth2TokenRequest_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::OAuth2TokenRequest_Type>() {
  return ::flyteidl::core::OAuth2TokenRequest_Type_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::core::SimpleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::SimpleType>() {
  return ::flyteidl::core::SimpleType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fcore_2ftypes_2eproto
