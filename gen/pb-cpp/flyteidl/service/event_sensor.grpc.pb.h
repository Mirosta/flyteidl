// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flyteidl/service/event_sensor.proto
#ifndef GRPC_flyteidl_2fservice_2fevent_5fsensor_2eproto__INCLUDED
#define GRPC_flyteidl_2fservice_2fevent_5fsensor_2eproto__INCLUDED

#include "flyteidl/service/event_sensor.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class Channel;
class CompletionQueue;
class ServerCompletionQueue;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc_impl

namespace grpc {
class ServerContext;
}  // namespace grpc

namespace flyteidl {
namespace service {

class EventSensorService final {
 public:
  static constexpr char const* service_full_name() {
    return "flyteidl.service.EventSensorService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ListEventTargets(::grpc::ClientContext* context, const ::flyteidl::event::EventTargetListRequest& request, ::flyteidl::event::EventTargetList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventTargetList>> AsyncListEventTargets(::grpc::ClientContext* context, const ::flyteidl::event::EventTargetListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventTargetList>>(AsyncListEventTargetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventTargetList>> PrepareAsyncListEventTargets(::grpc::ClientContext* context, const ::flyteidl::event::EventTargetListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventTargetList>>(PrepareAsyncListEventTargetsRaw(context, request, cq));
    }
    // Enqueues an event target to be executed asynchronously.
    virtual ::grpc::Status EventOccurred(::grpc::ClientContext* context, const ::flyteidl::event::EventOccurredRequest& request, ::flyteidl::event::EventOccurredResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventOccurredResponse>> AsyncEventOccurred(::grpc::ClientContext* context, const ::flyteidl::event::EventOccurredRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventOccurredResponse>>(AsyncEventOccurredRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventOccurredResponse>> PrepareAsyncEventOccurred(::grpc::ClientContext* context, const ::flyteidl::event::EventOccurredRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventOccurredResponse>>(PrepareAsyncEventOccurredRaw(context, request, cq));
    }
    virtual ::grpc::Status GetEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateGetRequest& request, ::flyteidl::event::EventSensorStateGetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventSensorStateGetResponse>> AsyncGetEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventSensorStateGetResponse>>(AsyncGetEventSensorStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventSensorStateGetResponse>> PrepareAsyncGetEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventSensorStateGetResponse>>(PrepareAsyncGetEventSensorStateRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest& request, ::flyteidl::event::EventSensorStateUpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventSensorStateUpdateResponse>> AsyncUpdateEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventSensorStateUpdateResponse>>(AsyncUpdateEventSensorStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventSensorStateUpdateResponse>> PrepareAsyncUpdateEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventSensorStateUpdateResponse>>(PrepareAsyncUpdateEventSensorStateRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ListEventTargets(::grpc::ClientContext* context, const ::flyteidl::event::EventTargetListRequest* request, ::flyteidl::event::EventTargetList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListEventTargets(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventTargetList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListEventTargets(::grpc::ClientContext* context, const ::flyteidl::event::EventTargetListRequest* request, ::flyteidl::event::EventTargetList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ListEventTargets(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventTargetList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Enqueues an event target to be executed asynchronously.
      virtual void EventOccurred(::grpc::ClientContext* context, const ::flyteidl::event::EventOccurredRequest* request, ::flyteidl::event::EventOccurredResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EventOccurred(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventOccurredResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EventOccurred(::grpc::ClientContext* context, const ::flyteidl::event::EventOccurredRequest* request, ::flyteidl::event::EventOccurredResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void EventOccurred(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventOccurredResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateGetRequest* request, ::flyteidl::event::EventSensorStateGetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEventSensorState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventSensorStateGetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateGetRequest* request, ::flyteidl::event::EventSensorStateGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetEventSensorState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventSensorStateGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest* request, ::flyteidl::event::EventSensorStateUpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateEventSensorState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventSensorStateUpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest* request, ::flyteidl::event::EventSensorStateUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateEventSensorState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventSensorStateUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventTargetList>* AsyncListEventTargetsRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventTargetListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventTargetList>* PrepareAsyncListEventTargetsRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventTargetListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventOccurredResponse>* AsyncEventOccurredRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventOccurredRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventOccurredResponse>* PrepareAsyncEventOccurredRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventOccurredRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventSensorStateGetResponse>* AsyncGetEventSensorStateRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventSensorStateGetResponse>* PrepareAsyncGetEventSensorStateRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventSensorStateUpdateResponse>* AsyncUpdateEventSensorStateRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::event::EventSensorStateUpdateResponse>* PrepareAsyncUpdateEventSensorStateRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListEventTargets(::grpc::ClientContext* context, const ::flyteidl::event::EventTargetListRequest& request, ::flyteidl::event::EventTargetList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventTargetList>> AsyncListEventTargets(::grpc::ClientContext* context, const ::flyteidl::event::EventTargetListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventTargetList>>(AsyncListEventTargetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventTargetList>> PrepareAsyncListEventTargets(::grpc::ClientContext* context, const ::flyteidl::event::EventTargetListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventTargetList>>(PrepareAsyncListEventTargetsRaw(context, request, cq));
    }
    ::grpc::Status EventOccurred(::grpc::ClientContext* context, const ::flyteidl::event::EventOccurredRequest& request, ::flyteidl::event::EventOccurredResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventOccurredResponse>> AsyncEventOccurred(::grpc::ClientContext* context, const ::flyteidl::event::EventOccurredRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventOccurredResponse>>(AsyncEventOccurredRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventOccurredResponse>> PrepareAsyncEventOccurred(::grpc::ClientContext* context, const ::flyteidl::event::EventOccurredRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventOccurredResponse>>(PrepareAsyncEventOccurredRaw(context, request, cq));
    }
    ::grpc::Status GetEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateGetRequest& request, ::flyteidl::event::EventSensorStateGetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventSensorStateGetResponse>> AsyncGetEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventSensorStateGetResponse>>(AsyncGetEventSensorStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventSensorStateGetResponse>> PrepareAsyncGetEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventSensorStateGetResponse>>(PrepareAsyncGetEventSensorStateRaw(context, request, cq));
    }
    ::grpc::Status UpdateEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest& request, ::flyteidl::event::EventSensorStateUpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventSensorStateUpdateResponse>> AsyncUpdateEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventSensorStateUpdateResponse>>(AsyncUpdateEventSensorStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventSensorStateUpdateResponse>> PrepareAsyncUpdateEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventSensorStateUpdateResponse>>(PrepareAsyncUpdateEventSensorStateRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ListEventTargets(::grpc::ClientContext* context, const ::flyteidl::event::EventTargetListRequest* request, ::flyteidl::event::EventTargetList* response, std::function<void(::grpc::Status)>) override;
      void ListEventTargets(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventTargetList* response, std::function<void(::grpc::Status)>) override;
      void ListEventTargets(::grpc::ClientContext* context, const ::flyteidl::event::EventTargetListRequest* request, ::flyteidl::event::EventTargetList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListEventTargets(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventTargetList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void EventOccurred(::grpc::ClientContext* context, const ::flyteidl::event::EventOccurredRequest* request, ::flyteidl::event::EventOccurredResponse* response, std::function<void(::grpc::Status)>) override;
      void EventOccurred(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventOccurredResponse* response, std::function<void(::grpc::Status)>) override;
      void EventOccurred(::grpc::ClientContext* context, const ::flyteidl::event::EventOccurredRequest* request, ::flyteidl::event::EventOccurredResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void EventOccurred(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventOccurredResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateGetRequest* request, ::flyteidl::event::EventSensorStateGetResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEventSensorState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventSensorStateGetResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateGetRequest* request, ::flyteidl::event::EventSensorStateGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetEventSensorState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventSensorStateGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest* request, ::flyteidl::event::EventSensorStateUpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateEventSensorState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventSensorStateUpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest* request, ::flyteidl::event::EventSensorStateUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateEventSensorState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventSensorStateUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventTargetList>* AsyncListEventTargetsRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventTargetListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventTargetList>* PrepareAsyncListEventTargetsRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventTargetListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventOccurredResponse>* AsyncEventOccurredRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventOccurredRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventOccurredResponse>* PrepareAsyncEventOccurredRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventOccurredRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventSensorStateGetResponse>* AsyncGetEventSensorStateRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventSensorStateGetResponse>* PrepareAsyncGetEventSensorStateRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventSensorStateUpdateResponse>* AsyncUpdateEventSensorStateRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventSensorStateUpdateResponse>* PrepareAsyncUpdateEventSensorStateRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListEventTargets_;
    const ::grpc::internal::RpcMethod rpcmethod_EventOccurred_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEventSensorState_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateEventSensorState_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListEventTargets(::grpc::ServerContext* context, const ::flyteidl::event::EventTargetListRequest* request, ::flyteidl::event::EventTargetList* response);
    // Enqueues an event target to be executed asynchronously.
    virtual ::grpc::Status EventOccurred(::grpc::ServerContext* context, const ::flyteidl::event::EventOccurredRequest* request, ::flyteidl::event::EventOccurredResponse* response);
    virtual ::grpc::Status GetEventSensorState(::grpc::ServerContext* context, const ::flyteidl::event::EventSensorStateGetRequest* request, ::flyteidl::event::EventSensorStateGetResponse* response);
    virtual ::grpc::Status UpdateEventSensorState(::grpc::ServerContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest* request, ::flyteidl::event::EventSensorStateUpdateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListEventTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListEventTargets() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListEventTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListEventTargets(::grpc::ServerContext* context, const ::flyteidl::event::EventTargetListRequest* request, ::flyteidl::event::EventTargetList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListEventTargets(::grpc::ServerContext* context, ::flyteidl::event::EventTargetListRequest* request, ::grpc::ServerAsyncResponseWriter< ::flyteidl::event::EventTargetList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EventOccurred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_EventOccurred() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_EventOccurred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EventOccurred(::grpc::ServerContext* context, const ::flyteidl::event::EventOccurredRequest* request, ::flyteidl::event::EventOccurredResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEventOccurred(::grpc::ServerContext* context, ::flyteidl::event::EventOccurredRequest* request, ::grpc::ServerAsyncResponseWriter< ::flyteidl::event::EventOccurredResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEventSensorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetEventSensorState() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetEventSensorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventSensorState(::grpc::ServerContext* context, const ::flyteidl::event::EventSensorStateGetRequest* request, ::flyteidl::event::EventSensorStateGetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEventSensorState(::grpc::ServerContext* context, ::flyteidl::event::EventSensorStateGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::flyteidl::event::EventSensorStateGetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateEventSensorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateEventSensorState() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateEventSensorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEventSensorState(::grpc::ServerContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest* request, ::flyteidl::event::EventSensorStateUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateEventSensorState(::grpc::ServerContext* context, ::flyteidl::event::EventSensorStateUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::flyteidl::event::EventSensorStateUpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListEventTargets<WithAsyncMethod_EventOccurred<WithAsyncMethod_GetEventSensorState<WithAsyncMethod_UpdateEventSensorState<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListEventTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ListEventTargets() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::flyteidl::event::EventTargetListRequest, ::flyteidl::event::EventTargetList>(
          [this](::grpc::ServerContext* context,
                 const ::flyteidl::event::EventTargetListRequest* request,
                 ::flyteidl::event::EventTargetList* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ListEventTargets(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ListEventTargets(
        ::grpc::experimental::MessageAllocator< ::flyteidl::event::EventTargetListRequest, ::flyteidl::event::EventTargetList>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flyteidl::event::EventTargetListRequest, ::flyteidl::event::EventTargetList>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListEventTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListEventTargets(::grpc::ServerContext* context, const ::flyteidl::event::EventTargetListRequest* request, ::flyteidl::event::EventTargetList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListEventTargets(::grpc::ServerContext* context, const ::flyteidl::event::EventTargetListRequest* request, ::flyteidl::event::EventTargetList* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_EventOccurred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_EventOccurred() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::flyteidl::event::EventOccurredRequest, ::flyteidl::event::EventOccurredResponse>(
          [this](::grpc::ServerContext* context,
                 const ::flyteidl::event::EventOccurredRequest* request,
                 ::flyteidl::event::EventOccurredResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->EventOccurred(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_EventOccurred(
        ::grpc::experimental::MessageAllocator< ::flyteidl::event::EventOccurredRequest, ::flyteidl::event::EventOccurredResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flyteidl::event::EventOccurredRequest, ::flyteidl::event::EventOccurredResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_EventOccurred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EventOccurred(::grpc::ServerContext* context, const ::flyteidl::event::EventOccurredRequest* request, ::flyteidl::event::EventOccurredResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void EventOccurred(::grpc::ServerContext* context, const ::flyteidl::event::EventOccurredRequest* request, ::flyteidl::event::EventOccurredResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetEventSensorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetEventSensorState() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::flyteidl::event::EventSensorStateGetRequest, ::flyteidl::event::EventSensorStateGetResponse>(
          [this](::grpc::ServerContext* context,
                 const ::flyteidl::event::EventSensorStateGetRequest* request,
                 ::flyteidl::event::EventSensorStateGetResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetEventSensorState(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetEventSensorState(
        ::grpc::experimental::MessageAllocator< ::flyteidl::event::EventSensorStateGetRequest, ::flyteidl::event::EventSensorStateGetResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flyteidl::event::EventSensorStateGetRequest, ::flyteidl::event::EventSensorStateGetResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetEventSensorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventSensorState(::grpc::ServerContext* context, const ::flyteidl::event::EventSensorStateGetRequest* request, ::flyteidl::event::EventSensorStateGetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetEventSensorState(::grpc::ServerContext* context, const ::flyteidl::event::EventSensorStateGetRequest* request, ::flyteidl::event::EventSensorStateGetResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateEventSensorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_UpdateEventSensorState() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::flyteidl::event::EventSensorStateUpdateRequest, ::flyteidl::event::EventSensorStateUpdateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::flyteidl::event::EventSensorStateUpdateRequest* request,
                 ::flyteidl::event::EventSensorStateUpdateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->UpdateEventSensorState(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_UpdateEventSensorState(
        ::grpc::experimental::MessageAllocator< ::flyteidl::event::EventSensorStateUpdateRequest, ::flyteidl::event::EventSensorStateUpdateResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flyteidl::event::EventSensorStateUpdateRequest, ::flyteidl::event::EventSensorStateUpdateResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateEventSensorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEventSensorState(::grpc::ServerContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest* request, ::flyteidl::event::EventSensorStateUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateEventSensorState(::grpc::ServerContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest* request, ::flyteidl::event::EventSensorStateUpdateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_ListEventTargets<ExperimentalWithCallbackMethod_EventOccurred<ExperimentalWithCallbackMethod_GetEventSensorState<ExperimentalWithCallbackMethod_UpdateEventSensorState<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListEventTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListEventTargets() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListEventTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListEventTargets(::grpc::ServerContext* context, const ::flyteidl::event::EventTargetListRequest* request, ::flyteidl::event::EventTargetList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EventOccurred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_EventOccurred() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_EventOccurred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EventOccurred(::grpc::ServerContext* context, const ::flyteidl::event::EventOccurredRequest* request, ::flyteidl::event::EventOccurredResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEventSensorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetEventSensorState() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetEventSensorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventSensorState(::grpc::ServerContext* context, const ::flyteidl::event::EventSensorStateGetRequest* request, ::flyteidl::event::EventSensorStateGetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateEventSensorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateEventSensorState() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateEventSensorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEventSensorState(::grpc::ServerContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest* request, ::flyteidl::event::EventSensorStateUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListEventTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListEventTargets() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListEventTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListEventTargets(::grpc::ServerContext* context, const ::flyteidl::event::EventTargetListRequest* request, ::flyteidl::event::EventTargetList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListEventTargets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EventOccurred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_EventOccurred() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_EventOccurred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EventOccurred(::grpc::ServerContext* context, const ::flyteidl::event::EventOccurredRequest* request, ::flyteidl::event::EventOccurredResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEventOccurred(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEventSensorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetEventSensorState() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetEventSensorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventSensorState(::grpc::ServerContext* context, const ::flyteidl::event::EventSensorStateGetRequest* request, ::flyteidl::event::EventSensorStateGetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEventSensorState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateEventSensorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateEventSensorState() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateEventSensorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEventSensorState(::grpc::ServerContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest* request, ::flyteidl::event::EventSensorStateUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateEventSensorState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListEventTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ListEventTargets() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ListEventTargets(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ListEventTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListEventTargets(::grpc::ServerContext* context, const ::flyteidl::event::EventTargetListRequest* request, ::flyteidl::event::EventTargetList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListEventTargets(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_EventOccurred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_EventOccurred() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->EventOccurred(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_EventOccurred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EventOccurred(::grpc::ServerContext* context, const ::flyteidl::event::EventOccurredRequest* request, ::flyteidl::event::EventOccurredResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void EventOccurred(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetEventSensorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetEventSensorState() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetEventSensorState(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetEventSensorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventSensorState(::grpc::ServerContext* context, const ::flyteidl::event::EventSensorStateGetRequest* request, ::flyteidl::event::EventSensorStateGetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetEventSensorState(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateEventSensorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateEventSensorState() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->UpdateEventSensorState(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateEventSensorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEventSensorState(::grpc::ServerContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest* request, ::flyteidl::event::EventSensorStateUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateEventSensorState(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListEventTargets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListEventTargets() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::flyteidl::event::EventTargetListRequest, ::flyteidl::event::EventTargetList>(std::bind(&WithStreamedUnaryMethod_ListEventTargets<BaseClass>::StreamedListEventTargets, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListEventTargets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListEventTargets(::grpc::ServerContext* context, const ::flyteidl::event::EventTargetListRequest* request, ::flyteidl::event::EventTargetList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListEventTargets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flyteidl::event::EventTargetListRequest,::flyteidl::event::EventTargetList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EventOccurred : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_EventOccurred() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::flyteidl::event::EventOccurredRequest, ::flyteidl::event::EventOccurredResponse>(std::bind(&WithStreamedUnaryMethod_EventOccurred<BaseClass>::StreamedEventOccurred, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_EventOccurred() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EventOccurred(::grpc::ServerContext* context, const ::flyteidl::event::EventOccurredRequest* request, ::flyteidl::event::EventOccurredResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEventOccurred(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flyteidl::event::EventOccurredRequest,::flyteidl::event::EventOccurredResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEventSensorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetEventSensorState() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::flyteidl::event::EventSensorStateGetRequest, ::flyteidl::event::EventSensorStateGetResponse>(std::bind(&WithStreamedUnaryMethod_GetEventSensorState<BaseClass>::StreamedGetEventSensorState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetEventSensorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEventSensorState(::grpc::ServerContext* context, const ::flyteidl::event::EventSensorStateGetRequest* request, ::flyteidl::event::EventSensorStateGetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEventSensorState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flyteidl::event::EventSensorStateGetRequest,::flyteidl::event::EventSensorStateGetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateEventSensorState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateEventSensorState() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::flyteidl::event::EventSensorStateUpdateRequest, ::flyteidl::event::EventSensorStateUpdateResponse>(std::bind(&WithStreamedUnaryMethod_UpdateEventSensorState<BaseClass>::StreamedUpdateEventSensorState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateEventSensorState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateEventSensorState(::grpc::ServerContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest* request, ::flyteidl::event::EventSensorStateUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateEventSensorState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flyteidl::event::EventSensorStateUpdateRequest,::flyteidl::event::EventSensorStateUpdateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListEventTargets<WithStreamedUnaryMethod_EventOccurred<WithStreamedUnaryMethod_GetEventSensorState<WithStreamedUnaryMethod_UpdateEventSensorState<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListEventTargets<WithStreamedUnaryMethod_EventOccurred<WithStreamedUnaryMethod_GetEventSensorState<WithStreamedUnaryMethod_UpdateEventSensorState<Service > > > > StreamedService;
};

}  // namespace service
}  // namespace flyteidl


#endif  // GRPC_flyteidl_2fservice_2fevent_5fsensor_2eproto__INCLUDED
