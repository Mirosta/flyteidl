// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flyteidl/service/event_sensor.proto

#include "flyteidl/service/event_sensor.pb.h"
#include "flyteidl/service/event_sensor.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace flyteidl {
namespace service {

static const char* EventSensorService_method_names[] = {
  "/flyteidl.service.EventSensorService/ListEventTargets",
  "/flyteidl.service.EventSensorService/EventOccurred",
  "/flyteidl.service.EventSensorService/GetEventSensorState",
  "/flyteidl.service.EventSensorService/UpdateEventSensorState",
};

std::unique_ptr< EventSensorService::Stub> EventSensorService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EventSensorService::Stub> stub(new EventSensorService::Stub(channel));
  return stub;
}

EventSensorService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListEventTargets_(EventSensorService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EventOccurred_(EventSensorService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEventSensorState_(EventSensorService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateEventSensorState_(EventSensorService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EventSensorService::Stub::ListEventTargets(::grpc::ClientContext* context, const ::flyteidl::event::EventTargetListRequest& request, ::flyteidl::event::EventTargetList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListEventTargets_, context, request, response);
}

void EventSensorService::Stub::experimental_async::ListEventTargets(::grpc::ClientContext* context, const ::flyteidl::event::EventTargetListRequest* request, ::flyteidl::event::EventTargetList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListEventTargets_, context, request, response, std::move(f));
}

void EventSensorService::Stub::experimental_async::ListEventTargets(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventTargetList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListEventTargets_, context, request, response, std::move(f));
}

void EventSensorService::Stub::experimental_async::ListEventTargets(::grpc::ClientContext* context, const ::flyteidl::event::EventTargetListRequest* request, ::flyteidl::event::EventTargetList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListEventTargets_, context, request, response, reactor);
}

void EventSensorService::Stub::experimental_async::ListEventTargets(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventTargetList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListEventTargets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventTargetList>* EventSensorService::Stub::AsyncListEventTargetsRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventTargetListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::event::EventTargetList>::Create(channel_.get(), cq, rpcmethod_ListEventTargets_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventTargetList>* EventSensorService::Stub::PrepareAsyncListEventTargetsRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventTargetListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::event::EventTargetList>::Create(channel_.get(), cq, rpcmethod_ListEventTargets_, context, request, false);
}

::grpc::Status EventSensorService::Stub::EventOccurred(::grpc::ClientContext* context, const ::flyteidl::event::EventOccurredRequest& request, ::flyteidl::event::EventOccurredResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EventOccurred_, context, request, response);
}

void EventSensorService::Stub::experimental_async::EventOccurred(::grpc::ClientContext* context, const ::flyteidl::event::EventOccurredRequest* request, ::flyteidl::event::EventOccurredResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EventOccurred_, context, request, response, std::move(f));
}

void EventSensorService::Stub::experimental_async::EventOccurred(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventOccurredResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EventOccurred_, context, request, response, std::move(f));
}

void EventSensorService::Stub::experimental_async::EventOccurred(::grpc::ClientContext* context, const ::flyteidl::event::EventOccurredRequest* request, ::flyteidl::event::EventOccurredResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EventOccurred_, context, request, response, reactor);
}

void EventSensorService::Stub::experimental_async::EventOccurred(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventOccurredResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EventOccurred_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventOccurredResponse>* EventSensorService::Stub::AsyncEventOccurredRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventOccurredRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::event::EventOccurredResponse>::Create(channel_.get(), cq, rpcmethod_EventOccurred_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventOccurredResponse>* EventSensorService::Stub::PrepareAsyncEventOccurredRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventOccurredRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::event::EventOccurredResponse>::Create(channel_.get(), cq, rpcmethod_EventOccurred_, context, request, false);
}

::grpc::Status EventSensorService::Stub::GetEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateGetRequest& request, ::flyteidl::event::EventSensorStateGetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEventSensorState_, context, request, response);
}

void EventSensorService::Stub::experimental_async::GetEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateGetRequest* request, ::flyteidl::event::EventSensorStateGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEventSensorState_, context, request, response, std::move(f));
}

void EventSensorService::Stub::experimental_async::GetEventSensorState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventSensorStateGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEventSensorState_, context, request, response, std::move(f));
}

void EventSensorService::Stub::experimental_async::GetEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateGetRequest* request, ::flyteidl::event::EventSensorStateGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEventSensorState_, context, request, response, reactor);
}

void EventSensorService::Stub::experimental_async::GetEventSensorState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventSensorStateGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEventSensorState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventSensorStateGetResponse>* EventSensorService::Stub::AsyncGetEventSensorStateRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::event::EventSensorStateGetResponse>::Create(channel_.get(), cq, rpcmethod_GetEventSensorState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventSensorStateGetResponse>* EventSensorService::Stub::PrepareAsyncGetEventSensorStateRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::event::EventSensorStateGetResponse>::Create(channel_.get(), cq, rpcmethod_GetEventSensorState_, context, request, false);
}

::grpc::Status EventSensorService::Stub::UpdateEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest& request, ::flyteidl::event::EventSensorStateUpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateEventSensorState_, context, request, response);
}

void EventSensorService::Stub::experimental_async::UpdateEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest* request, ::flyteidl::event::EventSensorStateUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateEventSensorState_, context, request, response, std::move(f));
}

void EventSensorService::Stub::experimental_async::UpdateEventSensorState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventSensorStateUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateEventSensorState_, context, request, response, std::move(f));
}

void EventSensorService::Stub::experimental_async::UpdateEventSensorState(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest* request, ::flyteidl::event::EventSensorStateUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateEventSensorState_, context, request, response, reactor);
}

void EventSensorService::Stub::experimental_async::UpdateEventSensorState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::event::EventSensorStateUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateEventSensorState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventSensorStateUpdateResponse>* EventSensorService::Stub::AsyncUpdateEventSensorStateRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::event::EventSensorStateUpdateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateEventSensorState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::event::EventSensorStateUpdateResponse>* EventSensorService::Stub::PrepareAsyncUpdateEventSensorStateRaw(::grpc::ClientContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::event::EventSensorStateUpdateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateEventSensorState_, context, request, false);
}

EventSensorService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventSensorService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EventSensorService::Service, ::flyteidl::event::EventTargetListRequest, ::flyteidl::event::EventTargetList>(
          std::mem_fn(&EventSensorService::Service::ListEventTargets), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventSensorService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EventSensorService::Service, ::flyteidl::event::EventOccurredRequest, ::flyteidl::event::EventOccurredResponse>(
          std::mem_fn(&EventSensorService::Service::EventOccurred), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventSensorService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EventSensorService::Service, ::flyteidl::event::EventSensorStateGetRequest, ::flyteidl::event::EventSensorStateGetResponse>(
          std::mem_fn(&EventSensorService::Service::GetEventSensorState), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventSensorService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EventSensorService::Service, ::flyteidl::event::EventSensorStateUpdateRequest, ::flyteidl::event::EventSensorStateUpdateResponse>(
          std::mem_fn(&EventSensorService::Service::UpdateEventSensorState), this)));
}

EventSensorService::Service::~Service() {
}

::grpc::Status EventSensorService::Service::ListEventTargets(::grpc::ServerContext* context, const ::flyteidl::event::EventTargetListRequest* request, ::flyteidl::event::EventTargetList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EventSensorService::Service::EventOccurred(::grpc::ServerContext* context, const ::flyteidl::event::EventOccurredRequest* request, ::flyteidl::event::EventOccurredResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EventSensorService::Service::GetEventSensorState(::grpc::ServerContext* context, const ::flyteidl::event::EventSensorStateGetRequest* request, ::flyteidl::event::EventSensorStateGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EventSensorService::Service::UpdateEventSensorState(::grpc::ServerContext* context, const ::flyteidl::event::EventSensorStateUpdateRequest* request, ::flyteidl::event::EventSensorStateUpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace flyteidl
}  // namespace service

