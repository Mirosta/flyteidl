// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/event/sensor.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fevent_2fsensor_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fevent_2fsensor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/admin/execution.pb.h"
#include "flyteidl/core/execution.pb.h"
#include "flyteidl/core/identifier.pb.h"
#include "flyteidl/core/named_entity_identifier.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fevent_2fsensor_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fevent_2fsensor_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fevent_2fsensor_2eproto();
namespace flyteidl {
namespace event {
class CustomEvent;
class CustomEventDefaultTypeInternal;
extern CustomEventDefaultTypeInternal _CustomEvent_default_instance_;
class EventOccurredRequest;
class EventOccurredRequestDefaultTypeInternal;
extern EventOccurredRequestDefaultTypeInternal _EventOccurredRequest_default_instance_;
class EventOccurredResponse;
class EventOccurredResponseDefaultTypeInternal;
extern EventOccurredResponseDefaultTypeInternal _EventOccurredResponse_default_instance_;
class EventTarget;
class EventTargetDefaultTypeInternal;
extern EventTargetDefaultTypeInternal _EventTarget_default_instance_;
class EventTargetList;
class EventTargetListDefaultTypeInternal;
extern EventTargetListDefaultTypeInternal _EventTargetList_default_instance_;
class EventTargetListRequest;
class EventTargetListRequestDefaultTypeInternal;
extern EventTargetListRequestDefaultTypeInternal _EventTargetListRequest_default_instance_;
class FilePrefix;
class FilePrefixDefaultTypeInternal;
extern FilePrefixDefaultTypeInternal _FilePrefix_default_instance_;
class RemoteFileEvent;
class RemoteFileEventDefaultTypeInternal;
extern RemoteFileEventDefaultTypeInternal _RemoteFileEvent_default_instance_;
class WorkflowEvent;
class WorkflowEventDefaultTypeInternal;
extern WorkflowEventDefaultTypeInternal _WorkflowEvent_default_instance_;
}  // namespace event
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::event::CustomEvent* Arena::CreateMaybeMessage<::flyteidl::event::CustomEvent>(Arena*);
template<> ::flyteidl::event::EventOccurredRequest* Arena::CreateMaybeMessage<::flyteidl::event::EventOccurredRequest>(Arena*);
template<> ::flyteidl::event::EventOccurredResponse* Arena::CreateMaybeMessage<::flyteidl::event::EventOccurredResponse>(Arena*);
template<> ::flyteidl::event::EventTarget* Arena::CreateMaybeMessage<::flyteidl::event::EventTarget>(Arena*);
template<> ::flyteidl::event::EventTargetList* Arena::CreateMaybeMessage<::flyteidl::event::EventTargetList>(Arena*);
template<> ::flyteidl::event::EventTargetListRequest* Arena::CreateMaybeMessage<::flyteidl::event::EventTargetListRequest>(Arena*);
template<> ::flyteidl::event::FilePrefix* Arena::CreateMaybeMessage<::flyteidl::event::FilePrefix>(Arena*);
template<> ::flyteidl::event::RemoteFileEvent* Arena::CreateMaybeMessage<::flyteidl::event::RemoteFileEvent>(Arena*);
template<> ::flyteidl::event::WorkflowEvent* Arena::CreateMaybeMessage<::flyteidl::event::WorkflowEvent>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace event {

enum RemoteFileEvent_Action {
  RemoteFileEvent_Action_CREATE = 0,
  RemoteFileEvent_Action_RemoteFileEvent_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  RemoteFileEvent_Action_RemoteFileEvent_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool RemoteFileEvent_Action_IsValid(int value);
const RemoteFileEvent_Action RemoteFileEvent_Action_Action_MIN = RemoteFileEvent_Action_CREATE;
const RemoteFileEvent_Action RemoteFileEvent_Action_Action_MAX = RemoteFileEvent_Action_CREATE;
const int RemoteFileEvent_Action_Action_ARRAYSIZE = RemoteFileEvent_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* RemoteFileEvent_Action_descriptor();
inline const ::std::string& RemoteFileEvent_Action_Name(RemoteFileEvent_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    RemoteFileEvent_Action_descriptor(), value);
}
inline bool RemoteFileEvent_Action_Parse(
    const ::std::string& name, RemoteFileEvent_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RemoteFileEvent_Action>(
    RemoteFileEvent_Action_descriptor(), name, value);
}
// ===================================================================

class WorkflowEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.WorkflowEvent) */ {
 public:
  WorkflowEvent();
  virtual ~WorkflowEvent();

  WorkflowEvent(const WorkflowEvent& from);

  inline WorkflowEvent& operator=(const WorkflowEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowEvent(WorkflowEvent&& from) noexcept
    : WorkflowEvent() {
    *this = ::std::move(from);
  }

  inline WorkflowEvent& operator=(WorkflowEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkflowEvent& default_instance();

  enum IdCase {
    kExecutionIdentifier = 1,
    kNamedEntityIdentifier = 2,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowEvent* internal_default_instance() {
    return reinterpret_cast<const WorkflowEvent*>(
               &_WorkflowEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(WorkflowEvent* other);
  friend void swap(WorkflowEvent& a, WorkflowEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowEvent* New() const final {
    return CreateMaybeMessage<WorkflowEvent>(nullptr);
  }

  WorkflowEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkflowEvent& from);
  void MergeFrom(const WorkflowEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.WorkflowExecution.Phase phases = 3;
  int phases_size() const;
  void clear_phases();
  static const int kPhasesFieldNumber = 3;
  ::flyteidl::core::WorkflowExecution_Phase phases(int index) const;
  void set_phases(int index, ::flyteidl::core::WorkflowExecution_Phase value);
  void add_phases(::flyteidl::core::WorkflowExecution_Phase value);
  const ::google::protobuf::RepeatedField<int>& phases() const;
  ::google::protobuf::RepeatedField<int>* mutable_phases();

  // .flyteidl.core.Identifier execution_identifier = 1;
  bool has_execution_identifier() const;
  void clear_execution_identifier();
  static const int kExecutionIdentifierFieldNumber = 1;
  const ::flyteidl::core::Identifier& execution_identifier() const;
  ::flyteidl::core::Identifier* release_execution_identifier();
  ::flyteidl::core::Identifier* mutable_execution_identifier();
  void set_allocated_execution_identifier(::flyteidl::core::Identifier* execution_identifier);

  // .flyteidl.core.NamedEntityIdentifier named_entity_identifier = 2;
  bool has_named_entity_identifier() const;
  void clear_named_entity_identifier();
  static const int kNamedEntityIdentifierFieldNumber = 2;
  const ::flyteidl::core::NamedEntityIdentifier& named_entity_identifier() const;
  ::flyteidl::core::NamedEntityIdentifier* release_named_entity_identifier();
  ::flyteidl::core::NamedEntityIdentifier* mutable_named_entity_identifier();
  void set_allocated_named_entity_identifier(::flyteidl::core::NamedEntityIdentifier* named_entity_identifier);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.event.WorkflowEvent)
 private:
  class HasBitSetters;
  void set_has_execution_identifier();
  void set_has_named_entity_identifier();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> phases_;
  mutable std::atomic<int> _phases_cached_byte_size_;
  union IdUnion {
    IdUnion() {}
    ::flyteidl::core::Identifier* execution_identifier_;
    ::flyteidl::core::NamedEntityIdentifier* named_entity_identifier_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fevent_2fsensor_2eproto;
};
// -------------------------------------------------------------------

class FilePrefix final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.FilePrefix) */ {
 public:
  FilePrefix();
  virtual ~FilePrefix();

  FilePrefix(const FilePrefix& from);

  inline FilePrefix& operator=(const FilePrefix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FilePrefix(FilePrefix&& from) noexcept
    : FilePrefix() {
    *this = ::std::move(from);
  }

  inline FilePrefix& operator=(FilePrefix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FilePrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FilePrefix* internal_default_instance() {
    return reinterpret_cast<const FilePrefix*>(
               &_FilePrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FilePrefix* other);
  friend void swap(FilePrefix& a, FilePrefix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FilePrefix* New() const final {
    return CreateMaybeMessage<FilePrefix>(nullptr);
  }

  FilePrefix* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FilePrefix>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FilePrefix& from);
  void MergeFrom(const FilePrefix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilePrefix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string prefix = 1;
  void clear_prefix();
  static const int kPrefixFieldNumber = 1;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_prefix(::std::string&& value);
  #endif
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // string pattern = 2;
  void clear_pattern();
  static const int kPatternFieldNumber = 2;
  const ::std::string& pattern() const;
  void set_pattern(const ::std::string& value);
  #if LANG_CXX11
  void set_pattern(::std::string&& value);
  #endif
  void set_pattern(const char* value);
  void set_pattern(const char* value, size_t size);
  ::std::string* mutable_pattern();
  ::std::string* release_pattern();
  void set_allocated_pattern(::std::string* pattern);

  // @@protoc_insertion_point(class_scope:flyteidl.event.FilePrefix)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  ::google::protobuf::internal::ArenaStringPtr pattern_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fsensor_2eproto;
};
// -------------------------------------------------------------------

class RemoteFileEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.RemoteFileEvent) */ {
 public:
  RemoteFileEvent();
  virtual ~RemoteFileEvent();

  RemoteFileEvent(const RemoteFileEvent& from);

  inline RemoteFileEvent& operator=(const RemoteFileEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoteFileEvent(RemoteFileEvent&& from) noexcept
    : RemoteFileEvent() {
    *this = ::std::move(from);
  }

  inline RemoteFileEvent& operator=(RemoteFileEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RemoteFileEvent& default_instance();

  enum FileCase {
    kPath = 1,
    kPrefix = 2,
    FILE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteFileEvent* internal_default_instance() {
    return reinterpret_cast<const RemoteFileEvent*>(
               &_RemoteFileEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RemoteFileEvent* other);
  friend void swap(RemoteFileEvent& a, RemoteFileEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoteFileEvent* New() const final {
    return CreateMaybeMessage<RemoteFileEvent>(nullptr);
  }

  RemoteFileEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoteFileEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoteFileEvent& from);
  void MergeFrom(const RemoteFileEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteFileEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RemoteFileEvent_Action Action;
  static const Action CREATE =
    RemoteFileEvent_Action_CREATE;
  static inline bool Action_IsValid(int value) {
    return RemoteFileEvent_Action_IsValid(value);
  }
  static const Action Action_MIN =
    RemoteFileEvent_Action_Action_MIN;
  static const Action Action_MAX =
    RemoteFileEvent_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    RemoteFileEvent_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return RemoteFileEvent_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return RemoteFileEvent_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return RemoteFileEvent_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .flyteidl.event.RemoteFileEvent.Action action = 3;
  void clear_action();
  static const int kActionFieldNumber = 3;
  ::flyteidl::event::RemoteFileEvent_Action action() const;
  void set_action(::flyteidl::event::RemoteFileEvent_Action value);

  // string path = 1;
  private:
  bool has_path() const;
  public:
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // .flyteidl.event.FilePrefix prefix = 2;
  bool has_prefix() const;
  void clear_prefix();
  static const int kPrefixFieldNumber = 2;
  const ::flyteidl::event::FilePrefix& prefix() const;
  ::flyteidl::event::FilePrefix* release_prefix();
  ::flyteidl::event::FilePrefix* mutable_prefix();
  void set_allocated_prefix(::flyteidl::event::FilePrefix* prefix);

  void clear_file();
  FileCase file_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.event.RemoteFileEvent)
 private:
  class HasBitSetters;
  void set_has_path();
  void set_has_prefix();

  inline bool has_file() const;
  inline void clear_has_file();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int action_;
  union FileUnion {
    FileUnion() {}
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::flyteidl::event::FilePrefix* prefix_;
  } file_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fevent_2fsensor_2eproto;
};
// -------------------------------------------------------------------

class CustomEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.CustomEvent) */ {
 public:
  CustomEvent();
  virtual ~CustomEvent();

  CustomEvent(const CustomEvent& from);

  inline CustomEvent& operator=(const CustomEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CustomEvent(CustomEvent&& from) noexcept
    : CustomEvent() {
    *this = ::std::move(from);
  }

  inline CustomEvent& operator=(CustomEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CustomEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomEvent* internal_default_instance() {
    return reinterpret_cast<const CustomEvent*>(
               &_CustomEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CustomEvent* other);
  friend void swap(CustomEvent& a, CustomEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomEvent* New() const final {
    return CreateMaybeMessage<CustomEvent>(nullptr);
  }

  CustomEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CustomEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CustomEvent& from);
  void MergeFrom(const CustomEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string target_type = 1;
  void clear_target_type();
  static const int kTargetTypeFieldNumber = 1;
  const ::std::string& target_type() const;
  void set_target_type(const ::std::string& value);
  #if LANG_CXX11
  void set_target_type(::std::string&& value);
  #endif
  void set_target_type(const char* value);
  void set_target_type(const char* value, size_t size);
  ::std::string* mutable_target_type();
  ::std::string* release_target_type();
  void set_allocated_target_type(::std::string* target_type);

  // .google.protobuf.Struct custom_info = 2;
  bool has_custom_info() const;
  void clear_custom_info();
  static const int kCustomInfoFieldNumber = 2;
  const ::google::protobuf::Struct& custom_info() const;
  ::google::protobuf::Struct* release_custom_info();
  ::google::protobuf::Struct* mutable_custom_info();
  void set_allocated_custom_info(::google::protobuf::Struct* custom_info);

  // @@protoc_insertion_point(class_scope:flyteidl.event.CustomEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr target_type_;
  ::google::protobuf::Struct* custom_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fsensor_2eproto;
};
// -------------------------------------------------------------------

class EventTarget final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.EventTarget) */ {
 public:
  EventTarget();
  virtual ~EventTarget();

  EventTarget(const EventTarget& from);

  inline EventTarget& operator=(const EventTarget& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventTarget(EventTarget&& from) noexcept
    : EventTarget() {
    *this = ::std::move(from);
  }

  inline EventTarget& operator=(EventTarget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EventTarget& default_instance();

  enum EventCase {
    kWorkflowEvent = 1,
    kRemoteFileEvent = 2,
    kCustomEvent = 16,
    EVENT_NOT_SET = 0,
  };

  enum TargetCase {
    kLaunchPlan = 3,
    TARGET_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventTarget* internal_default_instance() {
    return reinterpret_cast<const EventTarget*>(
               &_EventTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(EventTarget* other);
  friend void swap(EventTarget& a, EventTarget& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventTarget* New() const final {
    return CreateMaybeMessage<EventTarget>(nullptr);
  }

  EventTarget* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventTarget>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventTarget& from);
  void MergeFrom(const EventTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventTarget* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string event_trigger_arg = 5;
  void clear_event_trigger_arg();
  static const int kEventTriggerArgFieldNumber = 5;
  const ::std::string& event_trigger_arg() const;
  void set_event_trigger_arg(const ::std::string& value);
  #if LANG_CXX11
  void set_event_trigger_arg(::std::string&& value);
  #endif
  void set_event_trigger_arg(const char* value);
  void set_event_trigger_arg(const char* value, size_t size);
  ::std::string* mutable_event_trigger_arg();
  ::std::string* release_event_trigger_arg();
  void set_allocated_event_trigger_arg(::std::string* event_trigger_arg);

  // .google.protobuf.Duration event_timeout = 4;
  bool has_event_timeout() const;
  void clear_event_timeout();
  static const int kEventTimeoutFieldNumber = 4;
  const ::google::protobuf::Duration& event_timeout() const;
  ::google::protobuf::Duration* release_event_timeout();
  ::google::protobuf::Duration* mutable_event_timeout();
  void set_allocated_event_timeout(::google::protobuf::Duration* event_timeout);

  // .flyteidl.event.WorkflowEvent workflow_event = 1;
  bool has_workflow_event() const;
  void clear_workflow_event();
  static const int kWorkflowEventFieldNumber = 1;
  const ::flyteidl::event::WorkflowEvent& workflow_event() const;
  ::flyteidl::event::WorkflowEvent* release_workflow_event();
  ::flyteidl::event::WorkflowEvent* mutable_workflow_event();
  void set_allocated_workflow_event(::flyteidl::event::WorkflowEvent* workflow_event);

  // .flyteidl.event.RemoteFileEvent remote_file_event = 2;
  bool has_remote_file_event() const;
  void clear_remote_file_event();
  static const int kRemoteFileEventFieldNumber = 2;
  const ::flyteidl::event::RemoteFileEvent& remote_file_event() const;
  ::flyteidl::event::RemoteFileEvent* release_remote_file_event();
  ::flyteidl::event::RemoteFileEvent* mutable_remote_file_event();
  void set_allocated_remote_file_event(::flyteidl::event::RemoteFileEvent* remote_file_event);

  // .flyteidl.event.CustomEvent custom_event = 16;
  bool has_custom_event() const;
  void clear_custom_event();
  static const int kCustomEventFieldNumber = 16;
  const ::flyteidl::event::CustomEvent& custom_event() const;
  ::flyteidl::event::CustomEvent* release_custom_event();
  ::flyteidl::event::CustomEvent* mutable_custom_event();
  void set_allocated_custom_event(::flyteidl::event::CustomEvent* custom_event);

  // .flyteidl.core.Identifier launch_plan = 3;
  bool has_launch_plan() const;
  void clear_launch_plan();
  static const int kLaunchPlanFieldNumber = 3;
  const ::flyteidl::core::Identifier& launch_plan() const;
  ::flyteidl::core::Identifier* release_launch_plan();
  ::flyteidl::core::Identifier* mutable_launch_plan();
  void set_allocated_launch_plan(::flyteidl::core::Identifier* launch_plan);

  void clear_event();
  EventCase event_case() const;
  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.event.EventTarget)
 private:
  class HasBitSetters;
  void set_has_workflow_event();
  void set_has_remote_file_event();
  void set_has_custom_event();
  void set_has_launch_plan();

  inline bool has_event() const;
  inline void clear_has_event();

  inline bool has_target() const;
  inline void clear_has_target();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr event_trigger_arg_;
  ::google::protobuf::Duration* event_timeout_;
  union EventUnion {
    EventUnion() {}
    ::flyteidl::event::WorkflowEvent* workflow_event_;
    ::flyteidl::event::RemoteFileEvent* remote_file_event_;
    ::flyteidl::event::CustomEvent* custom_event_;
  } event_;
  union TargetUnion {
    TargetUnion() {}
    ::flyteidl::core::Identifier* launch_plan_;
  } target_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct ::TableStruct_flyteidl_2fevent_2fsensor_2eproto;
};
// -------------------------------------------------------------------

class EventTargetListRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.EventTargetListRequest) */ {
 public:
  EventTargetListRequest();
  virtual ~EventTargetListRequest();

  EventTargetListRequest(const EventTargetListRequest& from);

  inline EventTargetListRequest& operator=(const EventTargetListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventTargetListRequest(EventTargetListRequest&& from) noexcept
    : EventTargetListRequest() {
    *this = ::std::move(from);
  }

  inline EventTargetListRequest& operator=(EventTargetListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EventTargetListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventTargetListRequest* internal_default_instance() {
    return reinterpret_cast<const EventTargetListRequest*>(
               &_EventTargetListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(EventTargetListRequest* other);
  friend void swap(EventTargetListRequest& a, EventTargetListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventTargetListRequest* New() const final {
    return CreateMaybeMessage<EventTargetListRequest>(nullptr);
  }

  EventTargetListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventTargetListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventTargetListRequest& from);
  void MergeFrom(const EventTargetListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventTargetListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string event_type = 1;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  const ::std::string& event_type() const;
  void set_event_type(const ::std::string& value);
  #if LANG_CXX11
  void set_event_type(::std::string&& value);
  #endif
  void set_event_type(const char* value);
  void set_event_type(const char* value, size_t size);
  ::std::string* mutable_event_type();
  ::std::string* release_event_type();
  void set_allocated_event_type(::std::string* event_type);

  // string token = 3;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // uint32 limit = 2;
  void clear_limit();
  static const int kLimitFieldNumber = 2;
  ::google::protobuf::uint32 limit() const;
  void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:flyteidl.event.EventTargetListRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr event_type_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::uint32 limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fsensor_2eproto;
};
// -------------------------------------------------------------------

class EventTargetList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.EventTargetList) */ {
 public:
  EventTargetList();
  virtual ~EventTargetList();

  EventTargetList(const EventTargetList& from);

  inline EventTargetList& operator=(const EventTargetList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventTargetList(EventTargetList&& from) noexcept
    : EventTargetList() {
    *this = ::std::move(from);
  }

  inline EventTargetList& operator=(EventTargetList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EventTargetList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventTargetList* internal_default_instance() {
    return reinterpret_cast<const EventTargetList*>(
               &_EventTargetList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(EventTargetList* other);
  friend void swap(EventTargetList& a, EventTargetList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventTargetList* New() const final {
    return CreateMaybeMessage<EventTargetList>(nullptr);
  }

  EventTargetList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventTargetList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventTargetList& from);
  void MergeFrom(const EventTargetList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventTargetList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.event.EventTarget event_targets = 1;
  int event_targets_size() const;
  void clear_event_targets();
  static const int kEventTargetsFieldNumber = 1;
  ::flyteidl::event::EventTarget* mutable_event_targets(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::event::EventTarget >*
      mutable_event_targets();
  const ::flyteidl::event::EventTarget& event_targets(int index) const;
  ::flyteidl::event::EventTarget* add_event_targets();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::event::EventTarget >&
      event_targets() const;

  // string token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:flyteidl.event.EventTargetList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::event::EventTarget > event_targets_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fsensor_2eproto;
};
// -------------------------------------------------------------------

class EventOccurredRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.EventOccurredRequest) */ {
 public:
  EventOccurredRequest();
  virtual ~EventOccurredRequest();

  EventOccurredRequest(const EventOccurredRequest& from);

  inline EventOccurredRequest& operator=(const EventOccurredRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventOccurredRequest(EventOccurredRequest&& from) noexcept
    : EventOccurredRequest() {
    *this = ::std::move(from);
  }

  inline EventOccurredRequest& operator=(EventOccurredRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EventOccurredRequest& default_instance();

  enum TargetCase {
    kExecutionCreateRequest = 1,
    TARGET_NOT_SET = 0,
  };

  enum ReferenceCase {
    kLaunchPlan = 2,
    REFERENCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventOccurredRequest* internal_default_instance() {
    return reinterpret_cast<const EventOccurredRequest*>(
               &_EventOccurredRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(EventOccurredRequest* other);
  friend void swap(EventOccurredRequest& a, EventOccurredRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventOccurredRequest* New() const final {
    return CreateMaybeMessage<EventOccurredRequest>(nullptr);
  }

  EventOccurredRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventOccurredRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventOccurredRequest& from);
  void MergeFrom(const EventOccurredRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventOccurredRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.ExecutionCreateRequest execution_create_request = 1;
  bool has_execution_create_request() const;
  void clear_execution_create_request();
  static const int kExecutionCreateRequestFieldNumber = 1;
  const ::flyteidl::admin::ExecutionCreateRequest& execution_create_request() const;
  ::flyteidl::admin::ExecutionCreateRequest* release_execution_create_request();
  ::flyteidl::admin::ExecutionCreateRequest* mutable_execution_create_request();
  void set_allocated_execution_create_request(::flyteidl::admin::ExecutionCreateRequest* execution_create_request);

  // .flyteidl.core.Identifier launch_plan = 2;
  bool has_launch_plan() const;
  void clear_launch_plan();
  static const int kLaunchPlanFieldNumber = 2;
  const ::flyteidl::core::Identifier& launch_plan() const;
  ::flyteidl::core::Identifier* release_launch_plan();
  ::flyteidl::core::Identifier* mutable_launch_plan();
  void set_allocated_launch_plan(::flyteidl::core::Identifier* launch_plan);

  void clear_target();
  TargetCase target_case() const;
  void clear_reference();
  ReferenceCase reference_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.event.EventOccurredRequest)
 private:
  class HasBitSetters;
  void set_has_execution_create_request();
  void set_has_launch_plan();

  inline bool has_target() const;
  inline void clear_has_target();

  inline bool has_reference() const;
  inline void clear_has_reference();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TargetUnion {
    TargetUnion() {}
    ::flyteidl::admin::ExecutionCreateRequest* execution_create_request_;
  } target_;
  union ReferenceUnion {
    ReferenceUnion() {}
    ::flyteidl::core::Identifier* launch_plan_;
  } reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct ::TableStruct_flyteidl_2fevent_2fsensor_2eproto;
};
// -------------------------------------------------------------------

class EventOccurredResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.EventOccurredResponse) */ {
 public:
  EventOccurredResponse();
  virtual ~EventOccurredResponse();

  EventOccurredResponse(const EventOccurredResponse& from);

  inline EventOccurredResponse& operator=(const EventOccurredResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventOccurredResponse(EventOccurredResponse&& from) noexcept
    : EventOccurredResponse() {
    *this = ::std::move(from);
  }

  inline EventOccurredResponse& operator=(EventOccurredResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EventOccurredResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventOccurredResponse* internal_default_instance() {
    return reinterpret_cast<const EventOccurredResponse*>(
               &_EventOccurredResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(EventOccurredResponse* other);
  friend void swap(EventOccurredResponse& a, EventOccurredResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventOccurredResponse* New() const final {
    return CreateMaybeMessage<EventOccurredResponse>(nullptr);
  }

  EventOccurredResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventOccurredResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventOccurredResponse& from);
  void MergeFrom(const EventOccurredResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventOccurredResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.event.EventOccurredResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fsensor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkflowEvent

// .flyteidl.core.Identifier execution_identifier = 1;
inline bool WorkflowEvent::has_execution_identifier() const {
  return id_case() == kExecutionIdentifier;
}
inline void WorkflowEvent::set_has_execution_identifier() {
  _oneof_case_[0] = kExecutionIdentifier;
}
inline ::flyteidl::core::Identifier* WorkflowEvent::release_execution_identifier() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowEvent.execution_identifier)
  if (has_execution_identifier()) {
    clear_has_id();
      ::flyteidl::core::Identifier* temp = id_.execution_identifier_;
    id_.execution_identifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::Identifier& WorkflowEvent::execution_identifier() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowEvent.execution_identifier)
  return has_execution_identifier()
      ? *id_.execution_identifier_
      : *reinterpret_cast< ::flyteidl::core::Identifier*>(&::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* WorkflowEvent::mutable_execution_identifier() {
  if (!has_execution_identifier()) {
    clear_id();
    set_has_execution_identifier();
    id_.execution_identifier_ = CreateMaybeMessage< ::flyteidl::core::Identifier >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowEvent.execution_identifier)
  return id_.execution_identifier_;
}

// .flyteidl.core.NamedEntityIdentifier named_entity_identifier = 2;
inline bool WorkflowEvent::has_named_entity_identifier() const {
  return id_case() == kNamedEntityIdentifier;
}
inline void WorkflowEvent::set_has_named_entity_identifier() {
  _oneof_case_[0] = kNamedEntityIdentifier;
}
inline ::flyteidl::core::NamedEntityIdentifier* WorkflowEvent::release_named_entity_identifier() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowEvent.named_entity_identifier)
  if (has_named_entity_identifier()) {
    clear_has_id();
      ::flyteidl::core::NamedEntityIdentifier* temp = id_.named_entity_identifier_;
    id_.named_entity_identifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::NamedEntityIdentifier& WorkflowEvent::named_entity_identifier() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowEvent.named_entity_identifier)
  return has_named_entity_identifier()
      ? *id_.named_entity_identifier_
      : *reinterpret_cast< ::flyteidl::core::NamedEntityIdentifier*>(&::flyteidl::core::_NamedEntityIdentifier_default_instance_);
}
inline ::flyteidl::core::NamedEntityIdentifier* WorkflowEvent::mutable_named_entity_identifier() {
  if (!has_named_entity_identifier()) {
    clear_id();
    set_has_named_entity_identifier();
    id_.named_entity_identifier_ = CreateMaybeMessage< ::flyteidl::core::NamedEntityIdentifier >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowEvent.named_entity_identifier)
  return id_.named_entity_identifier_;
}

// repeated .flyteidl.core.WorkflowExecution.Phase phases = 3;
inline int WorkflowEvent::phases_size() const {
  return phases_.size();
}
inline void WorkflowEvent::clear_phases() {
  phases_.Clear();
}
inline ::flyteidl::core::WorkflowExecution_Phase WorkflowEvent::phases(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowEvent.phases)
  return static_cast< ::flyteidl::core::WorkflowExecution_Phase >(phases_.Get(index));
}
inline void WorkflowEvent::set_phases(int index, ::flyteidl::core::WorkflowExecution_Phase value) {
  phases_.Set(index, value);
  // @@protoc_insertion_point(field_set:flyteidl.event.WorkflowEvent.phases)
}
inline void WorkflowEvent::add_phases(::flyteidl::core::WorkflowExecution_Phase value) {
  phases_.Add(value);
  // @@protoc_insertion_point(field_add:flyteidl.event.WorkflowEvent.phases)
}
inline const ::google::protobuf::RepeatedField<int>&
WorkflowEvent::phases() const {
  // @@protoc_insertion_point(field_list:flyteidl.event.WorkflowEvent.phases)
  return phases_;
}
inline ::google::protobuf::RepeatedField<int>*
WorkflowEvent::mutable_phases() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.event.WorkflowEvent.phases)
  return &phases_;
}

inline bool WorkflowEvent::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void WorkflowEvent::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline WorkflowEvent::IdCase WorkflowEvent::id_case() const {
  return WorkflowEvent::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FilePrefix

// string prefix = 1;
inline void FilePrefix::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FilePrefix::prefix() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.FilePrefix.prefix)
  return prefix_.GetNoArena();
}
inline void FilePrefix::set_prefix(const ::std::string& value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.FilePrefix.prefix)
}
#if LANG_CXX11
inline void FilePrefix::set_prefix(::std::string&& value) {
  
  prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.FilePrefix.prefix)
}
#endif
inline void FilePrefix::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.FilePrefix.prefix)
}
inline void FilePrefix::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.FilePrefix.prefix)
}
inline ::std::string* FilePrefix::mutable_prefix() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.FilePrefix.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FilePrefix::release_prefix() {
  // @@protoc_insertion_point(field_release:flyteidl.event.FilePrefix.prefix)
  
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilePrefix::set_allocated_prefix(::std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.FilePrefix.prefix)
}

// string pattern = 2;
inline void FilePrefix::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FilePrefix::pattern() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.FilePrefix.pattern)
  return pattern_.GetNoArena();
}
inline void FilePrefix::set_pattern(const ::std::string& value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.FilePrefix.pattern)
}
#if LANG_CXX11
inline void FilePrefix::set_pattern(::std::string&& value) {
  
  pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.FilePrefix.pattern)
}
#endif
inline void FilePrefix::set_pattern(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.FilePrefix.pattern)
}
inline void FilePrefix::set_pattern(const char* value, size_t size) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.FilePrefix.pattern)
}
inline ::std::string* FilePrefix::mutable_pattern() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.FilePrefix.pattern)
  return pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FilePrefix::release_pattern() {
  // @@protoc_insertion_point(field_release:flyteidl.event.FilePrefix.pattern)
  
  return pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilePrefix::set_allocated_pattern(::std::string* pattern) {
  if (pattern != nullptr) {
    
  } else {
    
  }
  pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.FilePrefix.pattern)
}

// -------------------------------------------------------------------

// RemoteFileEvent

// string path = 1;
inline bool RemoteFileEvent::has_path() const {
  return file_case() == kPath;
}
inline void RemoteFileEvent::set_has_path() {
  _oneof_case_[0] = kPath;
}
inline void RemoteFileEvent::clear_path() {
  if (has_path()) {
    file_.path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_file();
  }
}
inline const ::std::string& RemoteFileEvent::path() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.RemoteFileEvent.path)
  if (has_path()) {
    return file_.path_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void RemoteFileEvent::set_path(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.RemoteFileEvent.path)
  if (!has_path()) {
    clear_file();
    set_has_path();
    file_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  file_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.RemoteFileEvent.path)
}
#if LANG_CXX11
inline void RemoteFileEvent::set_path(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.RemoteFileEvent.path)
  if (!has_path()) {
    clear_file();
    set_has_path();
    file_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  file_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.RemoteFileEvent.path)
}
#endif
inline void RemoteFileEvent::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_path()) {
    clear_file();
    set_has_path();
    file_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  file_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.RemoteFileEvent.path)
}
inline void RemoteFileEvent::set_path(const char* value, size_t size) {
  if (!has_path()) {
    clear_file();
    set_has_path();
    file_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  file_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.RemoteFileEvent.path)
}
inline ::std::string* RemoteFileEvent::mutable_path() {
  if (!has_path()) {
    clear_file();
    set_has_path();
    file_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.RemoteFileEvent.path)
  return file_.path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoteFileEvent::release_path() {
  // @@protoc_insertion_point(field_release:flyteidl.event.RemoteFileEvent.path)
  if (has_path()) {
    clear_has_file();
    return file_.path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void RemoteFileEvent::set_allocated_path(::std::string* path) {
  if (has_file()) {
    clear_file();
  }
  if (path != nullptr) {
    set_has_path();
    file_.path_.UnsafeSetDefault(path);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.RemoteFileEvent.path)
}

// .flyteidl.event.FilePrefix prefix = 2;
inline bool RemoteFileEvent::has_prefix() const {
  return file_case() == kPrefix;
}
inline void RemoteFileEvent::set_has_prefix() {
  _oneof_case_[0] = kPrefix;
}
inline void RemoteFileEvent::clear_prefix() {
  if (has_prefix()) {
    delete file_.prefix_;
    clear_has_file();
  }
}
inline ::flyteidl::event::FilePrefix* RemoteFileEvent::release_prefix() {
  // @@protoc_insertion_point(field_release:flyteidl.event.RemoteFileEvent.prefix)
  if (has_prefix()) {
    clear_has_file();
      ::flyteidl::event::FilePrefix* temp = file_.prefix_;
    file_.prefix_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::event::FilePrefix& RemoteFileEvent::prefix() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.RemoteFileEvent.prefix)
  return has_prefix()
      ? *file_.prefix_
      : *reinterpret_cast< ::flyteidl::event::FilePrefix*>(&::flyteidl::event::_FilePrefix_default_instance_);
}
inline ::flyteidl::event::FilePrefix* RemoteFileEvent::mutable_prefix() {
  if (!has_prefix()) {
    clear_file();
    set_has_prefix();
    file_.prefix_ = CreateMaybeMessage< ::flyteidl::event::FilePrefix >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.RemoteFileEvent.prefix)
  return file_.prefix_;
}

// .flyteidl.event.RemoteFileEvent.Action action = 3;
inline void RemoteFileEvent::clear_action() {
  action_ = 0;
}
inline ::flyteidl::event::RemoteFileEvent_Action RemoteFileEvent::action() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.RemoteFileEvent.action)
  return static_cast< ::flyteidl::event::RemoteFileEvent_Action >(action_);
}
inline void RemoteFileEvent::set_action(::flyteidl::event::RemoteFileEvent_Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.RemoteFileEvent.action)
}

inline bool RemoteFileEvent::has_file() const {
  return file_case() != FILE_NOT_SET;
}
inline void RemoteFileEvent::clear_has_file() {
  _oneof_case_[0] = FILE_NOT_SET;
}
inline RemoteFileEvent::FileCase RemoteFileEvent::file_case() const {
  return RemoteFileEvent::FileCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CustomEvent

// string target_type = 1;
inline void CustomEvent::clear_target_type() {
  target_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomEvent::target_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.CustomEvent.target_type)
  return target_type_.GetNoArena();
}
inline void CustomEvent::set_target_type(const ::std::string& value) {
  
  target_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.CustomEvent.target_type)
}
#if LANG_CXX11
inline void CustomEvent::set_target_type(::std::string&& value) {
  
  target_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.CustomEvent.target_type)
}
#endif
inline void CustomEvent::set_target_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.CustomEvent.target_type)
}
inline void CustomEvent::set_target_type(const char* value, size_t size) {
  
  target_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.CustomEvent.target_type)
}
inline ::std::string* CustomEvent::mutable_target_type() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CustomEvent.target_type)
  return target_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomEvent::release_target_type() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CustomEvent.target_type)
  
  return target_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomEvent::set_allocated_target_type(::std::string* target_type) {
  if (target_type != nullptr) {
    
  } else {
    
  }
  target_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_type);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CustomEvent.target_type)
}

// .google.protobuf.Struct custom_info = 2;
inline bool CustomEvent::has_custom_info() const {
  return this != internal_default_instance() && custom_info_ != nullptr;
}
inline const ::google::protobuf::Struct& CustomEvent::custom_info() const {
  const ::google::protobuf::Struct* p = custom_info_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CustomEvent.custom_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* CustomEvent::release_custom_info() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CustomEvent.custom_info)
  
  ::google::protobuf::Struct* temp = custom_info_;
  custom_info_ = nullptr;
  return temp;
}
inline ::google::protobuf::Struct* CustomEvent::mutable_custom_info() {
  
  if (custom_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    custom_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CustomEvent.custom_info)
  return custom_info_;
}
inline void CustomEvent::set_allocated_custom_info(::google::protobuf::Struct* custom_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(custom_info_);
  }
  if (custom_info) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(custom_info)->GetArena();
    if (message_arena != submessage_arena) {
      custom_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom_info, submessage_arena);
    }
    
  } else {
    
  }
  custom_info_ = custom_info;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CustomEvent.custom_info)
}

// -------------------------------------------------------------------

// EventTarget

// .flyteidl.event.WorkflowEvent workflow_event = 1;
inline bool EventTarget::has_workflow_event() const {
  return event_case() == kWorkflowEvent;
}
inline void EventTarget::set_has_workflow_event() {
  _oneof_case_[0] = kWorkflowEvent;
}
inline void EventTarget::clear_workflow_event() {
  if (has_workflow_event()) {
    delete event_.workflow_event_;
    clear_has_event();
  }
}
inline ::flyteidl::event::WorkflowEvent* EventTarget::release_workflow_event() {
  // @@protoc_insertion_point(field_release:flyteidl.event.EventTarget.workflow_event)
  if (has_workflow_event()) {
    clear_has_event();
      ::flyteidl::event::WorkflowEvent* temp = event_.workflow_event_;
    event_.workflow_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::event::WorkflowEvent& EventTarget::workflow_event() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.EventTarget.workflow_event)
  return has_workflow_event()
      ? *event_.workflow_event_
      : *reinterpret_cast< ::flyteidl::event::WorkflowEvent*>(&::flyteidl::event::_WorkflowEvent_default_instance_);
}
inline ::flyteidl::event::WorkflowEvent* EventTarget::mutable_workflow_event() {
  if (!has_workflow_event()) {
    clear_event();
    set_has_workflow_event();
    event_.workflow_event_ = CreateMaybeMessage< ::flyteidl::event::WorkflowEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.EventTarget.workflow_event)
  return event_.workflow_event_;
}

// .flyteidl.event.RemoteFileEvent remote_file_event = 2;
inline bool EventTarget::has_remote_file_event() const {
  return event_case() == kRemoteFileEvent;
}
inline void EventTarget::set_has_remote_file_event() {
  _oneof_case_[0] = kRemoteFileEvent;
}
inline void EventTarget::clear_remote_file_event() {
  if (has_remote_file_event()) {
    delete event_.remote_file_event_;
    clear_has_event();
  }
}
inline ::flyteidl::event::RemoteFileEvent* EventTarget::release_remote_file_event() {
  // @@protoc_insertion_point(field_release:flyteidl.event.EventTarget.remote_file_event)
  if (has_remote_file_event()) {
    clear_has_event();
      ::flyteidl::event::RemoteFileEvent* temp = event_.remote_file_event_;
    event_.remote_file_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::event::RemoteFileEvent& EventTarget::remote_file_event() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.EventTarget.remote_file_event)
  return has_remote_file_event()
      ? *event_.remote_file_event_
      : *reinterpret_cast< ::flyteidl::event::RemoteFileEvent*>(&::flyteidl::event::_RemoteFileEvent_default_instance_);
}
inline ::flyteidl::event::RemoteFileEvent* EventTarget::mutable_remote_file_event() {
  if (!has_remote_file_event()) {
    clear_event();
    set_has_remote_file_event();
    event_.remote_file_event_ = CreateMaybeMessage< ::flyteidl::event::RemoteFileEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.EventTarget.remote_file_event)
  return event_.remote_file_event_;
}

// .flyteidl.event.CustomEvent custom_event = 16;
inline bool EventTarget::has_custom_event() const {
  return event_case() == kCustomEvent;
}
inline void EventTarget::set_has_custom_event() {
  _oneof_case_[0] = kCustomEvent;
}
inline void EventTarget::clear_custom_event() {
  if (has_custom_event()) {
    delete event_.custom_event_;
    clear_has_event();
  }
}
inline ::flyteidl::event::CustomEvent* EventTarget::release_custom_event() {
  // @@protoc_insertion_point(field_release:flyteidl.event.EventTarget.custom_event)
  if (has_custom_event()) {
    clear_has_event();
      ::flyteidl::event::CustomEvent* temp = event_.custom_event_;
    event_.custom_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::event::CustomEvent& EventTarget::custom_event() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.EventTarget.custom_event)
  return has_custom_event()
      ? *event_.custom_event_
      : *reinterpret_cast< ::flyteidl::event::CustomEvent*>(&::flyteidl::event::_CustomEvent_default_instance_);
}
inline ::flyteidl::event::CustomEvent* EventTarget::mutable_custom_event() {
  if (!has_custom_event()) {
    clear_event();
    set_has_custom_event();
    event_.custom_event_ = CreateMaybeMessage< ::flyteidl::event::CustomEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.EventTarget.custom_event)
  return event_.custom_event_;
}

// .flyteidl.core.Identifier launch_plan = 3;
inline bool EventTarget::has_launch_plan() const {
  return target_case() == kLaunchPlan;
}
inline void EventTarget::set_has_launch_plan() {
  _oneof_case_[1] = kLaunchPlan;
}
inline ::flyteidl::core::Identifier* EventTarget::release_launch_plan() {
  // @@protoc_insertion_point(field_release:flyteidl.event.EventTarget.launch_plan)
  if (has_launch_plan()) {
    clear_has_target();
      ::flyteidl::core::Identifier* temp = target_.launch_plan_;
    target_.launch_plan_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::Identifier& EventTarget::launch_plan() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.EventTarget.launch_plan)
  return has_launch_plan()
      ? *target_.launch_plan_
      : *reinterpret_cast< ::flyteidl::core::Identifier*>(&::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* EventTarget::mutable_launch_plan() {
  if (!has_launch_plan()) {
    clear_target();
    set_has_launch_plan();
    target_.launch_plan_ = CreateMaybeMessage< ::flyteidl::core::Identifier >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.EventTarget.launch_plan)
  return target_.launch_plan_;
}

// .google.protobuf.Duration event_timeout = 4;
inline bool EventTarget::has_event_timeout() const {
  return this != internal_default_instance() && event_timeout_ != nullptr;
}
inline const ::google::protobuf::Duration& EventTarget::event_timeout() const {
  const ::google::protobuf::Duration* p = event_timeout_;
  // @@protoc_insertion_point(field_get:flyteidl.event.EventTarget.event_timeout)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* EventTarget::release_event_timeout() {
  // @@protoc_insertion_point(field_release:flyteidl.event.EventTarget.event_timeout)
  
  ::google::protobuf::Duration* temp = event_timeout_;
  event_timeout_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* EventTarget::mutable_event_timeout() {
  
  if (event_timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    event_timeout_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.EventTarget.event_timeout)
  return event_timeout_;
}
inline void EventTarget::set_allocated_event_timeout(::google::protobuf::Duration* event_timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(event_timeout_);
  }
  if (event_timeout) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(event_timeout)->GetArena();
    if (message_arena != submessage_arena) {
      event_timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event_timeout, submessage_arena);
    }
    
  } else {
    
  }
  event_timeout_ = event_timeout;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.EventTarget.event_timeout)
}

// string event_trigger_arg = 5;
inline void EventTarget::clear_event_trigger_arg() {
  event_trigger_arg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventTarget::event_trigger_arg() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.EventTarget.event_trigger_arg)
  return event_trigger_arg_.GetNoArena();
}
inline void EventTarget::set_event_trigger_arg(const ::std::string& value) {
  
  event_trigger_arg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.EventTarget.event_trigger_arg)
}
#if LANG_CXX11
inline void EventTarget::set_event_trigger_arg(::std::string&& value) {
  
  event_trigger_arg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.EventTarget.event_trigger_arg)
}
#endif
inline void EventTarget::set_event_trigger_arg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_trigger_arg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.EventTarget.event_trigger_arg)
}
inline void EventTarget::set_event_trigger_arg(const char* value, size_t size) {
  
  event_trigger_arg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.EventTarget.event_trigger_arg)
}
inline ::std::string* EventTarget::mutable_event_trigger_arg() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.EventTarget.event_trigger_arg)
  return event_trigger_arg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventTarget::release_event_trigger_arg() {
  // @@protoc_insertion_point(field_release:flyteidl.event.EventTarget.event_trigger_arg)
  
  return event_trigger_arg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventTarget::set_allocated_event_trigger_arg(::std::string* event_trigger_arg) {
  if (event_trigger_arg != nullptr) {
    
  } else {
    
  }
  event_trigger_arg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_trigger_arg);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.EventTarget.event_trigger_arg)
}

inline bool EventTarget::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void EventTarget::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline bool EventTarget::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void EventTarget::clear_has_target() {
  _oneof_case_[1] = TARGET_NOT_SET;
}
inline EventTarget::EventCase EventTarget::event_case() const {
  return EventTarget::EventCase(_oneof_case_[0]);
}
inline EventTarget::TargetCase EventTarget::target_case() const {
  return EventTarget::TargetCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// EventTargetListRequest

// string event_type = 1;
inline void EventTargetListRequest::clear_event_type() {
  event_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventTargetListRequest::event_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.EventTargetListRequest.event_type)
  return event_type_.GetNoArena();
}
inline void EventTargetListRequest::set_event_type(const ::std::string& value) {
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.EventTargetListRequest.event_type)
}
#if LANG_CXX11
inline void EventTargetListRequest::set_event_type(::std::string&& value) {
  
  event_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.EventTargetListRequest.event_type)
}
#endif
inline void EventTargetListRequest::set_event_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.EventTargetListRequest.event_type)
}
inline void EventTargetListRequest::set_event_type(const char* value, size_t size) {
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.EventTargetListRequest.event_type)
}
inline ::std::string* EventTargetListRequest::mutable_event_type() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.EventTargetListRequest.event_type)
  return event_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventTargetListRequest::release_event_type() {
  // @@protoc_insertion_point(field_release:flyteidl.event.EventTargetListRequest.event_type)
  
  return event_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventTargetListRequest::set_allocated_event_type(::std::string* event_type) {
  if (event_type != nullptr) {
    
  } else {
    
  }
  event_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_type);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.EventTargetListRequest.event_type)
}

// uint32 limit = 2;
inline void EventTargetListRequest::clear_limit() {
  limit_ = 0u;
}
inline ::google::protobuf::uint32 EventTargetListRequest::limit() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.EventTargetListRequest.limit)
  return limit_;
}
inline void EventTargetListRequest::set_limit(::google::protobuf::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.EventTargetListRequest.limit)
}

// string token = 3;
inline void EventTargetListRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventTargetListRequest::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.EventTargetListRequest.token)
  return token_.GetNoArena();
}
inline void EventTargetListRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.EventTargetListRequest.token)
}
#if LANG_CXX11
inline void EventTargetListRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.EventTargetListRequest.token)
}
#endif
inline void EventTargetListRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.EventTargetListRequest.token)
}
inline void EventTargetListRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.EventTargetListRequest.token)
}
inline ::std::string* EventTargetListRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.EventTargetListRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventTargetListRequest::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.event.EventTargetListRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventTargetListRequest::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.EventTargetListRequest.token)
}

// -------------------------------------------------------------------

// EventTargetList

// repeated .flyteidl.event.EventTarget event_targets = 1;
inline int EventTargetList::event_targets_size() const {
  return event_targets_.size();
}
inline void EventTargetList::clear_event_targets() {
  event_targets_.Clear();
}
inline ::flyteidl::event::EventTarget* EventTargetList::mutable_event_targets(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.event.EventTargetList.event_targets)
  return event_targets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::event::EventTarget >*
EventTargetList::mutable_event_targets() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.event.EventTargetList.event_targets)
  return &event_targets_;
}
inline const ::flyteidl::event::EventTarget& EventTargetList::event_targets(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.event.EventTargetList.event_targets)
  return event_targets_.Get(index);
}
inline ::flyteidl::event::EventTarget* EventTargetList::add_event_targets() {
  // @@protoc_insertion_point(field_add:flyteidl.event.EventTargetList.event_targets)
  return event_targets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::event::EventTarget >&
EventTargetList::event_targets() const {
  // @@protoc_insertion_point(field_list:flyteidl.event.EventTargetList.event_targets)
  return event_targets_;
}

// string token = 2;
inline void EventTargetList::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventTargetList::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.EventTargetList.token)
  return token_.GetNoArena();
}
inline void EventTargetList::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.EventTargetList.token)
}
#if LANG_CXX11
inline void EventTargetList::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.EventTargetList.token)
}
#endif
inline void EventTargetList::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.EventTargetList.token)
}
inline void EventTargetList::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.EventTargetList.token)
}
inline ::std::string* EventTargetList::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.EventTargetList.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventTargetList::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.event.EventTargetList.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventTargetList::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.EventTargetList.token)
}

// -------------------------------------------------------------------

// EventOccurredRequest

// .flyteidl.admin.ExecutionCreateRequest execution_create_request = 1;
inline bool EventOccurredRequest::has_execution_create_request() const {
  return target_case() == kExecutionCreateRequest;
}
inline void EventOccurredRequest::set_has_execution_create_request() {
  _oneof_case_[0] = kExecutionCreateRequest;
}
inline ::flyteidl::admin::ExecutionCreateRequest* EventOccurredRequest::release_execution_create_request() {
  // @@protoc_insertion_point(field_release:flyteidl.event.EventOccurredRequest.execution_create_request)
  if (has_execution_create_request()) {
    clear_has_target();
      ::flyteidl::admin::ExecutionCreateRequest* temp = target_.execution_create_request_;
    target_.execution_create_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::ExecutionCreateRequest& EventOccurredRequest::execution_create_request() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.EventOccurredRequest.execution_create_request)
  return has_execution_create_request()
      ? *target_.execution_create_request_
      : *reinterpret_cast< ::flyteidl::admin::ExecutionCreateRequest*>(&::flyteidl::admin::_ExecutionCreateRequest_default_instance_);
}
inline ::flyteidl::admin::ExecutionCreateRequest* EventOccurredRequest::mutable_execution_create_request() {
  if (!has_execution_create_request()) {
    clear_target();
    set_has_execution_create_request();
    target_.execution_create_request_ = CreateMaybeMessage< ::flyteidl::admin::ExecutionCreateRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.EventOccurredRequest.execution_create_request)
  return target_.execution_create_request_;
}

// .flyteidl.core.Identifier launch_plan = 2;
inline bool EventOccurredRequest::has_launch_plan() const {
  return reference_case() == kLaunchPlan;
}
inline void EventOccurredRequest::set_has_launch_plan() {
  _oneof_case_[1] = kLaunchPlan;
}
inline ::flyteidl::core::Identifier* EventOccurredRequest::release_launch_plan() {
  // @@protoc_insertion_point(field_release:flyteidl.event.EventOccurredRequest.launch_plan)
  if (has_launch_plan()) {
    clear_has_reference();
      ::flyteidl::core::Identifier* temp = reference_.launch_plan_;
    reference_.launch_plan_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::Identifier& EventOccurredRequest::launch_plan() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.EventOccurredRequest.launch_plan)
  return has_launch_plan()
      ? *reference_.launch_plan_
      : *reinterpret_cast< ::flyteidl::core::Identifier*>(&::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* EventOccurredRequest::mutable_launch_plan() {
  if (!has_launch_plan()) {
    clear_reference();
    set_has_launch_plan();
    reference_.launch_plan_ = CreateMaybeMessage< ::flyteidl::core::Identifier >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.EventOccurredRequest.launch_plan)
  return reference_.launch_plan_;
}

inline bool EventOccurredRequest::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void EventOccurredRequest::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline bool EventOccurredRequest::has_reference() const {
  return reference_case() != REFERENCE_NOT_SET;
}
inline void EventOccurredRequest::clear_has_reference() {
  _oneof_case_[1] = REFERENCE_NOT_SET;
}
inline EventOccurredRequest::TargetCase EventOccurredRequest::target_case() const {
  return EventOccurredRequest::TargetCase(_oneof_case_[0]);
}
inline EventOccurredRequest::ReferenceCase EventOccurredRequest::reference_case() const {
  return EventOccurredRequest::ReferenceCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// EventOccurredResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace event
}  // namespace flyteidl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flyteidl::event::RemoteFileEvent_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::event::RemoteFileEvent_Action>() {
  return ::flyteidl::event::RemoteFileEvent_Action_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fevent_2fsensor_2eproto
