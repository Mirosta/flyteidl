// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/event/sensor_state.proto

#include "flyteidl/event/sensor_state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fevent_2fsensor_5fstate_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EventSensorState_flyteidl_2fevent_2fsensor_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace flyteidl {
namespace event {
class EventSensorStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EventSensorState> _instance;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  const ::google::protobuf::Struct* custom_info_;
} _EventSensorState_default_instance_;
class EventSensorStateGetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EventSensorStateGetRequest> _instance;
} _EventSensorStateGetRequest_default_instance_;
class EventSensorStateGetResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EventSensorStateGetResponse> _instance;
} _EventSensorStateGetResponse_default_instance_;
class EventSensorStateUpdateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EventSensorStateUpdateRequest> _instance;
} _EventSensorStateUpdateRequest_default_instance_;
class EventSensorStateUpdateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EventSensorStateUpdateResponse> _instance;
} _EventSensorStateUpdateResponse_default_instance_;
}  // namespace event
}  // namespace flyteidl
static void InitDefaultsEventSensorState_flyteidl_2fevent_2fsensor_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::event::_EventSensorState_default_instance_;
    new (ptr) ::flyteidl::event::EventSensorState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::EventSensorState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EventSensorState_flyteidl_2fevent_2fsensor_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEventSensorState_flyteidl_2fevent_2fsensor_5fstate_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsEventSensorStateGetRequest_flyteidl_2fevent_2fsensor_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::event::_EventSensorStateGetRequest_default_instance_;
    new (ptr) ::flyteidl::event::EventSensorStateGetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::EventSensorStateGetRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EventSensorStateGetRequest_flyteidl_2fevent_2fsensor_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEventSensorStateGetRequest_flyteidl_2fevent_2fsensor_5fstate_2eproto}, {}};

static void InitDefaultsEventSensorStateGetResponse_flyteidl_2fevent_2fsensor_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::event::_EventSensorStateGetResponse_default_instance_;
    new (ptr) ::flyteidl::event::EventSensorStateGetResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::EventSensorStateGetResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_EventSensorStateGetResponse_flyteidl_2fevent_2fsensor_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsEventSensorStateGetResponse_flyteidl_2fevent_2fsensor_5fstate_2eproto}, {
      &scc_info_EventSensorState_flyteidl_2fevent_2fsensor_5fstate_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsEventSensorStateUpdateRequest_flyteidl_2fevent_2fsensor_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::event::_EventSensorStateUpdateRequest_default_instance_;
    new (ptr) ::flyteidl::event::EventSensorStateUpdateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::EventSensorStateUpdateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_EventSensorStateUpdateRequest_flyteidl_2fevent_2fsensor_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsEventSensorStateUpdateRequest_flyteidl_2fevent_2fsensor_5fstate_2eproto}, {
      &scc_info_EventSensorState_flyteidl_2fevent_2fsensor_5fstate_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsEventSensorStateUpdateResponse_flyteidl_2fevent_2fsensor_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::event::_EventSensorStateUpdateResponse_default_instance_;
    new (ptr) ::flyteidl::event::EventSensorStateUpdateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::EventSensorStateUpdateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EventSensorStateUpdateResponse_flyteidl_2fevent_2fsensor_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEventSensorStateUpdateResponse_flyteidl_2fevent_2fsensor_5fstate_2eproto}, {}};

void InitDefaults_flyteidl_2fevent_2fsensor_5fstate_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_EventSensorState_flyteidl_2fevent_2fsensor_5fstate_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EventSensorStateGetRequest_flyteidl_2fevent_2fsensor_5fstate_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EventSensorStateGetResponse_flyteidl_2fevent_2fsensor_5fstate_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EventSensorStateUpdateRequest_flyteidl_2fevent_2fsensor_5fstate_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EventSensorStateUpdateResponse_flyteidl_2fevent_2fsensor_5fstate_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fevent_2fsensor_5fstate_2eproto[5];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fevent_2fsensor_5fstate_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fevent_2fsensor_5fstate_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fevent_2fsensor_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventSensorState, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventSensorState, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::event::EventSensorStateDefaultTypeInternal, uri_),
  offsetof(::flyteidl::event::EventSensorStateDefaultTypeInternal, custom_info_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventSensorState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventSensorStateGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventSensorStateGetRequest, event_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventSensorStateGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventSensorStateGetResponse, state_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventSensorStateGetResponse, updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventSensorStateUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventSensorStateUpdateRequest, event_type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventSensorStateUpdateRequest, state_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventSensorStateUpdateRequest, updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventSensorStateUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::event::EventSensorState)},
  { 8, -1, sizeof(::flyteidl::event::EventSensorStateGetRequest)},
  { 14, -1, sizeof(::flyteidl::event::EventSensorStateGetResponse)},
  { 21, -1, sizeof(::flyteidl::event::EventSensorStateUpdateRequest)},
  { 29, -1, sizeof(::flyteidl::event::EventSensorStateUpdateResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_EventSensorState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_EventSensorStateGetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_EventSensorStateGetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_EventSensorStateUpdateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_EventSensorStateUpdateResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fevent_2fsensor_5fstate_2eproto = {
  {}, AddDescriptors_flyteidl_2fevent_2fsensor_5fstate_2eproto, "flyteidl/event/sensor_state.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fevent_2fsensor_5fstate_2eproto::offsets,
  file_level_metadata_flyteidl_2fevent_2fsensor_5fstate_2eproto, 5, file_level_enum_descriptors_flyteidl_2fevent_2fsensor_5fstate_2eproto, file_level_service_descriptors_flyteidl_2fevent_2fsensor_5fstate_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fevent_2fsensor_5fstate_2eproto[] =
  "\n!flyteidl/event/sensor_state.proto\022\016fly"
  "teidl.event\032\034google/protobuf/struct.prot"
  "o\032\037google/protobuf/timestamp.proto\"Z\n\020Ev"
  "entSensorState\022\r\n\003uri\030\001 \001(\tH\000\022.\n\013custom_"
  "info\030\002 \001(\0132\027.google.protobuf.StructH\000B\007\n"
  "\005state\"0\n\032EventSensorStateGetRequest\022\022\n\n"
  "event_type\030\001 \001(\t\"~\n\033EventSensorStateGetR"
  "esponse\022/\n\005state\030\001 \001(\0132 .flyteidl.event."
  "EventSensorState\022.\n\nupdated_at\030\002 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\"\224\001\n\035EventSensor"
  "StateUpdateRequest\022\022\n\nevent_type\030\001 \001(\t\022/"
  "\n\005state\030\002 \001(\0132 .flyteidl.event.EventSens"
  "orState\022.\n\nupdated_at\030\003 \001(\0132\032.google.pro"
  "tobuf.Timestamp\" \n\036EventSensorStateUpdat"
  "eResponseB7Z5github.com/flyteorg/flyteid"
  "l/gen/pb-go/flyteidl/eventb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fevent_2fsensor_5fstate_2eproto = {
  false, InitDefaults_flyteidl_2fevent_2fsensor_5fstate_2eproto, 
  descriptor_table_protodef_flyteidl_2fevent_2fsensor_5fstate_2eproto,
  "flyteidl/event/sensor_state.proto", &assign_descriptors_table_flyteidl_2fevent_2fsensor_5fstate_2eproto, 634,
};

void AddDescriptors_flyteidl_2fevent_2fsensor_5fstate_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_google_2fprotobuf_2fstruct_2eproto,
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fevent_2fsensor_5fstate_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fevent_2fsensor_5fstate_2eproto = []() { AddDescriptors_flyteidl_2fevent_2fsensor_5fstate_2eproto(); return true; }();
namespace flyteidl {
namespace event {

// ===================================================================

void EventSensorState::InitAsDefaultInstance() {
  ::flyteidl::event::_EventSensorState_default_instance_.uri_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::flyteidl::event::_EventSensorState_default_instance_.custom_info_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
}
class EventSensorState::HasBitSetters {
 public:
  static const ::google::protobuf::Struct& custom_info(const EventSensorState* msg);
};

const ::google::protobuf::Struct&
EventSensorState::HasBitSetters::custom_info(const EventSensorState* msg) {
  return *msg->state_.custom_info_;
}
void EventSensorState::set_allocated_custom_info(::google::protobuf::Struct* custom_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_state();
  if (custom_info) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(custom_info)->GetArena();
    if (message_arena != submessage_arena) {
      custom_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom_info, submessage_arena);
    }
    set_has_custom_info();
    state_.custom_info_ = custom_info;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.EventSensorState.custom_info)
}
void EventSensorState::clear_custom_info() {
  if (has_custom_info()) {
    delete state_.custom_info_;
    clear_has_state();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventSensorState::kUriFieldNumber;
const int EventSensorState::kCustomInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventSensorState::EventSensorState()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.EventSensorState)
}
EventSensorState::EventSensorState(const EventSensorState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_state();
  switch (from.state_case()) {
    case kUri: {
      set_uri(from.uri());
      break;
    }
    case kCustomInfo: {
      mutable_custom_info()->::google::protobuf::Struct::MergeFrom(from.custom_info());
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.EventSensorState)
}

void EventSensorState::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EventSensorState_flyteidl_2fevent_2fsensor_5fstate_2eproto.base);
  clear_has_state();
}

EventSensorState::~EventSensorState() {
  // @@protoc_insertion_point(destructor:flyteidl.event.EventSensorState)
  SharedDtor();
}

void EventSensorState::SharedDtor() {
  if (has_state()) {
    clear_state();
  }
}

void EventSensorState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventSensorState& EventSensorState::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EventSensorState_flyteidl_2fevent_2fsensor_5fstate_2eproto.base);
  return *internal_default_instance();
}


void EventSensorState::clear_state() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.event.EventSensorState)
  switch (state_case()) {
    case kUri: {
      state_.uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kCustomInfo: {
      delete state_.custom_info_;
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STATE_NOT_SET;
}


void EventSensorState::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.EventSensorState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_state();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventSensorState::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EventSensorState*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string uri = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.event.EventSensorState.uri");
        object = msg->mutable_uri();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Struct custom_info = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Struct::_InternalParse;
        object = msg->mutable_custom_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventSensorState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.EventSensorState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.event.EventSensorState.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct custom_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.EventSensorState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.EventSensorState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventSensorState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.EventSensorState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.EventSensorState.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // .google.protobuf.Struct custom_info = 2;
  if (has_custom_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::custom_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.EventSensorState)
}

::google::protobuf::uint8* EventSensorState::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.EventSensorState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.EventSensorState.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // .google.protobuf.Struct custom_info = 2;
  if (has_custom_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::custom_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.EventSensorState)
  return target;
}

size_t EventSensorState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.EventSensorState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (state_case()) {
    // string uri = 1;
    case kUri: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
      break;
    }
    // .google.protobuf.Struct custom_info = 2;
    case kCustomInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *state_.custom_info_);
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventSensorState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.EventSensorState)
  GOOGLE_DCHECK_NE(&from, this);
  const EventSensorState* source =
      ::google::protobuf::DynamicCastToGenerated<EventSensorState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.EventSensorState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.EventSensorState)
    MergeFrom(*source);
  }
}

void EventSensorState::MergeFrom(const EventSensorState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.EventSensorState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.state_case()) {
    case kUri: {
      set_uri(from.uri());
      break;
    }
    case kCustomInfo: {
      mutable_custom_info()->::google::protobuf::Struct::MergeFrom(from.custom_info());
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
}

void EventSensorState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.EventSensorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventSensorState::CopyFrom(const EventSensorState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.EventSensorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSensorState::IsInitialized() const {
  return true;
}

void EventSensorState::Swap(EventSensorState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventSensorState::InternalSwap(EventSensorState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_, other->state_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata EventSensorState::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fevent_2fsensor_5fstate_2eproto);
  return ::file_level_metadata_flyteidl_2fevent_2fsensor_5fstate_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EventSensorStateGetRequest::InitAsDefaultInstance() {
}
class EventSensorStateGetRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventSensorStateGetRequest::kEventTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventSensorStateGetRequest::EventSensorStateGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.EventSensorStateGetRequest)
}
EventSensorStateGetRequest::EventSensorStateGetRequest(const EventSensorStateGetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.event_type().size() > 0) {
    event_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_type_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.EventSensorStateGetRequest)
}

void EventSensorStateGetRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EventSensorStateGetRequest_flyteidl_2fevent_2fsensor_5fstate_2eproto.base);
  event_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EventSensorStateGetRequest::~EventSensorStateGetRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.event.EventSensorStateGetRequest)
  SharedDtor();
}

void EventSensorStateGetRequest::SharedDtor() {
  event_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EventSensorStateGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventSensorStateGetRequest& EventSensorStateGetRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EventSensorStateGetRequest_flyteidl_2fevent_2fsensor_5fstate_2eproto.base);
  return *internal_default_instance();
}


void EventSensorStateGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.EventSensorStateGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventSensorStateGetRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EventSensorStateGetRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string event_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.event.EventSensorStateGetRequest.event_type");
        object = msg->mutable_event_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventSensorStateGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.EventSensorStateGetRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string event_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->event_type().data(), static_cast<int>(this->event_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.event.EventSensorStateGetRequest.event_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.EventSensorStateGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.EventSensorStateGetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventSensorStateGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.EventSensorStateGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_type = 1;
  if (this->event_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_type().data(), static_cast<int>(this->event_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.EventSensorStateGetRequest.event_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.EventSensorStateGetRequest)
}

::google::protobuf::uint8* EventSensorStateGetRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.EventSensorStateGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_type = 1;
  if (this->event_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_type().data(), static_cast<int>(this->event_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.EventSensorStateGetRequest.event_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.EventSensorStateGetRequest)
  return target;
}

size_t EventSensorStateGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.EventSensorStateGetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_type = 1;
  if (this->event_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventSensorStateGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.EventSensorStateGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EventSensorStateGetRequest* source =
      ::google::protobuf::DynamicCastToGenerated<EventSensorStateGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.EventSensorStateGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.EventSensorStateGetRequest)
    MergeFrom(*source);
  }
}

void EventSensorStateGetRequest::MergeFrom(const EventSensorStateGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.EventSensorStateGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_type().size() > 0) {

    event_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_type_);
  }
}

void EventSensorStateGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.EventSensorStateGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventSensorStateGetRequest::CopyFrom(const EventSensorStateGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.EventSensorStateGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSensorStateGetRequest::IsInitialized() const {
  return true;
}

void EventSensorStateGetRequest::Swap(EventSensorStateGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventSensorStateGetRequest::InternalSwap(EventSensorStateGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  event_type_.Swap(&other->event_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata EventSensorStateGetRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fevent_2fsensor_5fstate_2eproto);
  return ::file_level_metadata_flyteidl_2fevent_2fsensor_5fstate_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EventSensorStateGetResponse::InitAsDefaultInstance() {
  ::flyteidl::event::_EventSensorStateGetResponse_default_instance_._instance.get_mutable()->state_ = const_cast< ::flyteidl::event::EventSensorState*>(
      ::flyteidl::event::EventSensorState::internal_default_instance());
  ::flyteidl::event::_EventSensorStateGetResponse_default_instance_._instance.get_mutable()->updated_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class EventSensorStateGetResponse::HasBitSetters {
 public:
  static const ::flyteidl::event::EventSensorState& state(const EventSensorStateGetResponse* msg);
  static const ::google::protobuf::Timestamp& updated_at(const EventSensorStateGetResponse* msg);
};

const ::flyteidl::event::EventSensorState&
EventSensorStateGetResponse::HasBitSetters::state(const EventSensorStateGetResponse* msg) {
  return *msg->state_;
}
const ::google::protobuf::Timestamp&
EventSensorStateGetResponse::HasBitSetters::updated_at(const EventSensorStateGetResponse* msg) {
  return *msg->updated_at_;
}
void EventSensorStateGetResponse::clear_updated_at() {
  if (GetArenaNoVirtual() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventSensorStateGetResponse::kStateFieldNumber;
const int EventSensorStateGetResponse::kUpdatedAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventSensorStateGetResponse::EventSensorStateGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.EventSensorStateGetResponse)
}
EventSensorStateGetResponse::EventSensorStateGetResponse(const EventSensorStateGetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::flyteidl::event::EventSensorState(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from.has_updated_at()) {
    updated_at_ = new ::google::protobuf::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.EventSensorStateGetResponse)
}

void EventSensorStateGetResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EventSensorStateGetResponse_flyteidl_2fevent_2fsensor_5fstate_2eproto.base);
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&state_)) + sizeof(updated_at_));
}

EventSensorStateGetResponse::~EventSensorStateGetResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.event.EventSensorStateGetResponse)
  SharedDtor();
}

void EventSensorStateGetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete updated_at_;
}

void EventSensorStateGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventSensorStateGetResponse& EventSensorStateGetResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EventSensorStateGetResponse_flyteidl_2fevent_2fsensor_5fstate_2eproto.base);
  return *internal_default_instance();
}


void EventSensorStateGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.EventSensorStateGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventSensorStateGetResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EventSensorStateGetResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.event.EventSensorState state = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::event::EventSensorState::_InternalParse;
        object = msg->mutable_state();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp updated_at = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_updated_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventSensorStateGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.EventSensorStateGetResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.event.EventSensorState state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp updated_at = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_updated_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.EventSensorStateGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.EventSensorStateGetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventSensorStateGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.EventSensorStateGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.event.EventSensorState state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::state(this), output);
  }

  // .google.protobuf.Timestamp updated_at = 2;
  if (this->has_updated_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::updated_at(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.EventSensorStateGetResponse)
}

::google::protobuf::uint8* EventSensorStateGetResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.EventSensorStateGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.event.EventSensorState state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::state(this), target);
  }

  // .google.protobuf.Timestamp updated_at = 2;
  if (this->has_updated_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::updated_at(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.EventSensorStateGetResponse)
  return target;
}

size_t EventSensorStateGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.EventSensorStateGetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.event.EventSensorState state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .google.protobuf.Timestamp updated_at = 2;
  if (this->has_updated_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *updated_at_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventSensorStateGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.EventSensorStateGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EventSensorStateGetResponse* source =
      ::google::protobuf::DynamicCastToGenerated<EventSensorStateGetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.EventSensorStateGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.EventSensorStateGetResponse)
    MergeFrom(*source);
  }
}

void EventSensorStateGetResponse::MergeFrom(const EventSensorStateGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.EventSensorStateGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::flyteidl::event::EventSensorState::MergeFrom(from.state());
  }
  if (from.has_updated_at()) {
    mutable_updated_at()->::google::protobuf::Timestamp::MergeFrom(from.updated_at());
  }
}

void EventSensorStateGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.EventSensorStateGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventSensorStateGetResponse::CopyFrom(const EventSensorStateGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.EventSensorStateGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSensorStateGetResponse::IsInitialized() const {
  return true;
}

void EventSensorStateGetResponse::Swap(EventSensorStateGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventSensorStateGetResponse::InternalSwap(EventSensorStateGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_, other->state_);
  swap(updated_at_, other->updated_at_);
}

::google::protobuf::Metadata EventSensorStateGetResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fevent_2fsensor_5fstate_2eproto);
  return ::file_level_metadata_flyteidl_2fevent_2fsensor_5fstate_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EventSensorStateUpdateRequest::InitAsDefaultInstance() {
  ::flyteidl::event::_EventSensorStateUpdateRequest_default_instance_._instance.get_mutable()->state_ = const_cast< ::flyteidl::event::EventSensorState*>(
      ::flyteidl::event::EventSensorState::internal_default_instance());
  ::flyteidl::event::_EventSensorStateUpdateRequest_default_instance_._instance.get_mutable()->updated_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class EventSensorStateUpdateRequest::HasBitSetters {
 public:
  static const ::flyteidl::event::EventSensorState& state(const EventSensorStateUpdateRequest* msg);
  static const ::google::protobuf::Timestamp& updated_at(const EventSensorStateUpdateRequest* msg);
};

const ::flyteidl::event::EventSensorState&
EventSensorStateUpdateRequest::HasBitSetters::state(const EventSensorStateUpdateRequest* msg) {
  return *msg->state_;
}
const ::google::protobuf::Timestamp&
EventSensorStateUpdateRequest::HasBitSetters::updated_at(const EventSensorStateUpdateRequest* msg) {
  return *msg->updated_at_;
}
void EventSensorStateUpdateRequest::clear_updated_at() {
  if (GetArenaNoVirtual() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventSensorStateUpdateRequest::kEventTypeFieldNumber;
const int EventSensorStateUpdateRequest::kStateFieldNumber;
const int EventSensorStateUpdateRequest::kUpdatedAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventSensorStateUpdateRequest::EventSensorStateUpdateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.EventSensorStateUpdateRequest)
}
EventSensorStateUpdateRequest::EventSensorStateUpdateRequest(const EventSensorStateUpdateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.event_type().size() > 0) {
    event_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_type_);
  }
  if (from.has_state()) {
    state_ = new ::flyteidl::event::EventSensorState(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from.has_updated_at()) {
    updated_at_ = new ::google::protobuf::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.EventSensorStateUpdateRequest)
}

void EventSensorStateUpdateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EventSensorStateUpdateRequest_flyteidl_2fevent_2fsensor_5fstate_2eproto.base);
  event_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&state_)) + sizeof(updated_at_));
}

EventSensorStateUpdateRequest::~EventSensorStateUpdateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.event.EventSensorStateUpdateRequest)
  SharedDtor();
}

void EventSensorStateUpdateRequest::SharedDtor() {
  event_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete updated_at_;
}

void EventSensorStateUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventSensorStateUpdateRequest& EventSensorStateUpdateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EventSensorStateUpdateRequest_flyteidl_2fevent_2fsensor_5fstate_2eproto.base);
  return *internal_default_instance();
}


void EventSensorStateUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.EventSensorStateUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventSensorStateUpdateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EventSensorStateUpdateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string event_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.event.EventSensorStateUpdateRequest.event_type");
        object = msg->mutable_event_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.event.EventSensorState state = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::event::EventSensorState::_InternalParse;
        object = msg->mutable_state();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp updated_at = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_updated_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventSensorStateUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.EventSensorStateUpdateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string event_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->event_type().data(), static_cast<int>(this->event_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.event.EventSensorStateUpdateRequest.event_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.event.EventSensorState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp updated_at = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_updated_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.EventSensorStateUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.EventSensorStateUpdateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventSensorStateUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.EventSensorStateUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_type = 1;
  if (this->event_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_type().data(), static_cast<int>(this->event_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.EventSensorStateUpdateRequest.event_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_type(), output);
  }

  // .flyteidl.event.EventSensorState state = 2;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::state(this), output);
  }

  // .google.protobuf.Timestamp updated_at = 3;
  if (this->has_updated_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::updated_at(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.EventSensorStateUpdateRequest)
}

::google::protobuf::uint8* EventSensorStateUpdateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.EventSensorStateUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_type = 1;
  if (this->event_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_type().data(), static_cast<int>(this->event_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.EventSensorStateUpdateRequest.event_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_type(), target);
  }

  // .flyteidl.event.EventSensorState state = 2;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::state(this), target);
  }

  // .google.protobuf.Timestamp updated_at = 3;
  if (this->has_updated_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::updated_at(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.EventSensorStateUpdateRequest)
  return target;
}

size_t EventSensorStateUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.EventSensorStateUpdateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_type = 1;
  if (this->event_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event_type());
  }

  // .flyteidl.event.EventSensorState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .google.protobuf.Timestamp updated_at = 3;
  if (this->has_updated_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *updated_at_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventSensorStateUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.EventSensorStateUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EventSensorStateUpdateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<EventSensorStateUpdateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.EventSensorStateUpdateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.EventSensorStateUpdateRequest)
    MergeFrom(*source);
  }
}

void EventSensorStateUpdateRequest::MergeFrom(const EventSensorStateUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.EventSensorStateUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_type().size() > 0) {

    event_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_type_);
  }
  if (from.has_state()) {
    mutable_state()->::flyteidl::event::EventSensorState::MergeFrom(from.state());
  }
  if (from.has_updated_at()) {
    mutable_updated_at()->::google::protobuf::Timestamp::MergeFrom(from.updated_at());
  }
}

void EventSensorStateUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.EventSensorStateUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventSensorStateUpdateRequest::CopyFrom(const EventSensorStateUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.EventSensorStateUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSensorStateUpdateRequest::IsInitialized() const {
  return true;
}

void EventSensorStateUpdateRequest::Swap(EventSensorStateUpdateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventSensorStateUpdateRequest::InternalSwap(EventSensorStateUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  event_type_.Swap(&other->event_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(updated_at_, other->updated_at_);
}

::google::protobuf::Metadata EventSensorStateUpdateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fevent_2fsensor_5fstate_2eproto);
  return ::file_level_metadata_flyteidl_2fevent_2fsensor_5fstate_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EventSensorStateUpdateResponse::InitAsDefaultInstance() {
}
class EventSensorStateUpdateResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventSensorStateUpdateResponse::EventSensorStateUpdateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.EventSensorStateUpdateResponse)
}
EventSensorStateUpdateResponse::EventSensorStateUpdateResponse(const EventSensorStateUpdateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.EventSensorStateUpdateResponse)
}

void EventSensorStateUpdateResponse::SharedCtor() {
}

EventSensorStateUpdateResponse::~EventSensorStateUpdateResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.event.EventSensorStateUpdateResponse)
  SharedDtor();
}

void EventSensorStateUpdateResponse::SharedDtor() {
}

void EventSensorStateUpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventSensorStateUpdateResponse& EventSensorStateUpdateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EventSensorStateUpdateResponse_flyteidl_2fevent_2fsensor_5fstate_2eproto.base);
  return *internal_default_instance();
}


void EventSensorStateUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.EventSensorStateUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventSensorStateUpdateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EventSensorStateUpdateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventSensorStateUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.EventSensorStateUpdateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.EventSensorStateUpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.EventSensorStateUpdateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventSensorStateUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.EventSensorStateUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.EventSensorStateUpdateResponse)
}

::google::protobuf::uint8* EventSensorStateUpdateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.EventSensorStateUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.EventSensorStateUpdateResponse)
  return target;
}

size_t EventSensorStateUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.EventSensorStateUpdateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventSensorStateUpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.EventSensorStateUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EventSensorStateUpdateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<EventSensorStateUpdateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.EventSensorStateUpdateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.EventSensorStateUpdateResponse)
    MergeFrom(*source);
  }
}

void EventSensorStateUpdateResponse::MergeFrom(const EventSensorStateUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.EventSensorStateUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EventSensorStateUpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.EventSensorStateUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventSensorStateUpdateResponse::CopyFrom(const EventSensorStateUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.EventSensorStateUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSensorStateUpdateResponse::IsInitialized() const {
  return true;
}

void EventSensorStateUpdateResponse::Swap(EventSensorStateUpdateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventSensorStateUpdateResponse::InternalSwap(EventSensorStateUpdateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EventSensorStateUpdateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fevent_2fsensor_5fstate_2eproto);
  return ::file_level_metadata_flyteidl_2fevent_2fsensor_5fstate_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace event
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::event::EventSensorState* Arena::CreateMaybeMessage< ::flyteidl::event::EventSensorState >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::event::EventSensorState >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::EventSensorStateGetRequest* Arena::CreateMaybeMessage< ::flyteidl::event::EventSensorStateGetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::event::EventSensorStateGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::EventSensorStateGetResponse* Arena::CreateMaybeMessage< ::flyteidl::event::EventSensorStateGetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::event::EventSensorStateGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::EventSensorStateUpdateRequest* Arena::CreateMaybeMessage< ::flyteidl::event::EventSensorStateUpdateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::event::EventSensorStateUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::EventSensorStateUpdateResponse* Arena::CreateMaybeMessage< ::flyteidl::event::EventSensorStateUpdateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::event::EventSensorStateUpdateResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
