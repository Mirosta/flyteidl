// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/event/sensor.proto

#include "flyteidl/event/sensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fexecution_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ExecutionCreateRequest_flyteidl_2fadmin_2fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fnamed_5fentity_5fidentifier_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NamedEntityIdentifier_flyteidl_2fcore_2fnamed_5fentity_5fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fevent_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FilePrefix_flyteidl_2fevent_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fevent_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CustomEvent_flyteidl_2fevent_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fevent_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RemoteFileEvent_flyteidl_2fevent_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fevent_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_WorkflowEvent_flyteidl_2fevent_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fevent_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_EventTarget_flyteidl_2fevent_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
namespace flyteidl {
namespace event {
class WorkflowEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowEvent> _instance;
  const ::flyteidl::core::Identifier* execution_identifier_;
  const ::flyteidl::core::NamedEntityIdentifier* named_entity_identifier_;
} _WorkflowEvent_default_instance_;
class FilePrefixDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FilePrefix> _instance;
} _FilePrefix_default_instance_;
class RemoteFileEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoteFileEvent> _instance;
  ::google::protobuf::internal::ArenaStringPtr path_;
  const ::flyteidl::event::FilePrefix* prefix_;
} _RemoteFileEvent_default_instance_;
class CustomEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CustomEvent> _instance;
} _CustomEvent_default_instance_;
class EventTargetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EventTarget> _instance;
  const ::flyteidl::event::WorkflowEvent* workflow_event_;
  const ::flyteidl::event::RemoteFileEvent* remote_file_event_;
  const ::flyteidl::event::CustomEvent* custom_event_;
  const ::flyteidl::core::Identifier* launch_plan_;
} _EventTarget_default_instance_;
class EventTargetListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EventTargetListRequest> _instance;
} _EventTargetListRequest_default_instance_;
class EventTargetListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EventTargetList> _instance;
} _EventTargetList_default_instance_;
class EventOccurredRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EventOccurredRequest> _instance;
  const ::flyteidl::admin::ExecutionCreateRequest* execution_create_request_;
  const ::flyteidl::core::Identifier* launch_plan_;
} _EventOccurredRequest_default_instance_;
class EventOccurredResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EventOccurredResponse> _instance;
} _EventOccurredResponse_default_instance_;
}  // namespace event
}  // namespace flyteidl
static void InitDefaultsWorkflowEvent_flyteidl_2fevent_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::event::_WorkflowEvent_default_instance_;
    new (ptr) ::flyteidl::event::WorkflowEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::WorkflowEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_WorkflowEvent_flyteidl_2fevent_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsWorkflowEvent_flyteidl_2fevent_2fsensor_2eproto}, {
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_NamedEntityIdentifier_flyteidl_2fcore_2fnamed_5fentity_5fidentifier_2eproto.base,}};

static void InitDefaultsFilePrefix_flyteidl_2fevent_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::event::_FilePrefix_default_instance_;
    new (ptr) ::flyteidl::event::FilePrefix();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::FilePrefix::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FilePrefix_flyteidl_2fevent_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFilePrefix_flyteidl_2fevent_2fsensor_2eproto}, {}};

static void InitDefaultsRemoteFileEvent_flyteidl_2fevent_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::event::_RemoteFileEvent_default_instance_;
    new (ptr) ::flyteidl::event::RemoteFileEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::RemoteFileEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RemoteFileEvent_flyteidl_2fevent_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRemoteFileEvent_flyteidl_2fevent_2fsensor_2eproto}, {
      &scc_info_FilePrefix_flyteidl_2fevent_2fsensor_2eproto.base,}};

static void InitDefaultsCustomEvent_flyteidl_2fevent_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::event::_CustomEvent_default_instance_;
    new (ptr) ::flyteidl::event::CustomEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::CustomEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CustomEvent_flyteidl_2fevent_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCustomEvent_flyteidl_2fevent_2fsensor_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsEventTarget_flyteidl_2fevent_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::event::_EventTarget_default_instance_;
    new (ptr) ::flyteidl::event::EventTarget();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::EventTarget::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_EventTarget_flyteidl_2fevent_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsEventTarget_flyteidl_2fevent_2fsensor_2eproto}, {
      &scc_info_WorkflowEvent_flyteidl_2fevent_2fsensor_2eproto.base,
      &scc_info_RemoteFileEvent_flyteidl_2fevent_2fsensor_2eproto.base,
      &scc_info_CustomEvent_flyteidl_2fevent_2fsensor_2eproto.base,
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsEventTargetListRequest_flyteidl_2fevent_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::event::_EventTargetListRequest_default_instance_;
    new (ptr) ::flyteidl::event::EventTargetListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::EventTargetListRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EventTargetListRequest_flyteidl_2fevent_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEventTargetListRequest_flyteidl_2fevent_2fsensor_2eproto}, {}};

static void InitDefaultsEventTargetList_flyteidl_2fevent_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::event::_EventTargetList_default_instance_;
    new (ptr) ::flyteidl::event::EventTargetList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::EventTargetList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EventTargetList_flyteidl_2fevent_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEventTargetList_flyteidl_2fevent_2fsensor_2eproto}, {
      &scc_info_EventTarget_flyteidl_2fevent_2fsensor_2eproto.base,}};

static void InitDefaultsEventOccurredRequest_flyteidl_2fevent_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::event::_EventOccurredRequest_default_instance_;
    new (ptr) ::flyteidl::event::EventOccurredRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::EventOccurredRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_EventOccurredRequest_flyteidl_2fevent_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsEventOccurredRequest_flyteidl_2fevent_2fsensor_2eproto}, {
      &scc_info_ExecutionCreateRequest_flyteidl_2fadmin_2fexecution_2eproto.base,
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsEventOccurredResponse_flyteidl_2fevent_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::event::_EventOccurredResponse_default_instance_;
    new (ptr) ::flyteidl::event::EventOccurredResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::EventOccurredResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EventOccurredResponse_flyteidl_2fevent_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEventOccurredResponse_flyteidl_2fevent_2fsensor_2eproto}, {}};

void InitDefaults_flyteidl_2fevent_2fsensor_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowEvent_flyteidl_2fevent_2fsensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FilePrefix_flyteidl_2fevent_2fsensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RemoteFileEvent_flyteidl_2fevent_2fsensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CustomEvent_flyteidl_2fevent_2fsensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EventTarget_flyteidl_2fevent_2fsensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EventTargetListRequest_flyteidl_2fevent_2fsensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EventTargetList_flyteidl_2fevent_2fsensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EventOccurredRequest_flyteidl_2fevent_2fsensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EventOccurredResponse_flyteidl_2fevent_2fsensor_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fevent_2fsensor_2eproto[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fevent_2fsensor_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fevent_2fsensor_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fevent_2fsensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::WorkflowEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::WorkflowEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::event::WorkflowEventDefaultTypeInternal, execution_identifier_),
  offsetof(::flyteidl::event::WorkflowEventDefaultTypeInternal, named_entity_identifier_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::WorkflowEvent, phases_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::WorkflowEvent, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::FilePrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::FilePrefix, prefix_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::FilePrefix, pattern_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::RemoteFileEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::RemoteFileEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::event::RemoteFileEventDefaultTypeInternal, path_),
  offsetof(::flyteidl::event::RemoteFileEventDefaultTypeInternal, prefix_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::RemoteFileEvent, action_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::RemoteFileEvent, file_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CustomEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CustomEvent, target_type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CustomEvent, custom_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventTarget, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::event::EventTargetDefaultTypeInternal, workflow_event_),
  offsetof(::flyteidl::event::EventTargetDefaultTypeInternal, remote_file_event_),
  offsetof(::flyteidl::event::EventTargetDefaultTypeInternal, custom_event_),
  offsetof(::flyteidl::event::EventTargetDefaultTypeInternal, launch_plan_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventTarget, event_timeout_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventTarget, event_trigger_arg_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventTarget, event_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventTarget, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventTargetListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventTargetListRequest, event_type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventTargetListRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventTargetListRequest, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventTargetList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventTargetList, event_targets_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventTargetList, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventOccurredRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventOccurredRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::event::EventOccurredRequestDefaultTypeInternal, execution_create_request_),
  offsetof(::flyteidl::event::EventOccurredRequestDefaultTypeInternal, launch_plan_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventOccurredRequest, target_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventOccurredRequest, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::EventOccurredResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::event::WorkflowEvent)},
  { 9, -1, sizeof(::flyteidl::event::FilePrefix)},
  { 16, -1, sizeof(::flyteidl::event::RemoteFileEvent)},
  { 25, -1, sizeof(::flyteidl::event::CustomEvent)},
  { 32, -1, sizeof(::flyteidl::event::EventTarget)},
  { 45, -1, sizeof(::flyteidl::event::EventTargetListRequest)},
  { 53, -1, sizeof(::flyteidl::event::EventTargetList)},
  { 60, -1, sizeof(::flyteidl::event::EventOccurredRequest)},
  { 69, -1, sizeof(::flyteidl::event::EventOccurredResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_WorkflowEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_FilePrefix_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_RemoteFileEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_CustomEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_EventTarget_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_EventTargetListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_EventTargetList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_EventOccurredRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_EventOccurredResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fevent_2fsensor_2eproto = {
  {}, AddDescriptors_flyteidl_2fevent_2fsensor_2eproto, "flyteidl/event/sensor.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fevent_2fsensor_2eproto::offsets,
  file_level_metadata_flyteidl_2fevent_2fsensor_2eproto, 9, file_level_enum_descriptors_flyteidl_2fevent_2fsensor_2eproto, file_level_service_descriptors_flyteidl_2fevent_2fsensor_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fevent_2fsensor_2eproto[] =
  "\n\033flyteidl/event/sensor.proto\022\016flyteidl."
  "event\032\036flyteidl/admin/execution.proto\032\035f"
  "lyteidl/core/execution.proto\032\036flyteidl/c"
  "ore/identifier.proto\032+flyteidl/core/name"
  "d_entity_identifier.proto\032\036google/protob"
  "uf/duration.proto\032\034google/protobuf/struc"
  "t.proto\"\321\001\n\rWorkflowEvent\0229\n\024execution_i"
  "dentifier\030\001 \001(\0132\031.flyteidl.core.Identifi"
  "erH\000\022G\n\027named_entity_identifier\030\002 \001(\0132$."
  "flyteidl.core.NamedEntityIdentifierH\000\0226\n"
  "\006phases\030\003 \003(\0162&.flyteidl.core.WorkflowEx"
  "ecution.PhaseB\004\n\002id\"-\n\nFilePrefix\022\016\n\006pre"
  "fix\030\001 \001(\t\022\017\n\007pattern\030\002 \001(\t\"\245\001\n\017RemoteFil"
  "eEvent\022\016\n\004path\030\001 \001(\tH\000\022,\n\006prefix\030\002 \001(\0132\032"
  ".flyteidl.event.FilePrefixH\000\0226\n\006action\030\003"
  " \001(\0162&.flyteidl.event.RemoteFileEvent.Ac"
  "tion\"\024\n\006Action\022\n\n\006CREATE\020\000B\006\n\004file\"P\n\013Cu"
  "stomEvent\022\023\n\013target_type\030\001 \001(\t\022,\n\013custom"
  "_info\030\002 \001(\0132\027.google.protobuf.Struct\"\313\002\n"
  "\013EventTarget\0227\n\016workflow_event\030\001 \001(\0132\035.f"
  "lyteidl.event.WorkflowEventH\000\022<\n\021remote_"
  "file_event\030\002 \001(\0132\037.flyteidl.event.Remote"
  "FileEventH\000\0223\n\014custom_event\030\020 \001(\0132\033.flyt"
  "eidl.event.CustomEventH\000\0220\n\013launch_plan\030"
  "\003 \001(\0132\031.flyteidl.core.IdentifierH\001\0220\n\rev"
  "ent_timeout\030\004 \001(\0132\031.google.protobuf.Dura"
  "tion\022\031\n\021event_trigger_arg\030\005 \001(\tB\007\n\005event"
  "B\010\n\006target\"J\n\026EventTargetListRequest\022\022\n\n"
  "event_type\030\001 \001(\t\022\r\n\005limit\030\002 \001(\r\022\r\n\005token"
  "\030\003 \001(\t\"T\n\017EventTargetList\0222\n\revent_targe"
  "ts\030\001 \003(\0132\033.flyteidl.event.EventTarget\022\r\n"
  "\005token\030\002 \001(\t\"\253\001\n\024EventOccurredRequest\022J\n"
  "\030execution_create_request\030\001 \001(\0132&.flytei"
  "dl.admin.ExecutionCreateRequestH\000\0220\n\013lau"
  "nch_plan\030\002 \001(\0132\031.flyteidl.core.Identifie"
  "rH\001B\010\n\006targetB\013\n\treference\"\027\n\025EventOccur"
  "redResponseB7Z5github.com/flyteorg/flyte"
  "idl/gen/pb-go/flyteidl/eventb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fevent_2fsensor_2eproto = {
  false, InitDefaults_flyteidl_2fevent_2fsensor_2eproto, 
  descriptor_table_protodef_flyteidl_2fevent_2fsensor_2eproto,
  "flyteidl/event/sensor.proto", &assign_descriptors_table_flyteidl_2fevent_2fsensor_2eproto, 1516,
};

void AddDescriptors_flyteidl_2fevent_2fsensor_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[6] =
  {
    ::AddDescriptors_flyteidl_2fadmin_2fexecution_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fexecution_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fidentifier_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fnamed_5fentity_5fidentifier_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fduration_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fstruct_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fevent_2fsensor_2eproto, deps, 6);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fevent_2fsensor_2eproto = []() { AddDescriptors_flyteidl_2fevent_2fsensor_2eproto(); return true; }();
namespace flyteidl {
namespace event {
const ::google::protobuf::EnumDescriptor* RemoteFileEvent_Action_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fevent_2fsensor_2eproto);
  return file_level_enum_descriptors_flyteidl_2fevent_2fsensor_2eproto[0];
}
bool RemoteFileEvent_Action_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RemoteFileEvent_Action RemoteFileEvent::CREATE;
const RemoteFileEvent_Action RemoteFileEvent::Action_MIN;
const RemoteFileEvent_Action RemoteFileEvent::Action_MAX;
const int RemoteFileEvent::Action_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void WorkflowEvent::InitAsDefaultInstance() {
  ::flyteidl::event::_WorkflowEvent_default_instance_.execution_identifier_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::event::_WorkflowEvent_default_instance_.named_entity_identifier_ = const_cast< ::flyteidl::core::NamedEntityIdentifier*>(
      ::flyteidl::core::NamedEntityIdentifier::internal_default_instance());
}
class WorkflowEvent::HasBitSetters {
 public:
  static const ::flyteidl::core::Identifier& execution_identifier(const WorkflowEvent* msg);
  static const ::flyteidl::core::NamedEntityIdentifier& named_entity_identifier(const WorkflowEvent* msg);
};

const ::flyteidl::core::Identifier&
WorkflowEvent::HasBitSetters::execution_identifier(const WorkflowEvent* msg) {
  return *msg->id_.execution_identifier_;
}
const ::flyteidl::core::NamedEntityIdentifier&
WorkflowEvent::HasBitSetters::named_entity_identifier(const WorkflowEvent* msg) {
  return *msg->id_.named_entity_identifier_;
}
void WorkflowEvent::set_allocated_execution_identifier(::flyteidl::core::Identifier* execution_identifier) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_id();
  if (execution_identifier) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      execution_identifier = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, execution_identifier, submessage_arena);
    }
    set_has_execution_identifier();
    id_.execution_identifier_ = execution_identifier;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.WorkflowEvent.execution_identifier)
}
void WorkflowEvent::clear_execution_identifier() {
  if (has_execution_identifier()) {
    delete id_.execution_identifier_;
    clear_has_id();
  }
}
void WorkflowEvent::set_allocated_named_entity_identifier(::flyteidl::core::NamedEntityIdentifier* named_entity_identifier) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_id();
  if (named_entity_identifier) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      named_entity_identifier = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, named_entity_identifier, submessage_arena);
    }
    set_has_named_entity_identifier();
    id_.named_entity_identifier_ = named_entity_identifier;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.WorkflowEvent.named_entity_identifier)
}
void WorkflowEvent::clear_named_entity_identifier() {
  if (has_named_entity_identifier()) {
    delete id_.named_entity_identifier_;
    clear_has_id();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowEvent::kExecutionIdentifierFieldNumber;
const int WorkflowEvent::kNamedEntityIdentifierFieldNumber;
const int WorkflowEvent::kPhasesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowEvent::WorkflowEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.WorkflowEvent)
}
WorkflowEvent::WorkflowEvent(const WorkflowEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      phases_(from.phases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_id();
  switch (from.id_case()) {
    case kExecutionIdentifier: {
      mutable_execution_identifier()->::flyteidl::core::Identifier::MergeFrom(from.execution_identifier());
      break;
    }
    case kNamedEntityIdentifier: {
      mutable_named_entity_identifier()->::flyteidl::core::NamedEntityIdentifier::MergeFrom(from.named_entity_identifier());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.WorkflowEvent)
}

void WorkflowEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorkflowEvent_flyteidl_2fevent_2fsensor_2eproto.base);
  clear_has_id();
}

WorkflowEvent::~WorkflowEvent() {
  // @@protoc_insertion_point(destructor:flyteidl.event.WorkflowEvent)
  SharedDtor();
}

void WorkflowEvent::SharedDtor() {
  if (has_id()) {
    clear_id();
  }
}

void WorkflowEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowEvent& WorkflowEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkflowEvent_flyteidl_2fevent_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void WorkflowEvent::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.event.WorkflowEvent)
  switch (id_case()) {
    case kExecutionIdentifier: {
      delete id_.execution_identifier_;
      break;
    }
    case kNamedEntityIdentifier: {
      delete id_.named_entity_identifier_;
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void WorkflowEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.WorkflowEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phases_.Clear();
  clear_id();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkflowEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkflowEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Identifier execution_identifier = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_execution_identifier();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.NamedEntityIdentifier named_entity_identifier = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::NamedEntityIdentifier::_InternalParse;
        object = msg->mutable_named_entity_identifier();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .flyteidl.core.WorkflowExecution.Phase phases = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_phases();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_phases(static_cast<::flyteidl::core::WorkflowExecution_Phase>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.WorkflowEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier execution_identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_execution_identifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.NamedEntityIdentifier named_entity_identifier = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_named_entity_identifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.WorkflowExecution.Phase phases = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_phases(static_cast< ::flyteidl::core::WorkflowExecution_Phase >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_phases(static_cast< ::flyteidl::core::WorkflowExecution_Phase >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.WorkflowEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.WorkflowEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkflowEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.WorkflowEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier execution_identifier = 1;
  if (has_execution_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::execution_identifier(this), output);
  }

  // .flyteidl.core.NamedEntityIdentifier named_entity_identifier = 2;
  if (has_named_entity_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::named_entity_identifier(this), output);
  }

  // repeated .flyteidl.core.WorkflowExecution.Phase phases = 3;
  if (this->phases_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_phases_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->phases_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->phases(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.WorkflowEvent)
}

::google::protobuf::uint8* WorkflowEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.WorkflowEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier execution_identifier = 1;
  if (has_execution_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::execution_identifier(this), target);
  }

  // .flyteidl.core.NamedEntityIdentifier named_entity_identifier = 2;
  if (has_named_entity_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::named_entity_identifier(this), target);
  }

  // repeated .flyteidl.core.WorkflowExecution.Phase phases = 3;
  if (this->phases_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _phases_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->phases_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.WorkflowEvent)
  return target;
}

size_t WorkflowEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.WorkflowEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.core.WorkflowExecution.Phase phases = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->phases_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->phases(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _phases_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  switch (id_case()) {
    // .flyteidl.core.Identifier execution_identifier = 1;
    case kExecutionIdentifier: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *id_.execution_identifier_);
      break;
    }
    // .flyteidl.core.NamedEntityIdentifier named_entity_identifier = 2;
    case kNamedEntityIdentifier: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *id_.named_entity_identifier_);
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.WorkflowEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowEvent* source =
      ::google::protobuf::DynamicCastToGenerated<WorkflowEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.WorkflowEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.WorkflowEvent)
    MergeFrom(*source);
  }
}

void WorkflowEvent::MergeFrom(const WorkflowEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.WorkflowEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  phases_.MergeFrom(from.phases_);
  switch (from.id_case()) {
    case kExecutionIdentifier: {
      mutable_execution_identifier()->::flyteidl::core::Identifier::MergeFrom(from.execution_identifier());
      break;
    }
    case kNamedEntityIdentifier: {
      mutable_named_entity_identifier()->::flyteidl::core::NamedEntityIdentifier::MergeFrom(from.named_entity_identifier());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
}

void WorkflowEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.WorkflowEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowEvent::CopyFrom(const WorkflowEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.WorkflowEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowEvent::IsInitialized() const {
  return true;
}

void WorkflowEvent::Swap(WorkflowEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowEvent::InternalSwap(WorkflowEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  phases_.InternalSwap(&other->phases_);
  swap(id_, other->id_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata WorkflowEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fevent_2fsensor_2eproto);
  return ::file_level_metadata_flyteidl_2fevent_2fsensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FilePrefix::InitAsDefaultInstance() {
}
class FilePrefix::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilePrefix::kPrefixFieldNumber;
const int FilePrefix::kPatternFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilePrefix::FilePrefix()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.FilePrefix)
}
FilePrefix::FilePrefix(const FilePrefix& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prefix().size() > 0) {
    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pattern().size() > 0) {
    pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.FilePrefix)
}

void FilePrefix::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FilePrefix_flyteidl_2fevent_2fsensor_2eproto.base);
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FilePrefix::~FilePrefix() {
  // @@protoc_insertion_point(destructor:flyteidl.event.FilePrefix)
  SharedDtor();
}

void FilePrefix::SharedDtor() {
  prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FilePrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilePrefix& FilePrefix::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FilePrefix_flyteidl_2fevent_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void FilePrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.FilePrefix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FilePrefix::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FilePrefix*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string prefix = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.event.FilePrefix.prefix");
        object = msg->mutable_prefix();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string pattern = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.event.FilePrefix.pattern");
        object = msg->mutable_pattern();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FilePrefix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.FilePrefix)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string prefix = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prefix().data(), static_cast<int>(this->prefix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.event.FilePrefix.prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pattern = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pattern().data(), static_cast<int>(this->pattern().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.event.FilePrefix.pattern"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.FilePrefix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.FilePrefix)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FilePrefix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.FilePrefix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.FilePrefix.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->prefix(), output);
  }

  // string pattern = 2;
  if (this->pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pattern().data(), static_cast<int>(this->pattern().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.FilePrefix.pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pattern(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.FilePrefix)
}

::google::protobuf::uint8* FilePrefix::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.FilePrefix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.FilePrefix.prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->prefix(), target);
  }

  // string pattern = 2;
  if (this->pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pattern().data(), static_cast<int>(this->pattern().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.FilePrefix.pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pattern(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.FilePrefix)
  return target;
}

size_t FilePrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.FilePrefix)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefix());
  }

  // string pattern = 2;
  if (this->pattern().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pattern());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilePrefix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.FilePrefix)
  GOOGLE_DCHECK_NE(&from, this);
  const FilePrefix* source =
      ::google::protobuf::DynamicCastToGenerated<FilePrefix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.FilePrefix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.FilePrefix)
    MergeFrom(*source);
  }
}

void FilePrefix::MergeFrom(const FilePrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.FilePrefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.pattern().size() > 0) {

    pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
}

void FilePrefix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.FilePrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilePrefix::CopyFrom(const FilePrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.FilePrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilePrefix::IsInitialized() const {
  return true;
}

void FilePrefix::Swap(FilePrefix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilePrefix::InternalSwap(FilePrefix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  prefix_.Swap(&other->prefix_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pattern_.Swap(&other->pattern_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata FilePrefix::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fevent_2fsensor_2eproto);
  return ::file_level_metadata_flyteidl_2fevent_2fsensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RemoteFileEvent::InitAsDefaultInstance() {
  ::flyteidl::event::_RemoteFileEvent_default_instance_.path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::flyteidl::event::_RemoteFileEvent_default_instance_.prefix_ = const_cast< ::flyteidl::event::FilePrefix*>(
      ::flyteidl::event::FilePrefix::internal_default_instance());
}
class RemoteFileEvent::HasBitSetters {
 public:
  static const ::flyteidl::event::FilePrefix& prefix(const RemoteFileEvent* msg);
};

const ::flyteidl::event::FilePrefix&
RemoteFileEvent::HasBitSetters::prefix(const RemoteFileEvent* msg) {
  return *msg->file_.prefix_;
}
void RemoteFileEvent::set_allocated_prefix(::flyteidl::event::FilePrefix* prefix) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_file();
  if (prefix) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prefix = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prefix, submessage_arena);
    }
    set_has_prefix();
    file_.prefix_ = prefix;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.RemoteFileEvent.prefix)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteFileEvent::kPathFieldNumber;
const int RemoteFileEvent::kPrefixFieldNumber;
const int RemoteFileEvent::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteFileEvent::RemoteFileEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.RemoteFileEvent)
}
RemoteFileEvent::RemoteFileEvent(const RemoteFileEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_ = from.action_;
  clear_has_file();
  switch (from.file_case()) {
    case kPath: {
      set_path(from.path());
      break;
    }
    case kPrefix: {
      mutable_prefix()->::flyteidl::event::FilePrefix::MergeFrom(from.prefix());
      break;
    }
    case FILE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.RemoteFileEvent)
}

void RemoteFileEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RemoteFileEvent_flyteidl_2fevent_2fsensor_2eproto.base);
  action_ = 0;
  clear_has_file();
}

RemoteFileEvent::~RemoteFileEvent() {
  // @@protoc_insertion_point(destructor:flyteidl.event.RemoteFileEvent)
  SharedDtor();
}

void RemoteFileEvent::SharedDtor() {
  if (has_file()) {
    clear_file();
  }
}

void RemoteFileEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteFileEvent& RemoteFileEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RemoteFileEvent_flyteidl_2fevent_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void RemoteFileEvent::clear_file() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.event.RemoteFileEvent)
  switch (file_case()) {
    case kPath: {
      file_.path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kPrefix: {
      delete file_.prefix_;
      break;
    }
    case FILE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FILE_NOT_SET;
}


void RemoteFileEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.RemoteFileEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_ = 0;
  clear_file();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RemoteFileEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RemoteFileEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.event.RemoteFileEvent.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.event.FilePrefix prefix = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::event::FilePrefix::_InternalParse;
        object = msg->mutable_prefix();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.event.RemoteFileEvent.Action action = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_action(static_cast<::flyteidl::event::RemoteFileEvent_Action>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RemoteFileEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.RemoteFileEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.event.RemoteFileEvent.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.event.FilePrefix prefix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prefix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.event.RemoteFileEvent.Action action = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::flyteidl::event::RemoteFileEvent_Action >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.RemoteFileEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.RemoteFileEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RemoteFileEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.RemoteFileEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.RemoteFileEvent.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // .flyteidl.event.FilePrefix prefix = 2;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::prefix(this), output);
  }

  // .flyteidl.event.RemoteFileEvent.Action action = 3;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.RemoteFileEvent)
}

::google::protobuf::uint8* RemoteFileEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.RemoteFileEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.RemoteFileEvent.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // .flyteidl.event.FilePrefix prefix = 2;
  if (has_prefix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::prefix(this), target);
  }

  // .flyteidl.event.RemoteFileEvent.Action action = 3;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.RemoteFileEvent)
  return target;
}

size_t RemoteFileEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.RemoteFileEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.event.RemoteFileEvent.Action action = 3;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  switch (file_case()) {
    // string path = 1;
    case kPath: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
      break;
    }
    // .flyteidl.event.FilePrefix prefix = 2;
    case kPrefix: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *file_.prefix_);
      break;
    }
    case FILE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteFileEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.RemoteFileEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteFileEvent* source =
      ::google::protobuf::DynamicCastToGenerated<RemoteFileEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.RemoteFileEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.RemoteFileEvent)
    MergeFrom(*source);
  }
}

void RemoteFileEvent::MergeFrom(const RemoteFileEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.RemoteFileEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action() != 0) {
    set_action(from.action());
  }
  switch (from.file_case()) {
    case kPath: {
      set_path(from.path());
      break;
    }
    case kPrefix: {
      mutable_prefix()->::flyteidl::event::FilePrefix::MergeFrom(from.prefix());
      break;
    }
    case FILE_NOT_SET: {
      break;
    }
  }
}

void RemoteFileEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.RemoteFileEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteFileEvent::CopyFrom(const RemoteFileEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.RemoteFileEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteFileEvent::IsInitialized() const {
  return true;
}

void RemoteFileEvent::Swap(RemoteFileEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteFileEvent::InternalSwap(RemoteFileEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(action_, other->action_);
  swap(file_, other->file_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata RemoteFileEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fevent_2fsensor_2eproto);
  return ::file_level_metadata_flyteidl_2fevent_2fsensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CustomEvent::InitAsDefaultInstance() {
  ::flyteidl::event::_CustomEvent_default_instance_._instance.get_mutable()->custom_info_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
}
class CustomEvent::HasBitSetters {
 public:
  static const ::google::protobuf::Struct& custom_info(const CustomEvent* msg);
};

const ::google::protobuf::Struct&
CustomEvent::HasBitSetters::custom_info(const CustomEvent* msg) {
  return *msg->custom_info_;
}
void CustomEvent::clear_custom_info() {
  if (GetArenaNoVirtual() == nullptr && custom_info_ != nullptr) {
    delete custom_info_;
  }
  custom_info_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomEvent::kTargetTypeFieldNumber;
const int CustomEvent::kCustomInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomEvent::CustomEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.CustomEvent)
}
CustomEvent::CustomEvent(const CustomEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.target_type().size() > 0) {
    target_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_type_);
  }
  if (from.has_custom_info()) {
    custom_info_ = new ::google::protobuf::Struct(*from.custom_info_);
  } else {
    custom_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.CustomEvent)
}

void CustomEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CustomEvent_flyteidl_2fevent_2fsensor_2eproto.base);
  target_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_info_ = nullptr;
}

CustomEvent::~CustomEvent() {
  // @@protoc_insertion_point(destructor:flyteidl.event.CustomEvent)
  SharedDtor();
}

void CustomEvent::SharedDtor() {
  target_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete custom_info_;
}

void CustomEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomEvent& CustomEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CustomEvent_flyteidl_2fevent_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void CustomEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.CustomEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && custom_info_ != nullptr) {
    delete custom_info_;
  }
  custom_info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CustomEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CustomEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string target_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.event.CustomEvent.target_type");
        object = msg->mutable_target_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Struct custom_info = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Struct::_InternalParse;
        object = msg->mutable_custom_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CustomEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.CustomEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string target_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target_type().data(), static_cast<int>(this->target_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.event.CustomEvent.target_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct custom_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.CustomEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.CustomEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CustomEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.CustomEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target_type = 1;
  if (this->target_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_type().data(), static_cast<int>(this->target_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.CustomEvent.target_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->target_type(), output);
  }

  // .google.protobuf.Struct custom_info = 2;
  if (this->has_custom_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::custom_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.CustomEvent)
}

::google::protobuf::uint8* CustomEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.CustomEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target_type = 1;
  if (this->target_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_type().data(), static_cast<int>(this->target_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.CustomEvent.target_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->target_type(), target);
  }

  // .google.protobuf.Struct custom_info = 2;
  if (this->has_custom_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::custom_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.CustomEvent)
  return target;
}

size_t CustomEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.CustomEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target_type = 1;
  if (this->target_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target_type());
  }

  // .google.protobuf.Struct custom_info = 2;
  if (this->has_custom_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *custom_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.CustomEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomEvent* source =
      ::google::protobuf::DynamicCastToGenerated<CustomEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.CustomEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.CustomEvent)
    MergeFrom(*source);
  }
}

void CustomEvent::MergeFrom(const CustomEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.CustomEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_type().size() > 0) {

    target_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_type_);
  }
  if (from.has_custom_info()) {
    mutable_custom_info()->::google::protobuf::Struct::MergeFrom(from.custom_info());
  }
}

void CustomEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.CustomEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomEvent::CopyFrom(const CustomEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.CustomEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomEvent::IsInitialized() const {
  return true;
}

void CustomEvent::Swap(CustomEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomEvent::InternalSwap(CustomEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  target_type_.Swap(&other->target_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(custom_info_, other->custom_info_);
}

::google::protobuf::Metadata CustomEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fevent_2fsensor_2eproto);
  return ::file_level_metadata_flyteidl_2fevent_2fsensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EventTarget::InitAsDefaultInstance() {
  ::flyteidl::event::_EventTarget_default_instance_.workflow_event_ = const_cast< ::flyteidl::event::WorkflowEvent*>(
      ::flyteidl::event::WorkflowEvent::internal_default_instance());
  ::flyteidl::event::_EventTarget_default_instance_.remote_file_event_ = const_cast< ::flyteidl::event::RemoteFileEvent*>(
      ::flyteidl::event::RemoteFileEvent::internal_default_instance());
  ::flyteidl::event::_EventTarget_default_instance_.custom_event_ = const_cast< ::flyteidl::event::CustomEvent*>(
      ::flyteidl::event::CustomEvent::internal_default_instance());
  ::flyteidl::event::_EventTarget_default_instance_.launch_plan_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::event::_EventTarget_default_instance_._instance.get_mutable()->event_timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
class EventTarget::HasBitSetters {
 public:
  static const ::flyteidl::event::WorkflowEvent& workflow_event(const EventTarget* msg);
  static const ::flyteidl::event::RemoteFileEvent& remote_file_event(const EventTarget* msg);
  static const ::flyteidl::event::CustomEvent& custom_event(const EventTarget* msg);
  static const ::flyteidl::core::Identifier& launch_plan(const EventTarget* msg);
  static const ::google::protobuf::Duration& event_timeout(const EventTarget* msg);
};

const ::flyteidl::event::WorkflowEvent&
EventTarget::HasBitSetters::workflow_event(const EventTarget* msg) {
  return *msg->event_.workflow_event_;
}
const ::flyteidl::event::RemoteFileEvent&
EventTarget::HasBitSetters::remote_file_event(const EventTarget* msg) {
  return *msg->event_.remote_file_event_;
}
const ::flyteidl::event::CustomEvent&
EventTarget::HasBitSetters::custom_event(const EventTarget* msg) {
  return *msg->event_.custom_event_;
}
const ::flyteidl::core::Identifier&
EventTarget::HasBitSetters::launch_plan(const EventTarget* msg) {
  return *msg->target_.launch_plan_;
}
const ::google::protobuf::Duration&
EventTarget::HasBitSetters::event_timeout(const EventTarget* msg) {
  return *msg->event_timeout_;
}
void EventTarget::set_allocated_workflow_event(::flyteidl::event::WorkflowEvent* workflow_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (workflow_event) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workflow_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workflow_event, submessage_arena);
    }
    set_has_workflow_event();
    event_.workflow_event_ = workflow_event;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.EventTarget.workflow_event)
}
void EventTarget::set_allocated_remote_file_event(::flyteidl::event::RemoteFileEvent* remote_file_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (remote_file_event) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      remote_file_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, remote_file_event, submessage_arena);
    }
    set_has_remote_file_event();
    event_.remote_file_event_ = remote_file_event;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.EventTarget.remote_file_event)
}
void EventTarget::set_allocated_custom_event(::flyteidl::event::CustomEvent* custom_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (custom_event) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      custom_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom_event, submessage_arena);
    }
    set_has_custom_event();
    event_.custom_event_ = custom_event;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.EventTarget.custom_event)
}
void EventTarget::set_allocated_launch_plan(::flyteidl::core::Identifier* launch_plan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target();
  if (launch_plan) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      launch_plan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, launch_plan, submessage_arena);
    }
    set_has_launch_plan();
    target_.launch_plan_ = launch_plan;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.EventTarget.launch_plan)
}
void EventTarget::clear_launch_plan() {
  if (has_launch_plan()) {
    delete target_.launch_plan_;
    clear_has_target();
  }
}
void EventTarget::clear_event_timeout() {
  if (GetArenaNoVirtual() == nullptr && event_timeout_ != nullptr) {
    delete event_timeout_;
  }
  event_timeout_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventTarget::kWorkflowEventFieldNumber;
const int EventTarget::kRemoteFileEventFieldNumber;
const int EventTarget::kCustomEventFieldNumber;
const int EventTarget::kLaunchPlanFieldNumber;
const int EventTarget::kEventTimeoutFieldNumber;
const int EventTarget::kEventTriggerArgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventTarget::EventTarget()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.EventTarget)
}
EventTarget::EventTarget(const EventTarget& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_trigger_arg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.event_trigger_arg().size() > 0) {
    event_trigger_arg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_trigger_arg_);
  }
  if (from.has_event_timeout()) {
    event_timeout_ = new ::google::protobuf::Duration(*from.event_timeout_);
  } else {
    event_timeout_ = nullptr;
  }
  clear_has_event();
  switch (from.event_case()) {
    case kWorkflowEvent: {
      mutable_workflow_event()->::flyteidl::event::WorkflowEvent::MergeFrom(from.workflow_event());
      break;
    }
    case kRemoteFileEvent: {
      mutable_remote_file_event()->::flyteidl::event::RemoteFileEvent::MergeFrom(from.remote_file_event());
      break;
    }
    case kCustomEvent: {
      mutable_custom_event()->::flyteidl::event::CustomEvent::MergeFrom(from.custom_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  clear_has_target();
  switch (from.target_case()) {
    case kLaunchPlan: {
      mutable_launch_plan()->::flyteidl::core::Identifier::MergeFrom(from.launch_plan());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.EventTarget)
}

void EventTarget::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EventTarget_flyteidl_2fevent_2fsensor_2eproto.base);
  event_trigger_arg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_timeout_ = nullptr;
  clear_has_event();
  clear_has_target();
}

EventTarget::~EventTarget() {
  // @@protoc_insertion_point(destructor:flyteidl.event.EventTarget)
  SharedDtor();
}

void EventTarget::SharedDtor() {
  event_trigger_arg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete event_timeout_;
  if (has_event()) {
    clear_event();
  }
  if (has_target()) {
    clear_target();
  }
}

void EventTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventTarget& EventTarget::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EventTarget_flyteidl_2fevent_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void EventTarget::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.event.EventTarget)
  switch (event_case()) {
    case kWorkflowEvent: {
      delete event_.workflow_event_;
      break;
    }
    case kRemoteFileEvent: {
      delete event_.remote_file_event_;
      break;
    }
    case kCustomEvent: {
      delete event_.custom_event_;
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}

void EventTarget::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.event.EventTarget)
  switch (target_case()) {
    case kLaunchPlan: {
      delete target_.launch_plan_;
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = TARGET_NOT_SET;
}


void EventTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.EventTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_trigger_arg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && event_timeout_ != nullptr) {
    delete event_timeout_;
  }
  event_timeout_ = nullptr;
  clear_event();
  clear_target();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventTarget::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EventTarget*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.event.WorkflowEvent workflow_event = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::event::WorkflowEvent::_InternalParse;
        object = msg->mutable_workflow_event();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.event.RemoteFileEvent remote_file_event = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::event::RemoteFileEvent::_InternalParse;
        object = msg->mutable_remote_file_event();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.Identifier launch_plan = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_launch_plan();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Duration event_timeout = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Duration::_InternalParse;
        object = msg->mutable_event_timeout();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string event_trigger_arg = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.event.EventTarget.event_trigger_arg");
        object = msg->mutable_event_trigger_arg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.event.CustomEvent custom_event = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::event::CustomEvent::_InternalParse;
        object = msg->mutable_custom_event();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.EventTarget)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.event.WorkflowEvent workflow_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_workflow_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.event.RemoteFileEvent remote_file_event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_remote_file_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Identifier launch_plan = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_launch_plan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration event_timeout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string event_trigger_arg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_trigger_arg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->event_trigger_arg().data(), static_cast<int>(this->event_trigger_arg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.event.EventTarget.event_trigger_arg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.event.CustomEvent custom_event = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.EventTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.EventTarget)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.EventTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.event.WorkflowEvent workflow_event = 1;
  if (has_workflow_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::workflow_event(this), output);
  }

  // .flyteidl.event.RemoteFileEvent remote_file_event = 2;
  if (has_remote_file_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::remote_file_event(this), output);
  }

  // .flyteidl.core.Identifier launch_plan = 3;
  if (has_launch_plan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::launch_plan(this), output);
  }

  // .google.protobuf.Duration event_timeout = 4;
  if (this->has_event_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::event_timeout(this), output);
  }

  // string event_trigger_arg = 5;
  if (this->event_trigger_arg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_trigger_arg().data(), static_cast<int>(this->event_trigger_arg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.EventTarget.event_trigger_arg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->event_trigger_arg(), output);
  }

  // .flyteidl.event.CustomEvent custom_event = 16;
  if (has_custom_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::custom_event(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.EventTarget)
}

::google::protobuf::uint8* EventTarget::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.EventTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.event.WorkflowEvent workflow_event = 1;
  if (has_workflow_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::workflow_event(this), target);
  }

  // .flyteidl.event.RemoteFileEvent remote_file_event = 2;
  if (has_remote_file_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::remote_file_event(this), target);
  }

  // .flyteidl.core.Identifier launch_plan = 3;
  if (has_launch_plan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::launch_plan(this), target);
  }

  // .google.protobuf.Duration event_timeout = 4;
  if (this->has_event_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::event_timeout(this), target);
  }

  // string event_trigger_arg = 5;
  if (this->event_trigger_arg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_trigger_arg().data(), static_cast<int>(this->event_trigger_arg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.EventTarget.event_trigger_arg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->event_trigger_arg(), target);
  }

  // .flyteidl.event.CustomEvent custom_event = 16;
  if (has_custom_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::custom_event(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.EventTarget)
  return target;
}

size_t EventTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.EventTarget)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_trigger_arg = 5;
  if (this->event_trigger_arg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event_trigger_arg());
  }

  // .google.protobuf.Duration event_timeout = 4;
  if (this->has_event_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *event_timeout_);
  }

  switch (event_case()) {
    // .flyteidl.event.WorkflowEvent workflow_event = 1;
    case kWorkflowEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.workflow_event_);
      break;
    }
    // .flyteidl.event.RemoteFileEvent remote_file_event = 2;
    case kRemoteFileEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.remote_file_event_);
      break;
    }
    // .flyteidl.event.CustomEvent custom_event = 16;
    case kCustomEvent: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.custom_event_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  switch (target_case()) {
    // .flyteidl.core.Identifier launch_plan = 3;
    case kLaunchPlan: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_.launch_plan_);
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventTarget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.EventTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const EventTarget* source =
      ::google::protobuf::DynamicCastToGenerated<EventTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.EventTarget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.EventTarget)
    MergeFrom(*source);
  }
}

void EventTarget::MergeFrom(const EventTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.EventTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_trigger_arg().size() > 0) {

    event_trigger_arg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_trigger_arg_);
  }
  if (from.has_event_timeout()) {
    mutable_event_timeout()->::google::protobuf::Duration::MergeFrom(from.event_timeout());
  }
  switch (from.event_case()) {
    case kWorkflowEvent: {
      mutable_workflow_event()->::flyteidl::event::WorkflowEvent::MergeFrom(from.workflow_event());
      break;
    }
    case kRemoteFileEvent: {
      mutable_remote_file_event()->::flyteidl::event::RemoteFileEvent::MergeFrom(from.remote_file_event());
      break;
    }
    case kCustomEvent: {
      mutable_custom_event()->::flyteidl::event::CustomEvent::MergeFrom(from.custom_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  switch (from.target_case()) {
    case kLaunchPlan: {
      mutable_launch_plan()->::flyteidl::core::Identifier::MergeFrom(from.launch_plan());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
}

void EventTarget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.EventTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventTarget::CopyFrom(const EventTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.EventTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventTarget::IsInitialized() const {
  return true;
}

void EventTarget::Swap(EventTarget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventTarget::InternalSwap(EventTarget* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  event_trigger_arg_.Swap(&other->event_trigger_arg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_timeout_, other->event_timeout_);
  swap(event_, other->event_);
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::google::protobuf::Metadata EventTarget::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fevent_2fsensor_2eproto);
  return ::file_level_metadata_flyteidl_2fevent_2fsensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EventTargetListRequest::InitAsDefaultInstance() {
}
class EventTargetListRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventTargetListRequest::kEventTypeFieldNumber;
const int EventTargetListRequest::kLimitFieldNumber;
const int EventTargetListRequest::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventTargetListRequest::EventTargetListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.EventTargetListRequest)
}
EventTargetListRequest::EventTargetListRequest(const EventTargetListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.event_type().size() > 0) {
    event_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_type_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.EventTargetListRequest)
}

void EventTargetListRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EventTargetListRequest_flyteidl_2fevent_2fsensor_2eproto.base);
  event_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0u;
}

EventTargetListRequest::~EventTargetListRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.event.EventTargetListRequest)
  SharedDtor();
}

void EventTargetListRequest::SharedDtor() {
  event_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EventTargetListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventTargetListRequest& EventTargetListRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EventTargetListRequest_flyteidl_2fevent_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void EventTargetListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.EventTargetListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventTargetListRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EventTargetListRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string event_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.event.EventTargetListRequest.event_type");
        object = msg->mutable_event_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 limit = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.event.EventTargetListRequest.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventTargetListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.EventTargetListRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string event_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->event_type().data(), static_cast<int>(this->event_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.event.EventTargetListRequest.event_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.event.EventTargetListRequest.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.EventTargetListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.EventTargetListRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventTargetListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.EventTargetListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_type = 1;
  if (this->event_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_type().data(), static_cast<int>(this->event_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.EventTargetListRequest.event_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_type(), output);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.EventTargetListRequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.EventTargetListRequest)
}

::google::protobuf::uint8* EventTargetListRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.EventTargetListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_type = 1;
  if (this->event_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_type().data(), static_cast<int>(this->event_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.EventTargetListRequest.event_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_type(), target);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.EventTargetListRequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.EventTargetListRequest)
  return target;
}

size_t EventTargetListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.EventTargetListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_type = 1;
  if (this->event_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event_type());
  }

  // string token = 3;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventTargetListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.EventTargetListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EventTargetListRequest* source =
      ::google::protobuf::DynamicCastToGenerated<EventTargetListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.EventTargetListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.EventTargetListRequest)
    MergeFrom(*source);
  }
}

void EventTargetListRequest::MergeFrom(const EventTargetListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.EventTargetListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_type().size() > 0) {

    event_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_type_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void EventTargetListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.EventTargetListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventTargetListRequest::CopyFrom(const EventTargetListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.EventTargetListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventTargetListRequest::IsInitialized() const {
  return true;
}

void EventTargetListRequest::Swap(EventTargetListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventTargetListRequest::InternalSwap(EventTargetListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  event_type_.Swap(&other->event_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata EventTargetListRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fevent_2fsensor_2eproto);
  return ::file_level_metadata_flyteidl_2fevent_2fsensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EventTargetList::InitAsDefaultInstance() {
}
class EventTargetList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventTargetList::kEventTargetsFieldNumber;
const int EventTargetList::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventTargetList::EventTargetList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.EventTargetList)
}
EventTargetList::EventTargetList(const EventTargetList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      event_targets_(from.event_targets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.EventTargetList)
}

void EventTargetList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EventTargetList_flyteidl_2fevent_2fsensor_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EventTargetList::~EventTargetList() {
  // @@protoc_insertion_point(destructor:flyteidl.event.EventTargetList)
  SharedDtor();
}

void EventTargetList::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EventTargetList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventTargetList& EventTargetList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EventTargetList_flyteidl_2fevent_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void EventTargetList::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.EventTargetList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_targets_.Clear();
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventTargetList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EventTargetList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .flyteidl.event.EventTarget event_targets = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::event::EventTarget::_InternalParse;
          object = msg->add_event_targets();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.event.EventTargetList.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventTargetList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.EventTargetList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.event.EventTarget event_targets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_event_targets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.event.EventTargetList.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.EventTargetList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.EventTargetList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventTargetList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.EventTargetList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.event.EventTarget event_targets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_targets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->event_targets(static_cast<int>(i)),
      output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.EventTargetList.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.EventTargetList)
}

::google::protobuf::uint8* EventTargetList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.EventTargetList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.event.EventTarget event_targets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_targets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->event_targets(static_cast<int>(i)), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.EventTargetList.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.EventTargetList)
  return target;
}

size_t EventTargetList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.EventTargetList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.event.EventTarget event_targets = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->event_targets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->event_targets(static_cast<int>(i)));
    }
  }

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventTargetList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.EventTargetList)
  GOOGLE_DCHECK_NE(&from, this);
  const EventTargetList* source =
      ::google::protobuf::DynamicCastToGenerated<EventTargetList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.EventTargetList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.EventTargetList)
    MergeFrom(*source);
  }
}

void EventTargetList::MergeFrom(const EventTargetList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.EventTargetList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_targets_.MergeFrom(from.event_targets_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void EventTargetList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.EventTargetList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventTargetList::CopyFrom(const EventTargetList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.EventTargetList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventTargetList::IsInitialized() const {
  return true;
}

void EventTargetList::Swap(EventTargetList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventTargetList::InternalSwap(EventTargetList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&event_targets_)->InternalSwap(CastToBase(&other->event_targets_));
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata EventTargetList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fevent_2fsensor_2eproto);
  return ::file_level_metadata_flyteidl_2fevent_2fsensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EventOccurredRequest::InitAsDefaultInstance() {
  ::flyteidl::event::_EventOccurredRequest_default_instance_.execution_create_request_ = const_cast< ::flyteidl::admin::ExecutionCreateRequest*>(
      ::flyteidl::admin::ExecutionCreateRequest::internal_default_instance());
  ::flyteidl::event::_EventOccurredRequest_default_instance_.launch_plan_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
}
class EventOccurredRequest::HasBitSetters {
 public:
  static const ::flyteidl::admin::ExecutionCreateRequest& execution_create_request(const EventOccurredRequest* msg);
  static const ::flyteidl::core::Identifier& launch_plan(const EventOccurredRequest* msg);
};

const ::flyteidl::admin::ExecutionCreateRequest&
EventOccurredRequest::HasBitSetters::execution_create_request(const EventOccurredRequest* msg) {
  return *msg->target_.execution_create_request_;
}
const ::flyteidl::core::Identifier&
EventOccurredRequest::HasBitSetters::launch_plan(const EventOccurredRequest* msg) {
  return *msg->reference_.launch_plan_;
}
void EventOccurredRequest::set_allocated_execution_create_request(::flyteidl::admin::ExecutionCreateRequest* execution_create_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target();
  if (execution_create_request) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      execution_create_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, execution_create_request, submessage_arena);
    }
    set_has_execution_create_request();
    target_.execution_create_request_ = execution_create_request;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.EventOccurredRequest.execution_create_request)
}
void EventOccurredRequest::clear_execution_create_request() {
  if (has_execution_create_request()) {
    delete target_.execution_create_request_;
    clear_has_target();
  }
}
void EventOccurredRequest::set_allocated_launch_plan(::flyteidl::core::Identifier* launch_plan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_reference();
  if (launch_plan) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      launch_plan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, launch_plan, submessage_arena);
    }
    set_has_launch_plan();
    reference_.launch_plan_ = launch_plan;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.EventOccurredRequest.launch_plan)
}
void EventOccurredRequest::clear_launch_plan() {
  if (has_launch_plan()) {
    delete reference_.launch_plan_;
    clear_has_reference();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventOccurredRequest::kExecutionCreateRequestFieldNumber;
const int EventOccurredRequest::kLaunchPlanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventOccurredRequest::EventOccurredRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.EventOccurredRequest)
}
EventOccurredRequest::EventOccurredRequest(const EventOccurredRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_target();
  switch (from.target_case()) {
    case kExecutionCreateRequest: {
      mutable_execution_create_request()->::flyteidl::admin::ExecutionCreateRequest::MergeFrom(from.execution_create_request());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  clear_has_reference();
  switch (from.reference_case()) {
    case kLaunchPlan: {
      mutable_launch_plan()->::flyteidl::core::Identifier::MergeFrom(from.launch_plan());
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.EventOccurredRequest)
}

void EventOccurredRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EventOccurredRequest_flyteidl_2fevent_2fsensor_2eproto.base);
  clear_has_target();
  clear_has_reference();
}

EventOccurredRequest::~EventOccurredRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.event.EventOccurredRequest)
  SharedDtor();
}

void EventOccurredRequest::SharedDtor() {
  if (has_target()) {
    clear_target();
  }
  if (has_reference()) {
    clear_reference();
  }
}

void EventOccurredRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventOccurredRequest& EventOccurredRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EventOccurredRequest_flyteidl_2fevent_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void EventOccurredRequest::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.event.EventOccurredRequest)
  switch (target_case()) {
    case kExecutionCreateRequest: {
      delete target_.execution_create_request_;
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}

void EventOccurredRequest::clear_reference() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.event.EventOccurredRequest)
  switch (reference_case()) {
    case kLaunchPlan: {
      delete reference_.launch_plan_;
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = REFERENCE_NOT_SET;
}


void EventOccurredRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.EventOccurredRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_target();
  clear_reference();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventOccurredRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EventOccurredRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.ExecutionCreateRequest execution_create_request = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::ExecutionCreateRequest::_InternalParse;
        object = msg->mutable_execution_create_request();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.Identifier launch_plan = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_launch_plan();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventOccurredRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.EventOccurredRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.ExecutionCreateRequest execution_create_request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_execution_create_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Identifier launch_plan = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_launch_plan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.EventOccurredRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.EventOccurredRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventOccurredRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.EventOccurredRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.ExecutionCreateRequest execution_create_request = 1;
  if (has_execution_create_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::execution_create_request(this), output);
  }

  // .flyteidl.core.Identifier launch_plan = 2;
  if (has_launch_plan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::launch_plan(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.EventOccurredRequest)
}

::google::protobuf::uint8* EventOccurredRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.EventOccurredRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.ExecutionCreateRequest execution_create_request = 1;
  if (has_execution_create_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::execution_create_request(this), target);
  }

  // .flyteidl.core.Identifier launch_plan = 2;
  if (has_launch_plan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::launch_plan(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.EventOccurredRequest)
  return target;
}

size_t EventOccurredRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.EventOccurredRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (target_case()) {
    // .flyteidl.admin.ExecutionCreateRequest execution_create_request = 1;
    case kExecutionCreateRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_.execution_create_request_);
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  switch (reference_case()) {
    // .flyteidl.core.Identifier launch_plan = 2;
    case kLaunchPlan: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reference_.launch_plan_);
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventOccurredRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.EventOccurredRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EventOccurredRequest* source =
      ::google::protobuf::DynamicCastToGenerated<EventOccurredRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.EventOccurredRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.EventOccurredRequest)
    MergeFrom(*source);
  }
}

void EventOccurredRequest::MergeFrom(const EventOccurredRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.EventOccurredRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.target_case()) {
    case kExecutionCreateRequest: {
      mutable_execution_create_request()->::flyteidl::admin::ExecutionCreateRequest::MergeFrom(from.execution_create_request());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  switch (from.reference_case()) {
    case kLaunchPlan: {
      mutable_launch_plan()->::flyteidl::core::Identifier::MergeFrom(from.launch_plan());
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
}

void EventOccurredRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.EventOccurredRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventOccurredRequest::CopyFrom(const EventOccurredRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.EventOccurredRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventOccurredRequest::IsInitialized() const {
  return true;
}

void EventOccurredRequest::Swap(EventOccurredRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventOccurredRequest::InternalSwap(EventOccurredRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(target_, other->target_);
  swap(reference_, other->reference_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::google::protobuf::Metadata EventOccurredRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fevent_2fsensor_2eproto);
  return ::file_level_metadata_flyteidl_2fevent_2fsensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EventOccurredResponse::InitAsDefaultInstance() {
}
class EventOccurredResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventOccurredResponse::EventOccurredResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.EventOccurredResponse)
}
EventOccurredResponse::EventOccurredResponse(const EventOccurredResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.EventOccurredResponse)
}

void EventOccurredResponse::SharedCtor() {
}

EventOccurredResponse::~EventOccurredResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.event.EventOccurredResponse)
  SharedDtor();
}

void EventOccurredResponse::SharedDtor() {
}

void EventOccurredResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventOccurredResponse& EventOccurredResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EventOccurredResponse_flyteidl_2fevent_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void EventOccurredResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.EventOccurredResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventOccurredResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EventOccurredResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventOccurredResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.EventOccurredResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.EventOccurredResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.EventOccurredResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventOccurredResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.EventOccurredResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.EventOccurredResponse)
}

::google::protobuf::uint8* EventOccurredResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.EventOccurredResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.EventOccurredResponse)
  return target;
}

size_t EventOccurredResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.EventOccurredResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventOccurredResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.EventOccurredResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EventOccurredResponse* source =
      ::google::protobuf::DynamicCastToGenerated<EventOccurredResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.EventOccurredResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.EventOccurredResponse)
    MergeFrom(*source);
  }
}

void EventOccurredResponse::MergeFrom(const EventOccurredResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.EventOccurredResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EventOccurredResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.EventOccurredResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventOccurredResponse::CopyFrom(const EventOccurredResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.EventOccurredResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventOccurredResponse::IsInitialized() const {
  return true;
}

void EventOccurredResponse::Swap(EventOccurredResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventOccurredResponse::InternalSwap(EventOccurredResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EventOccurredResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fevent_2fsensor_2eproto);
  return ::file_level_metadata_flyteidl_2fevent_2fsensor_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace event
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::event::WorkflowEvent* Arena::CreateMaybeMessage< ::flyteidl::event::WorkflowEvent >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::event::WorkflowEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::FilePrefix* Arena::CreateMaybeMessage< ::flyteidl::event::FilePrefix >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::event::FilePrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::RemoteFileEvent* Arena::CreateMaybeMessage< ::flyteidl::event::RemoteFileEvent >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::event::RemoteFileEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::CustomEvent* Arena::CreateMaybeMessage< ::flyteidl::event::CustomEvent >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::event::CustomEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::EventTarget* Arena::CreateMaybeMessage< ::flyteidl::event::EventTarget >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::event::EventTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::EventTargetListRequest* Arena::CreateMaybeMessage< ::flyteidl::event::EventTargetListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::event::EventTargetListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::EventTargetList* Arena::CreateMaybeMessage< ::flyteidl::event::EventTargetList >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::event::EventTargetList >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::EventOccurredRequest* Arena::CreateMaybeMessage< ::flyteidl::event::EventOccurredRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::event::EventOccurredRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::EventOccurredResponse* Arena::CreateMaybeMessage< ::flyteidl::event::EventOccurredResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::event::EventOccurredResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
