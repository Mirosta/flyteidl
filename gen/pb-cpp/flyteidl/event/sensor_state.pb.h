// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/event/sensor_state.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fevent_2fsensor_5fstate_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fevent_2fsensor_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fevent_2fsensor_5fstate_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fevent_2fsensor_5fstate_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fevent_2fsensor_5fstate_2eproto();
namespace flyteidl {
namespace event {
class EventSensorState;
class EventSensorStateDefaultTypeInternal;
extern EventSensorStateDefaultTypeInternal _EventSensorState_default_instance_;
class EventSensorStateGetRequest;
class EventSensorStateGetRequestDefaultTypeInternal;
extern EventSensorStateGetRequestDefaultTypeInternal _EventSensorStateGetRequest_default_instance_;
class EventSensorStateGetResponse;
class EventSensorStateGetResponseDefaultTypeInternal;
extern EventSensorStateGetResponseDefaultTypeInternal _EventSensorStateGetResponse_default_instance_;
class EventSensorStateUpdateRequest;
class EventSensorStateUpdateRequestDefaultTypeInternal;
extern EventSensorStateUpdateRequestDefaultTypeInternal _EventSensorStateUpdateRequest_default_instance_;
class EventSensorStateUpdateResponse;
class EventSensorStateUpdateResponseDefaultTypeInternal;
extern EventSensorStateUpdateResponseDefaultTypeInternal _EventSensorStateUpdateResponse_default_instance_;
}  // namespace event
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::event::EventSensorState* Arena::CreateMaybeMessage<::flyteidl::event::EventSensorState>(Arena*);
template<> ::flyteidl::event::EventSensorStateGetRequest* Arena::CreateMaybeMessage<::flyteidl::event::EventSensorStateGetRequest>(Arena*);
template<> ::flyteidl::event::EventSensorStateGetResponse* Arena::CreateMaybeMessage<::flyteidl::event::EventSensorStateGetResponse>(Arena*);
template<> ::flyteidl::event::EventSensorStateUpdateRequest* Arena::CreateMaybeMessage<::flyteidl::event::EventSensorStateUpdateRequest>(Arena*);
template<> ::flyteidl::event::EventSensorStateUpdateResponse* Arena::CreateMaybeMessage<::flyteidl::event::EventSensorStateUpdateResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace event {

// ===================================================================

class EventSensorState final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.EventSensorState) */ {
 public:
  EventSensorState();
  virtual ~EventSensorState();

  EventSensorState(const EventSensorState& from);

  inline EventSensorState& operator=(const EventSensorState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventSensorState(EventSensorState&& from) noexcept
    : EventSensorState() {
    *this = ::std::move(from);
  }

  inline EventSensorState& operator=(EventSensorState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EventSensorState& default_instance();

  enum StateCase {
    kUri = 1,
    kCustomInfo = 2,
    STATE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventSensorState* internal_default_instance() {
    return reinterpret_cast<const EventSensorState*>(
               &_EventSensorState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EventSensorState* other);
  friend void swap(EventSensorState& a, EventSensorState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventSensorState* New() const final {
    return CreateMaybeMessage<EventSensorState>(nullptr);
  }

  EventSensorState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventSensorState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventSensorState& from);
  void MergeFrom(const EventSensorState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventSensorState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uri = 1;
  private:
  bool has_uri() const;
  public:
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // .google.protobuf.Struct custom_info = 2;
  bool has_custom_info() const;
  void clear_custom_info();
  static const int kCustomInfoFieldNumber = 2;
  const ::google::protobuf::Struct& custom_info() const;
  ::google::protobuf::Struct* release_custom_info();
  ::google::protobuf::Struct* mutable_custom_info();
  void set_allocated_custom_info(::google::protobuf::Struct* custom_info);

  void clear_state();
  StateCase state_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.event.EventSensorState)
 private:
  class HasBitSetters;
  void set_has_uri();
  void set_has_custom_info();

  inline bool has_state() const;
  inline void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union StateUnion {
    StateUnion() {}
    ::google::protobuf::internal::ArenaStringPtr uri_;
    ::google::protobuf::Struct* custom_info_;
  } state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fevent_2fsensor_5fstate_2eproto;
};
// -------------------------------------------------------------------

class EventSensorStateGetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.EventSensorStateGetRequest) */ {
 public:
  EventSensorStateGetRequest();
  virtual ~EventSensorStateGetRequest();

  EventSensorStateGetRequest(const EventSensorStateGetRequest& from);

  inline EventSensorStateGetRequest& operator=(const EventSensorStateGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventSensorStateGetRequest(EventSensorStateGetRequest&& from) noexcept
    : EventSensorStateGetRequest() {
    *this = ::std::move(from);
  }

  inline EventSensorStateGetRequest& operator=(EventSensorStateGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EventSensorStateGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventSensorStateGetRequest* internal_default_instance() {
    return reinterpret_cast<const EventSensorStateGetRequest*>(
               &_EventSensorStateGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(EventSensorStateGetRequest* other);
  friend void swap(EventSensorStateGetRequest& a, EventSensorStateGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventSensorStateGetRequest* New() const final {
    return CreateMaybeMessage<EventSensorStateGetRequest>(nullptr);
  }

  EventSensorStateGetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventSensorStateGetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventSensorStateGetRequest& from);
  void MergeFrom(const EventSensorStateGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventSensorStateGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string event_type = 1;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  const ::std::string& event_type() const;
  void set_event_type(const ::std::string& value);
  #if LANG_CXX11
  void set_event_type(::std::string&& value);
  #endif
  void set_event_type(const char* value);
  void set_event_type(const char* value, size_t size);
  ::std::string* mutable_event_type();
  ::std::string* release_event_type();
  void set_allocated_event_type(::std::string* event_type);

  // @@protoc_insertion_point(class_scope:flyteidl.event.EventSensorStateGetRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr event_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fsensor_5fstate_2eproto;
};
// -------------------------------------------------------------------

class EventSensorStateGetResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.EventSensorStateGetResponse) */ {
 public:
  EventSensorStateGetResponse();
  virtual ~EventSensorStateGetResponse();

  EventSensorStateGetResponse(const EventSensorStateGetResponse& from);

  inline EventSensorStateGetResponse& operator=(const EventSensorStateGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventSensorStateGetResponse(EventSensorStateGetResponse&& from) noexcept
    : EventSensorStateGetResponse() {
    *this = ::std::move(from);
  }

  inline EventSensorStateGetResponse& operator=(EventSensorStateGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EventSensorStateGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventSensorStateGetResponse* internal_default_instance() {
    return reinterpret_cast<const EventSensorStateGetResponse*>(
               &_EventSensorStateGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(EventSensorStateGetResponse* other);
  friend void swap(EventSensorStateGetResponse& a, EventSensorStateGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventSensorStateGetResponse* New() const final {
    return CreateMaybeMessage<EventSensorStateGetResponse>(nullptr);
  }

  EventSensorStateGetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventSensorStateGetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventSensorStateGetResponse& from);
  void MergeFrom(const EventSensorStateGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventSensorStateGetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.event.EventSensorState state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  const ::flyteidl::event::EventSensorState& state() const;
  ::flyteidl::event::EventSensorState* release_state();
  ::flyteidl::event::EventSensorState* mutable_state();
  void set_allocated_state(::flyteidl::event::EventSensorState* state);

  // .google.protobuf.Timestamp updated_at = 2;
  bool has_updated_at() const;
  void clear_updated_at();
  static const int kUpdatedAtFieldNumber = 2;
  const ::google::protobuf::Timestamp& updated_at() const;
  ::google::protobuf::Timestamp* release_updated_at();
  ::google::protobuf::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::google::protobuf::Timestamp* updated_at);

  // @@protoc_insertion_point(class_scope:flyteidl.event.EventSensorStateGetResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::event::EventSensorState* state_;
  ::google::protobuf::Timestamp* updated_at_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fsensor_5fstate_2eproto;
};
// -------------------------------------------------------------------

class EventSensorStateUpdateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.EventSensorStateUpdateRequest) */ {
 public:
  EventSensorStateUpdateRequest();
  virtual ~EventSensorStateUpdateRequest();

  EventSensorStateUpdateRequest(const EventSensorStateUpdateRequest& from);

  inline EventSensorStateUpdateRequest& operator=(const EventSensorStateUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventSensorStateUpdateRequest(EventSensorStateUpdateRequest&& from) noexcept
    : EventSensorStateUpdateRequest() {
    *this = ::std::move(from);
  }

  inline EventSensorStateUpdateRequest& operator=(EventSensorStateUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EventSensorStateUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventSensorStateUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const EventSensorStateUpdateRequest*>(
               &_EventSensorStateUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(EventSensorStateUpdateRequest* other);
  friend void swap(EventSensorStateUpdateRequest& a, EventSensorStateUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventSensorStateUpdateRequest* New() const final {
    return CreateMaybeMessage<EventSensorStateUpdateRequest>(nullptr);
  }

  EventSensorStateUpdateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventSensorStateUpdateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventSensorStateUpdateRequest& from);
  void MergeFrom(const EventSensorStateUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventSensorStateUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string event_type = 1;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  const ::std::string& event_type() const;
  void set_event_type(const ::std::string& value);
  #if LANG_CXX11
  void set_event_type(::std::string&& value);
  #endif
  void set_event_type(const char* value);
  void set_event_type(const char* value, size_t size);
  ::std::string* mutable_event_type();
  ::std::string* release_event_type();
  void set_allocated_event_type(::std::string* event_type);

  // .flyteidl.event.EventSensorState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::flyteidl::event::EventSensorState& state() const;
  ::flyteidl::event::EventSensorState* release_state();
  ::flyteidl::event::EventSensorState* mutable_state();
  void set_allocated_state(::flyteidl::event::EventSensorState* state);

  // .google.protobuf.Timestamp updated_at = 3;
  bool has_updated_at() const;
  void clear_updated_at();
  static const int kUpdatedAtFieldNumber = 3;
  const ::google::protobuf::Timestamp& updated_at() const;
  ::google::protobuf::Timestamp* release_updated_at();
  ::google::protobuf::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::google::protobuf::Timestamp* updated_at);

  // @@protoc_insertion_point(class_scope:flyteidl.event.EventSensorStateUpdateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr event_type_;
  ::flyteidl::event::EventSensorState* state_;
  ::google::protobuf::Timestamp* updated_at_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fsensor_5fstate_2eproto;
};
// -------------------------------------------------------------------

class EventSensorStateUpdateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.EventSensorStateUpdateResponse) */ {
 public:
  EventSensorStateUpdateResponse();
  virtual ~EventSensorStateUpdateResponse();

  EventSensorStateUpdateResponse(const EventSensorStateUpdateResponse& from);

  inline EventSensorStateUpdateResponse& operator=(const EventSensorStateUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventSensorStateUpdateResponse(EventSensorStateUpdateResponse&& from) noexcept
    : EventSensorStateUpdateResponse() {
    *this = ::std::move(from);
  }

  inline EventSensorStateUpdateResponse& operator=(EventSensorStateUpdateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EventSensorStateUpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventSensorStateUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const EventSensorStateUpdateResponse*>(
               &_EventSensorStateUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(EventSensorStateUpdateResponse* other);
  friend void swap(EventSensorStateUpdateResponse& a, EventSensorStateUpdateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventSensorStateUpdateResponse* New() const final {
    return CreateMaybeMessage<EventSensorStateUpdateResponse>(nullptr);
  }

  EventSensorStateUpdateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventSensorStateUpdateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventSensorStateUpdateResponse& from);
  void MergeFrom(const EventSensorStateUpdateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventSensorStateUpdateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.event.EventSensorStateUpdateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fsensor_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventSensorState

// string uri = 1;
inline bool EventSensorState::has_uri() const {
  return state_case() == kUri;
}
inline void EventSensorState::set_has_uri() {
  _oneof_case_[0] = kUri;
}
inline void EventSensorState::clear_uri() {
  if (has_uri()) {
    state_.uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_state();
  }
}
inline const ::std::string& EventSensorState::uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.EventSensorState.uri)
  if (has_uri()) {
    return state_.uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void EventSensorState::set_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.EventSensorState.uri)
  if (!has_uri()) {
    clear_state();
    set_has_uri();
    state_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  state_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.EventSensorState.uri)
}
#if LANG_CXX11
inline void EventSensorState::set_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.EventSensorState.uri)
  if (!has_uri()) {
    clear_state();
    set_has_uri();
    state_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  state_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.EventSensorState.uri)
}
#endif
inline void EventSensorState::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_uri()) {
    clear_state();
    set_has_uri();
    state_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  state_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.EventSensorState.uri)
}
inline void EventSensorState::set_uri(const char* value, size_t size) {
  if (!has_uri()) {
    clear_state();
    set_has_uri();
    state_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  state_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.EventSensorState.uri)
}
inline ::std::string* EventSensorState::mutable_uri() {
  if (!has_uri()) {
    clear_state();
    set_has_uri();
    state_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.EventSensorState.uri)
  return state_.uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventSensorState::release_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.event.EventSensorState.uri)
  if (has_uri()) {
    clear_has_state();
    return state_.uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void EventSensorState::set_allocated_uri(::std::string* uri) {
  if (has_state()) {
    clear_state();
  }
  if (uri != nullptr) {
    set_has_uri();
    state_.uri_.UnsafeSetDefault(uri);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.EventSensorState.uri)
}

// .google.protobuf.Struct custom_info = 2;
inline bool EventSensorState::has_custom_info() const {
  return state_case() == kCustomInfo;
}
inline void EventSensorState::set_has_custom_info() {
  _oneof_case_[0] = kCustomInfo;
}
inline ::google::protobuf::Struct* EventSensorState::release_custom_info() {
  // @@protoc_insertion_point(field_release:flyteidl.event.EventSensorState.custom_info)
  if (has_custom_info()) {
    clear_has_state();
      ::google::protobuf::Struct* temp = state_.custom_info_;
    state_.custom_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Struct& EventSensorState::custom_info() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.EventSensorState.custom_info)
  return has_custom_info()
      ? *state_.custom_info_
      : *reinterpret_cast< ::google::protobuf::Struct*>(&::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* EventSensorState::mutable_custom_info() {
  if (!has_custom_info()) {
    clear_state();
    set_has_custom_info();
    state_.custom_info_ = CreateMaybeMessage< ::google::protobuf::Struct >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.EventSensorState.custom_info)
  return state_.custom_info_;
}

inline bool EventSensorState::has_state() const {
  return state_case() != STATE_NOT_SET;
}
inline void EventSensorState::clear_has_state() {
  _oneof_case_[0] = STATE_NOT_SET;
}
inline EventSensorState::StateCase EventSensorState::state_case() const {
  return EventSensorState::StateCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EventSensorStateGetRequest

// string event_type = 1;
inline void EventSensorStateGetRequest::clear_event_type() {
  event_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventSensorStateGetRequest::event_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.EventSensorStateGetRequest.event_type)
  return event_type_.GetNoArena();
}
inline void EventSensorStateGetRequest::set_event_type(const ::std::string& value) {
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.EventSensorStateGetRequest.event_type)
}
#if LANG_CXX11
inline void EventSensorStateGetRequest::set_event_type(::std::string&& value) {
  
  event_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.EventSensorStateGetRequest.event_type)
}
#endif
inline void EventSensorStateGetRequest::set_event_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.EventSensorStateGetRequest.event_type)
}
inline void EventSensorStateGetRequest::set_event_type(const char* value, size_t size) {
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.EventSensorStateGetRequest.event_type)
}
inline ::std::string* EventSensorStateGetRequest::mutable_event_type() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.EventSensorStateGetRequest.event_type)
  return event_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventSensorStateGetRequest::release_event_type() {
  // @@protoc_insertion_point(field_release:flyteidl.event.EventSensorStateGetRequest.event_type)
  
  return event_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventSensorStateGetRequest::set_allocated_event_type(::std::string* event_type) {
  if (event_type != nullptr) {
    
  } else {
    
  }
  event_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_type);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.EventSensorStateGetRequest.event_type)
}

// -------------------------------------------------------------------

// EventSensorStateGetResponse

// .flyteidl.event.EventSensorState state = 1;
inline bool EventSensorStateGetResponse::has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline void EventSensorStateGetResponse::clear_state() {
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::flyteidl::event::EventSensorState& EventSensorStateGetResponse::state() const {
  const ::flyteidl::event::EventSensorState* p = state_;
  // @@protoc_insertion_point(field_get:flyteidl.event.EventSensorStateGetResponse.state)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::event::EventSensorState*>(
      &::flyteidl::event::_EventSensorState_default_instance_);
}
inline ::flyteidl::event::EventSensorState* EventSensorStateGetResponse::release_state() {
  // @@protoc_insertion_point(field_release:flyteidl.event.EventSensorStateGetResponse.state)
  
  ::flyteidl::event::EventSensorState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::flyteidl::event::EventSensorState* EventSensorStateGetResponse::mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::event::EventSensorState>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.EventSensorStateGetResponse.state)
  return state_;
}
inline void EventSensorStateGetResponse::set_allocated_state(::flyteidl::event::EventSensorState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.EventSensorStateGetResponse.state)
}

// .google.protobuf.Timestamp updated_at = 2;
inline bool EventSensorStateGetResponse::has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& EventSensorStateGetResponse::updated_at() const {
  const ::google::protobuf::Timestamp* p = updated_at_;
  // @@protoc_insertion_point(field_get:flyteidl.event.EventSensorStateGetResponse.updated_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* EventSensorStateGetResponse::release_updated_at() {
  // @@protoc_insertion_point(field_release:flyteidl.event.EventSensorStateGetResponse.updated_at)
  
  ::google::protobuf::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* EventSensorStateGetResponse::mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    updated_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.EventSensorStateGetResponse.updated_at)
  return updated_at_;
}
inline void EventSensorStateGetResponse::set_allocated_updated_at(::google::protobuf::Timestamp* updated_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.EventSensorStateGetResponse.updated_at)
}

// -------------------------------------------------------------------

// EventSensorStateUpdateRequest

// string event_type = 1;
inline void EventSensorStateUpdateRequest::clear_event_type() {
  event_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventSensorStateUpdateRequest::event_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.EventSensorStateUpdateRequest.event_type)
  return event_type_.GetNoArena();
}
inline void EventSensorStateUpdateRequest::set_event_type(const ::std::string& value) {
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.EventSensorStateUpdateRequest.event_type)
}
#if LANG_CXX11
inline void EventSensorStateUpdateRequest::set_event_type(::std::string&& value) {
  
  event_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.EventSensorStateUpdateRequest.event_type)
}
#endif
inline void EventSensorStateUpdateRequest::set_event_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.EventSensorStateUpdateRequest.event_type)
}
inline void EventSensorStateUpdateRequest::set_event_type(const char* value, size_t size) {
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.EventSensorStateUpdateRequest.event_type)
}
inline ::std::string* EventSensorStateUpdateRequest::mutable_event_type() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.EventSensorStateUpdateRequest.event_type)
  return event_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventSensorStateUpdateRequest::release_event_type() {
  // @@protoc_insertion_point(field_release:flyteidl.event.EventSensorStateUpdateRequest.event_type)
  
  return event_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventSensorStateUpdateRequest::set_allocated_event_type(::std::string* event_type) {
  if (event_type != nullptr) {
    
  } else {
    
  }
  event_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_type);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.EventSensorStateUpdateRequest.event_type)
}

// .flyteidl.event.EventSensorState state = 2;
inline bool EventSensorStateUpdateRequest::has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline void EventSensorStateUpdateRequest::clear_state() {
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::flyteidl::event::EventSensorState& EventSensorStateUpdateRequest::state() const {
  const ::flyteidl::event::EventSensorState* p = state_;
  // @@protoc_insertion_point(field_get:flyteidl.event.EventSensorStateUpdateRequest.state)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::event::EventSensorState*>(
      &::flyteidl::event::_EventSensorState_default_instance_);
}
inline ::flyteidl::event::EventSensorState* EventSensorStateUpdateRequest::release_state() {
  // @@protoc_insertion_point(field_release:flyteidl.event.EventSensorStateUpdateRequest.state)
  
  ::flyteidl::event::EventSensorState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::flyteidl::event::EventSensorState* EventSensorStateUpdateRequest::mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::event::EventSensorState>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.EventSensorStateUpdateRequest.state)
  return state_;
}
inline void EventSensorStateUpdateRequest::set_allocated_state(::flyteidl::event::EventSensorState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.EventSensorStateUpdateRequest.state)
}

// .google.protobuf.Timestamp updated_at = 3;
inline bool EventSensorStateUpdateRequest::has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& EventSensorStateUpdateRequest::updated_at() const {
  const ::google::protobuf::Timestamp* p = updated_at_;
  // @@protoc_insertion_point(field_get:flyteidl.event.EventSensorStateUpdateRequest.updated_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* EventSensorStateUpdateRequest::release_updated_at() {
  // @@protoc_insertion_point(field_release:flyteidl.event.EventSensorStateUpdateRequest.updated_at)
  
  ::google::protobuf::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* EventSensorStateUpdateRequest::mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    updated_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.EventSensorStateUpdateRequest.updated_at)
  return updated_at_;
}
inline void EventSensorStateUpdateRequest::set_allocated_updated_at(::google::protobuf::Timestamp* updated_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.EventSensorStateUpdateRequest.updated_at)
}

// -------------------------------------------------------------------

// EventSensorStateUpdateResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace event
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fevent_2fsensor_5fstate_2eproto
