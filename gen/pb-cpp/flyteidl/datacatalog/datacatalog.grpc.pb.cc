// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flyteidl/datacatalog/datacatalog.proto

#include "flyteidl/datacatalog/datacatalog.pb.h"
#include "flyteidl/datacatalog/datacatalog.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pb {
namespace lyft {
namespace datacatalog {

static const char* Artifacts_method_names[] = {
  "/pb.lyft.datacatalog.Artifacts/Get",
  "/pb.lyft.datacatalog.Artifacts/Query",
  "/pb.lyft.datacatalog.Artifacts/Create",
  "/pb.lyft.datacatalog.Artifacts/GenerateProvenance",
};

std::unique_ptr< Artifacts::Stub> Artifacts::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Artifacts::Stub> stub(new Artifacts::Stub(channel));
  return stub;
}

Artifacts::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Get_(Artifacts_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Query_(Artifacts_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Create_(Artifacts_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GenerateProvenance_(Artifacts_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Artifacts::Stub::Get(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GetRequest& request, ::pb::lyft::datacatalog::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Get_, context, request, response);
}

void Artifacts::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GetRequest* request, ::pb::lyft::datacatalog::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void Artifacts::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void Artifacts::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GetRequest* request, ::pb::lyft::datacatalog::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

void Artifacts::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::GetResponse>* Artifacts::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pb::lyft::datacatalog::GetResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::GetResponse>* Artifacts::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pb::lyft::datacatalog::GetResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, false);
}

::grpc::Status Artifacts::Stub::Query(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::QueryRequest& request, ::pb::lyft::datacatalog::QueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Query_, context, request, response);
}

void Artifacts::Stub::experimental_async::Query(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::QueryRequest* request, ::pb::lyft::datacatalog::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, std::move(f));
}

void Artifacts::Stub::experimental_async::Query(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, std::move(f));
}

void Artifacts::Stub::experimental_async::Query(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::QueryRequest* request, ::pb::lyft::datacatalog::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, reactor);
}

void Artifacts::Stub::experimental_async::Query(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::QueryResponse>* Artifacts::Stub::AsyncQueryRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::QueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pb::lyft::datacatalog::QueryResponse>::Create(channel_.get(), cq, rpcmethod_Query_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::QueryResponse>* Artifacts::Stub::PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::QueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pb::lyft::datacatalog::QueryResponse>::Create(channel_.get(), cq, rpcmethod_Query_, context, request, false);
}

::grpc::Status Artifacts::Stub::Create(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::CreateRequest& request, ::pb::lyft::datacatalog::CreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Create_, context, request, response);
}

void Artifacts::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::CreateRequest* request, ::pb::lyft::datacatalog::CreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void Artifacts::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::CreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void Artifacts::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::CreateRequest* request, ::pb::lyft::datacatalog::CreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

void Artifacts::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::CreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::CreateResponse>* Artifacts::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pb::lyft::datacatalog::CreateResponse>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::CreateResponse>* Artifacts::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pb::lyft::datacatalog::CreateResponse>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, false);
}

::grpc::Status Artifacts::Stub::GenerateProvenance(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest& request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GenerateProvenance_, context, request, response);
}

void Artifacts::Stub::experimental_async::GenerateProvenance(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest* request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GenerateProvenance_, context, request, response, std::move(f));
}

void Artifacts::Stub::experimental_async::GenerateProvenance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GenerateProvenance_, context, request, response, std::move(f));
}

void Artifacts::Stub::experimental_async::GenerateProvenance(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest* request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GenerateProvenance_, context, request, response, reactor);
}

void Artifacts::Stub::experimental_async::GenerateProvenance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GenerateProvenance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::GenerateProvenanceResponse>* Artifacts::Stub::AsyncGenerateProvenanceRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pb::lyft::datacatalog::GenerateProvenanceResponse>::Create(channel_.get(), cq, rpcmethod_GenerateProvenance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::GenerateProvenanceResponse>* Artifacts::Stub::PrepareAsyncGenerateProvenanceRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pb::lyft::datacatalog::GenerateProvenanceResponse>::Create(channel_.get(), cq, rpcmethod_GenerateProvenance_, context, request, false);
}

Artifacts::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Artifacts_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Artifacts::Service, ::pb::lyft::datacatalog::GetRequest, ::pb::lyft::datacatalog::GetResponse>(
          std::mem_fn(&Artifacts::Service::Get), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Artifacts_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Artifacts::Service, ::pb::lyft::datacatalog::QueryRequest, ::pb::lyft::datacatalog::QueryResponse>(
          std::mem_fn(&Artifacts::Service::Query), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Artifacts_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Artifacts::Service, ::pb::lyft::datacatalog::CreateRequest, ::pb::lyft::datacatalog::CreateResponse>(
          std::mem_fn(&Artifacts::Service::Create), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Artifacts_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Artifacts::Service, ::pb::lyft::datacatalog::GenerateProvenanceRequest, ::pb::lyft::datacatalog::GenerateProvenanceResponse>(
          std::mem_fn(&Artifacts::Service::GenerateProvenance), this)));
}

Artifacts::Service::~Service() {
}

::grpc::Status Artifacts::Service::Get(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::GetRequest* request, ::pb::lyft::datacatalog::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Artifacts::Service::Query(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::QueryRequest* request, ::pb::lyft::datacatalog::QueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Artifacts::Service::Create(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::CreateRequest* request, ::pb::lyft::datacatalog::CreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Artifacts::Service::GenerateProvenance(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest* request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pb
}  // namespace lyft
}  // namespace datacatalog

