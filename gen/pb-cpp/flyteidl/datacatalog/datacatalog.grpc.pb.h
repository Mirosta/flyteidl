// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flyteidl/datacatalog/datacatalog.proto
#ifndef GRPC_flyteidl_2fdatacatalog_2fdatacatalog_2eproto__INCLUDED
#define GRPC_flyteidl_2fdatacatalog_2fdatacatalog_2eproto__INCLUDED

#include "flyteidl/datacatalog/datacatalog.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class Channel;
class CompletionQueue;
class ServerCompletionQueue;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc_impl

namespace grpc {
class ServerContext;
}  // namespace grpc

namespace pb {
namespace lyft {
namespace datacatalog {

class Artifacts final {
 public:
  static constexpr char const* service_full_name() {
    return "pb.lyft.datacatalog.Artifacts";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GetRequest& request, ::pb::lyft::datacatalog::GetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::GetResponse>> AsyncGet(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::GetResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::GetResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::GetResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    virtual ::grpc::Status Query(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::QueryRequest& request, ::pb::lyft::datacatalog::QueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::QueryResponse>> AsyncQuery(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::QueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::QueryResponse>>(AsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::QueryResponse>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::QueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::QueryResponse>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::CreateRequest& request, ::pb::lyft::datacatalog::CreateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::CreateResponse>> AsyncCreate(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::CreateResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::CreateResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::CreateResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    virtual ::grpc::Status GenerateProvenance(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest& request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::GenerateProvenanceResponse>> AsyncGenerateProvenance(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::GenerateProvenanceResponse>>(AsyncGenerateProvenanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::GenerateProvenanceResponse>> PrepareAsyncGenerateProvenance(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::GenerateProvenanceResponse>>(PrepareAsyncGenerateProvenanceRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Get(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GetRequest* request, ::pb::lyft::datacatalog::GetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::GetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GetRequest* request, ::pb::lyft::datacatalog::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Query(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::QueryRequest* request, ::pb::lyft::datacatalog::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Query(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Query(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::QueryRequest* request, ::pb::lyft::datacatalog::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Query(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::CreateRequest* request, ::pb::lyft::datacatalog::CreateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::CreateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::CreateRequest* request, ::pb::lyft::datacatalog::CreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::CreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GenerateProvenance(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest* request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GenerateProvenance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GenerateProvenance(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest* request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GenerateProvenance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::GetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::GetResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::QueryResponse>* AsyncQueryRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::QueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::QueryResponse>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::QueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::CreateResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::CreateResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::GenerateProvenanceResponse>* AsyncGenerateProvenanceRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::lyft::datacatalog::GenerateProvenanceResponse>* PrepareAsyncGenerateProvenanceRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Get(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GetRequest& request, ::pb::lyft::datacatalog::GetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::GetResponse>> AsyncGet(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::GetResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::GetResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::GetResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status Query(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::QueryRequest& request, ::pb::lyft::datacatalog::QueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::QueryResponse>> AsyncQuery(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::QueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::QueryResponse>>(AsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::QueryResponse>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::QueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::QueryResponse>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    ::grpc::Status Create(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::CreateRequest& request, ::pb::lyft::datacatalog::CreateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::CreateResponse>> AsyncCreate(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::CreateResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::CreateResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::CreateResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status GenerateProvenance(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest& request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::GenerateProvenanceResponse>> AsyncGenerateProvenance(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::GenerateProvenanceResponse>>(AsyncGenerateProvenanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::GenerateProvenanceResponse>> PrepareAsyncGenerateProvenance(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::GenerateProvenanceResponse>>(PrepareAsyncGenerateProvenanceRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Get(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GetRequest* request, ::pb::lyft::datacatalog::GetResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::GetResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GetRequest* request, ::pb::lyft::datacatalog::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Query(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::QueryRequest* request, ::pb::lyft::datacatalog::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void Query(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void Query(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::QueryRequest* request, ::pb::lyft::datacatalog::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Query(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Create(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::CreateRequest* request, ::pb::lyft::datacatalog::CreateResponse* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::CreateResponse* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::CreateRequest* request, ::pb::lyft::datacatalog::CreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::CreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GenerateProvenance(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest* request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response, std::function<void(::grpc::Status)>) override;
      void GenerateProvenance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response, std::function<void(::grpc::Status)>) override;
      void GenerateProvenance(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest* request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GenerateProvenance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::GetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::GetResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::QueryResponse>* AsyncQueryRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::QueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::QueryResponse>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::QueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::CreateResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::CreateResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::GenerateProvenanceResponse>* AsyncGenerateProvenanceRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::lyft::datacatalog::GenerateProvenanceResponse>* PrepareAsyncGenerateProvenanceRaw(::grpc::ClientContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_Query_;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateProvenance_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::GetRequest* request, ::pb::lyft::datacatalog::GetResponse* response);
    virtual ::grpc::Status Query(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::QueryRequest* request, ::pb::lyft::datacatalog::QueryResponse* response);
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::CreateRequest* request, ::pb::lyft::datacatalog::CreateResponse* response);
    virtual ::grpc::Status GenerateProvenance(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest* request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::GetRequest* request, ::pb::lyft::datacatalog::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::pb::lyft::datacatalog::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::lyft::datacatalog::GetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Query() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::QueryRequest* request, ::pb::lyft::datacatalog::QueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuery(::grpc::ServerContext* context, ::pb::lyft::datacatalog::QueryRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::lyft::datacatalog::QueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::CreateRequest* request, ::pb::lyft::datacatalog::CreateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::pb::lyft::datacatalog::CreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::lyft::datacatalog::CreateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateProvenance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GenerateProvenance() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GenerateProvenance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateProvenance(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest* request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateProvenance(::grpc::ServerContext* context, ::pb::lyft::datacatalog::GenerateProvenanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::pb::lyft::datacatalog::GenerateProvenanceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Get<WithAsyncMethod_Query<WithAsyncMethod_Create<WithAsyncMethod_GenerateProvenance<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Get() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::pb::lyft::datacatalog::GetRequest, ::pb::lyft::datacatalog::GetResponse>(
          [this](::grpc::ServerContext* context,
                 const ::pb::lyft::datacatalog::GetRequest* request,
                 ::pb::lyft::datacatalog::GetResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Get(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Get(
        ::grpc::experimental::MessageAllocator< ::pb::lyft::datacatalog::GetRequest, ::pb::lyft::datacatalog::GetResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pb::lyft::datacatalog::GetRequest, ::pb::lyft::datacatalog::GetResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::GetRequest* request, ::pb::lyft::datacatalog::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Get(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::GetRequest* request, ::pb::lyft::datacatalog::GetResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Query() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::pb::lyft::datacatalog::QueryRequest, ::pb::lyft::datacatalog::QueryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::pb::lyft::datacatalog::QueryRequest* request,
                 ::pb::lyft::datacatalog::QueryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Query(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Query(
        ::grpc::experimental::MessageAllocator< ::pb::lyft::datacatalog::QueryRequest, ::pb::lyft::datacatalog::QueryResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pb::lyft::datacatalog::QueryRequest, ::pb::lyft::datacatalog::QueryResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::QueryRequest* request, ::pb::lyft::datacatalog::QueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Query(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::QueryRequest* request, ::pb::lyft::datacatalog::QueryResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Create() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::pb::lyft::datacatalog::CreateRequest, ::pb::lyft::datacatalog::CreateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::pb::lyft::datacatalog::CreateRequest* request,
                 ::pb::lyft::datacatalog::CreateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Create(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Create(
        ::grpc::experimental::MessageAllocator< ::pb::lyft::datacatalog::CreateRequest, ::pb::lyft::datacatalog::CreateResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pb::lyft::datacatalog::CreateRequest, ::pb::lyft::datacatalog::CreateResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::CreateRequest* request, ::pb::lyft::datacatalog::CreateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Create(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::CreateRequest* request, ::pb::lyft::datacatalog::CreateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GenerateProvenance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GenerateProvenance() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::pb::lyft::datacatalog::GenerateProvenanceRequest, ::pb::lyft::datacatalog::GenerateProvenanceResponse>(
          [this](::grpc::ServerContext* context,
                 const ::pb::lyft::datacatalog::GenerateProvenanceRequest* request,
                 ::pb::lyft::datacatalog::GenerateProvenanceResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GenerateProvenance(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GenerateProvenance(
        ::grpc::experimental::MessageAllocator< ::pb::lyft::datacatalog::GenerateProvenanceRequest, ::pb::lyft::datacatalog::GenerateProvenanceResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pb::lyft::datacatalog::GenerateProvenanceRequest, ::pb::lyft::datacatalog::GenerateProvenanceResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GenerateProvenance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateProvenance(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest* request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GenerateProvenance(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest* request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Get<ExperimentalWithCallbackMethod_Query<ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_GenerateProvenance<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::GetRequest* request, ::pb::lyft::datacatalog::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Query() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::QueryRequest* request, ::pb::lyft::datacatalog::QueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::CreateRequest* request, ::pb::lyft::datacatalog::CreateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateProvenance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GenerateProvenance() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GenerateProvenance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateProvenance(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest* request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::GetRequest* request, ::pb::lyft::datacatalog::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Query() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::QueryRequest* request, ::pb::lyft::datacatalog::QueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::CreateRequest* request, ::pb::lyft::datacatalog::CreateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateProvenance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GenerateProvenance() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GenerateProvenance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateProvenance(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest* request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateProvenance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Get() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Get(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::GetRequest* request, ::pb::lyft::datacatalog::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Get(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Query() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Query(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::QueryRequest* request, ::pb::lyft::datacatalog::QueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Query(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Create() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Create(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::CreateRequest* request, ::pb::lyft::datacatalog::CreateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Create(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GenerateProvenance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GenerateProvenance() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GenerateProvenance(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GenerateProvenance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateProvenance(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest* request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GenerateProvenance(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::lyft::datacatalog::GetRequest, ::pb::lyft::datacatalog::GetResponse>(std::bind(&WithStreamedUnaryMethod_Get<BaseClass>::StreamedGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::GetRequest* request, ::pb::lyft::datacatalog::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::lyft::datacatalog::GetRequest,::pb::lyft::datacatalog::GetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Query() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::lyft::datacatalog::QueryRequest, ::pb::lyft::datacatalog::QueryResponse>(std::bind(&WithStreamedUnaryMethod_Query<BaseClass>::StreamedQuery, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Query(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::QueryRequest* request, ::pb::lyft::datacatalog::QueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::lyft::datacatalog::QueryRequest,::pb::lyft::datacatalog::QueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::lyft::datacatalog::CreateRequest, ::pb::lyft::datacatalog::CreateResponse>(std::bind(&WithStreamedUnaryMethod_Create<BaseClass>::StreamedCreate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::CreateRequest* request, ::pb::lyft::datacatalog::CreateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::lyft::datacatalog::CreateRequest,::pb::lyft::datacatalog::CreateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GenerateProvenance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GenerateProvenance() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::pb::lyft::datacatalog::GenerateProvenanceRequest, ::pb::lyft::datacatalog::GenerateProvenanceResponse>(std::bind(&WithStreamedUnaryMethod_GenerateProvenance<BaseClass>::StreamedGenerateProvenance, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GenerateProvenance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateProvenance(::grpc::ServerContext* context, const ::pb::lyft::datacatalog::GenerateProvenanceRequest* request, ::pb::lyft::datacatalog::GenerateProvenanceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGenerateProvenance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::lyft::datacatalog::GenerateProvenanceRequest,::pb::lyft::datacatalog::GenerateProvenanceResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Query<WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_GenerateProvenance<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Query<WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_GenerateProvenance<Service > > > > StreamedService;
};

}  // namespace datacatalog
}  // namespace lyft
}  // namespace pb


#endif  // GRPC_flyteidl_2fdatacatalog_2fdatacatalog_2eproto__INCLUDED
