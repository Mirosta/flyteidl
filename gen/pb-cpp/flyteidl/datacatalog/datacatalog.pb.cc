// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/datacatalog/datacatalog.proto

#include "flyteidl/datacatalog/datacatalog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IntFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IntRangeFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Parameter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ArtifactId_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Artifact_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_IntQueryKey_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
namespace pb {
namespace lyft {
namespace datacatalog {
class ParameterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Parameter> _instance;
} _Parameter_default_instance_;
class ArtifactDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Artifact> _instance;
} _Artifact_default_instance_;
class ArtifactIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArtifactId> _instance;
} _ArtifactId_default_instance_;
class GetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRequest> _instance;
  ::google::protobuf::internal::ArenaStringPtr provenance_;
  const ::pb::lyft::datacatalog::ArtifactId* artifact_id_;
} _GetRequest_default_instance_;
class GetResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetResponse> _instance;
} _GetResponse_default_instance_;
class IntFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IntFilter> _instance;
} _IntFilter_default_instance_;
class IntRangeFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IntRangeFilter> _instance;
} _IntRangeFilter_default_instance_;
class IntQueryKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IntQueryKey> _instance;
  const ::pb::lyft::datacatalog::IntFilter* val_;
  const ::pb::lyft::datacatalog::IntRangeFilter* range_;
} _IntQueryKey_default_instance_;
class QueryRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryRequest> _instance;
} _QueryRequest_default_instance_;
class QueryResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryResponse> _instance;
} _QueryResponse_default_instance_;
class CreateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateRequest> _instance;
} _CreateRequest_default_instance_;
class CreateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateResponse> _instance;
} _CreateResponse_default_instance_;
class GenerateProvenanceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GenerateProvenanceRequest> _instance;
} _GenerateProvenanceRequest_default_instance_;
class GenerateProvenanceResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GenerateProvenanceResponse> _instance;
} _GenerateProvenanceResponse_default_instance_;
}  // namespace datacatalog
}  // namespace lyft
}  // namespace pb
static void InitDefaultsParameter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::lyft::datacatalog::_Parameter_default_instance_;
    new (ptr) ::pb::lyft::datacatalog::Parameter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::lyft::datacatalog::Parameter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Parameter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsParameter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {}};

static void InitDefaultsArtifact_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::lyft::datacatalog::_Artifact_default_instance_;
    new (ptr) ::pb::lyft::datacatalog::Artifact();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::lyft::datacatalog::Artifact::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Artifact_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsArtifact_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_Parameter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsArtifactId_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::lyft::datacatalog::_ArtifactId_default_instance_;
    new (ptr) ::pb::lyft::datacatalog::ArtifactId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::lyft::datacatalog::ArtifactId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ArtifactId_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsArtifactId_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_Parameter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsGetRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::lyft::datacatalog::_GetRequest_default_instance_;
    new (ptr) ::pb::lyft::datacatalog::GetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::lyft::datacatalog::GetRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_ArtifactId_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsGetResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::lyft::datacatalog::_GetResponse_default_instance_;
    new (ptr) ::pb::lyft::datacatalog::GetResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::lyft::datacatalog::GetResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_Artifact_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsIntFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::lyft::datacatalog::_IntFilter_default_instance_;
    new (ptr) ::pb::lyft::datacatalog::IntFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::lyft::datacatalog::IntFilter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IntFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIntFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {}};

static void InitDefaultsIntRangeFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::lyft::datacatalog::_IntRangeFilter_default_instance_;
    new (ptr) ::pb::lyft::datacatalog::IntRangeFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::lyft::datacatalog::IntRangeFilter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IntRangeFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIntRangeFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {}};

static void InitDefaultsIntQueryKey_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::lyft::datacatalog::_IntQueryKey_default_instance_;
    new (ptr) ::pb::lyft::datacatalog::IntQueryKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::lyft::datacatalog::IntQueryKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_IntQueryKey_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsIntQueryKey_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_IntFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,
      &scc_info_IntRangeFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsQueryRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::lyft::datacatalog::_QueryRequest_default_instance_;
    new (ptr) ::pb::lyft::datacatalog::QueryRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::lyft::datacatalog::QueryRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_QueryRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsQueryRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_IntQueryKey_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsQueryResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::lyft::datacatalog::_QueryResponse_default_instance_;
    new (ptr) ::pb::lyft::datacatalog::QueryResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::lyft::datacatalog::QueryResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_QueryResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsQueryResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_Artifact_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsCreateRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::lyft::datacatalog::_CreateRequest_default_instance_;
    new (ptr) ::pb::lyft::datacatalog::CreateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::lyft::datacatalog::CreateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CreateRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCreateRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_ArtifactId_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,
      &scc_info_Parameter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsCreateResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::lyft::datacatalog::_CreateResponse_default_instance_;
    new (ptr) ::pb::lyft::datacatalog::CreateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::lyft::datacatalog::CreateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CreateResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCreateResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_Artifact_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsGenerateProvenanceRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::lyft::datacatalog::_GenerateProvenanceRequest_default_instance_;
    new (ptr) ::pb::lyft::datacatalog::GenerateProvenanceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::lyft::datacatalog::GenerateProvenanceRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GenerateProvenanceRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGenerateProvenanceRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_ArtifactId_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsGenerateProvenanceResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::lyft::datacatalog::_GenerateProvenanceResponse_default_instance_;
    new (ptr) ::pb::lyft::datacatalog::GenerateProvenanceResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::lyft::datacatalog::GenerateProvenanceResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GenerateProvenanceResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGenerateProvenanceResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {}};

void InitDefaults_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Parameter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Artifact_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ArtifactId_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IntFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IntRangeFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IntQueryKey_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QueryRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QueryResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GenerateProvenanceRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GenerateProvenanceResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fdatacatalog_2fdatacatalog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::Parameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::Parameter, name_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::Parameter, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::Artifact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::Artifact, provenance_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::Artifact, name_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::Artifact, version_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::Artifact, revision_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::Artifact, created_at_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::Artifact, reference_id_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::Artifact, inputs_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::Artifact, outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::ArtifactId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::ArtifactId, name_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::ArtifactId, version_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::ArtifactId, inputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::GetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::GetRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::pb::lyft::datacatalog::GetRequestDefaultTypeInternal, provenance_),
  offsetof(::pb::lyft::datacatalog::GetRequestDefaultTypeInternal, artifact_id_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::GetRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::GetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::GetResponse, artifact_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::IntFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::IntFilter, value_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::IntFilter, operator__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::IntRangeFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::IntRangeFilter, min_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::IntRangeFilter, max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::IntQueryKey, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::IntQueryKey, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::pb::lyft::datacatalog::IntQueryKeyDefaultTypeInternal, val_),
  offsetof(::pb::lyft::datacatalog::IntQueryKeyDefaultTypeInternal, range_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::IntQueryKey, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::QueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::QueryRequest, name_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::QueryRequest, version_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::QueryRequest, revision_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::QueryRequest, created_at_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::QueryRequest, reference_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::QueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::QueryResponse, artifact_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::CreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::CreateRequest, ref_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::CreateRequest, reference_id_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::CreateRequest, revision_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::CreateRequest, outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::CreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::CreateResponse, artifact_),
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::CreateResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::GenerateProvenanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::GenerateProvenanceRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::GenerateProvenanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::lyft::datacatalog::GenerateProvenanceResponse, provenance_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::lyft::datacatalog::Parameter)},
  { 7, -1, sizeof(::pb::lyft::datacatalog::Artifact)},
  { 20, -1, sizeof(::pb::lyft::datacatalog::ArtifactId)},
  { 28, -1, sizeof(::pb::lyft::datacatalog::GetRequest)},
  { 36, -1, sizeof(::pb::lyft::datacatalog::GetResponse)},
  { 42, -1, sizeof(::pb::lyft::datacatalog::IntFilter)},
  { 49, -1, sizeof(::pb::lyft::datacatalog::IntRangeFilter)},
  { 56, -1, sizeof(::pb::lyft::datacatalog::IntQueryKey)},
  { 64, -1, sizeof(::pb::lyft::datacatalog::QueryRequest)},
  { 74, -1, sizeof(::pb::lyft::datacatalog::QueryResponse)},
  { 80, -1, sizeof(::pb::lyft::datacatalog::CreateRequest)},
  { 89, -1, sizeof(::pb::lyft::datacatalog::CreateResponse)},
  { 96, -1, sizeof(::pb::lyft::datacatalog::GenerateProvenanceRequest)},
  { 102, -1, sizeof(::pb::lyft::datacatalog::GenerateProvenanceResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::lyft::datacatalog::_Parameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::lyft::datacatalog::_Artifact_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::lyft::datacatalog::_ArtifactId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::lyft::datacatalog::_GetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::lyft::datacatalog::_GetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::lyft::datacatalog::_IntFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::lyft::datacatalog::_IntRangeFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::lyft::datacatalog::_IntQueryKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::lyft::datacatalog::_QueryRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::lyft::datacatalog::_QueryResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::lyft::datacatalog::_CreateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::lyft::datacatalog::_CreateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::lyft::datacatalog::_GenerateProvenanceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::lyft::datacatalog::_GenerateProvenanceResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto = {
  {}, AddDescriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto, "flyteidl/datacatalog/datacatalog.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fdatacatalog_2fdatacatalog_2eproto::offsets,
  file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto, 14, file_level_enum_descriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto, file_level_service_descriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[] =
  "\n&flyteidl/datacatalog/datacatalog.proto"
  "\022\023pb.lyft.datacatalog\"(\n\tParameter\022\014\n\004na"
  "me\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\332\001\n\010Artifact\022\022\n\n"
  "provenance\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\017\n\007versio"
  "n\030\003 \001(\t\022\020\n\010revision\030\004 \001(\003\022\022\n\ncreated_at\030"
  "\005 \001(\003\022\024\n\014reference_id\030\006 \001(\t\022.\n\006inputs\030\007 "
  "\003(\0132\036.pb.lyft.datacatalog.Parameter\022/\n\007o"
  "utputs\030\010 \003(\0132\036.pb.lyft.datacatalog.Param"
  "eter\"[\n\nArtifactId\022\014\n\004name\030\001 \001(\t\022\017\n\007vers"
  "ion\030\002 \001(\t\022.\n\006inputs\030\003 \003(\0132\036.pb.lyft.data"
  "catalog.Parameter\"`\n\nGetRequest\022\024\n\nprove"
  "nance\030\001 \001(\tH\000\0226\n\013artifact_id\030\002 \001(\0132\037.pb."
  "lyft.datacatalog.ArtifactIdH\000B\004\n\002id\">\n\013G"
  "etResponse\022/\n\010artifact\030\001 \001(\0132\035.pb.lyft.d"
  "atacatalog.Artifact\"P\n\tIntFilter\022\r\n\005valu"
  "e\030\001 \001(\003\0224\n\010operator\030\002 \001(\0162\".pb.lyft.data"
  "catalog.QueryOperator\"*\n\016IntRangeFilter\022"
  "\013\n\003min\030\001 \001(\003\022\013\n\003max\030\002 \001(\003\"|\n\013IntQueryKey"
  "\022-\n\003val\030\001 \001(\0132\036.pb.lyft.datacatalog.IntF"
  "ilterH\000\0224\n\005range\030\002 \001(\0132#.pb.lyft.datacat"
  "alog.IntRangeFilterH\000B\010\n\006filter\"\213\001\n\014Quer"
  "yRequest\022\014\n\004name\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\022"
  "2\n\010revision\030\003 \001(\0132 .pb.lyft.datacatalog."
  "IntQueryKey\022\022\n\ncreated_at\030\004 \001(\003\022\024\n\014refer"
  "ence_id\030\005 \001(\t\"@\n\rQueryResponse\022/\n\010artifa"
  "ct\030\001 \003(\0132\035.pb.lyft.datacatalog.Artifact\""
  "\226\001\n\rCreateRequest\022,\n\003ref\030\001 \001(\0132\037.pb.lyft"
  ".datacatalog.ArtifactId\022\024\n\014reference_id\030"
  "\002 \001(\t\022\020\n\010revision\030\003 \001(\003\022/\n\007outputs\030\004 \003(\013"
  "2\036.pb.lyft.datacatalog.Parameter\"\250\001\n\016Cre"
  "ateResponse\022/\n\010artifact\030\001 \001(\0132\035.pb.lyft."
  "datacatalog.Artifact\022:\n\006status\030\002 \001(\0162*.p"
  "b.lyft.datacatalog.CreateResponse.Status"
  "\")\n\006Status\022\022\n\016ALREADY_EXISTS\020\000\022\013\n\007CREATE"
  "D\020\001\"H\n\031GenerateProvenanceRequest\022+\n\002id\030\001"
  " \001(\0132\037.pb.lyft.datacatalog.ArtifactId\"0\n"
  "\032GenerateProvenanceResponse\022\022\n\nprovenanc"
  "e\030\001 \001(\t*=\n\rQueryOperator\022\t\n\005EQUAL\020\000\022\020\n\014G"
  "REATER_THAN\020\001\022\017\n\013LESSER_THAN\020\0022\367\002\n\tArtif"
  "acts\022J\n\003Get\022\037.pb.lyft.datacatalog.GetReq"
  "uest\032 .pb.lyft.datacatalog.GetResponse\"\000"
  "\022P\n\005Query\022!.pb.lyft.datacatalog.QueryReq"
  "uest\032\".pb.lyft.datacatalog.QueryResponse"
  "\"\000\022S\n\006Create\022\".pb.lyft.datacatalog.Creat"
  "eRequest\032#.pb.lyft.datacatalog.CreateRes"
  "ponse\"\000\022w\n\022GenerateProvenance\022..pb.lyft."
  "datacatalog.GenerateProvenanceRequest\032/."
  "pb.lyft.datacatalog.GenerateProvenanceRe"
  "sponse\"\000B\020Z\013datacatalog\220\001\001b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto = {
  false, InitDefaults_flyteidl_2fdatacatalog_2fdatacatalog_2eproto, 
  descriptor_table_protodef_flyteidl_2fdatacatalog_2fdatacatalog_2eproto,
  "flyteidl/datacatalog/datacatalog.proto", &assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto, 1954,
};

void AddDescriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fdatacatalog_2fdatacatalog_2eproto = []() { AddDescriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto(); return true; }();
namespace pb {
namespace lyft {
namespace datacatalog {
const ::google::protobuf::EnumDescriptor* CreateResponse_Status_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return file_level_enum_descriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[0];
}
bool CreateResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CreateResponse_Status CreateResponse::ALREADY_EXISTS;
const CreateResponse_Status CreateResponse::CREATED;
const CreateResponse_Status CreateResponse::Status_MIN;
const CreateResponse_Status CreateResponse::Status_MAX;
const int CreateResponse::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* QueryOperator_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return file_level_enum_descriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[1];
}
bool QueryOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Parameter::InitAsDefaultInstance() {
}
class Parameter::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Parameter::kNameFieldNumber;
const int Parameter::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Parameter::Parameter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.lyft.datacatalog.Parameter)
}
Parameter::Parameter(const Parameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.lyft.datacatalog.Parameter)
}

void Parameter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Parameter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Parameter::~Parameter() {
  // @@protoc_insertion_point(destructor:pb.lyft.datacatalog.Parameter)
  SharedDtor();
}

void Parameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Parameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Parameter& Parameter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Parameter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.lyft.datacatalog.Parameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Parameter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Parameter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.lyft.datacatalog.Parameter.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.lyft.datacatalog.Parameter.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Parameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.lyft.datacatalog.Parameter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.lyft.datacatalog.Parameter.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.lyft.datacatalog.Parameter.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.lyft.datacatalog.Parameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.lyft.datacatalog.Parameter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Parameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.lyft.datacatalog.Parameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.Parameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.Parameter.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.lyft.datacatalog.Parameter)
}

::google::protobuf::uint8* Parameter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.lyft.datacatalog.Parameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.Parameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.Parameter.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.lyft.datacatalog.Parameter)
  return target;
}

size_t Parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.lyft.datacatalog.Parameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Parameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.lyft.datacatalog.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  const Parameter* source =
      ::google::protobuf::DynamicCastToGenerated<Parameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.lyft.datacatalog.Parameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.lyft.datacatalog.Parameter)
    MergeFrom(*source);
  }
}

void Parameter::MergeFrom(const Parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.lyft.datacatalog.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Parameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.lyft.datacatalog.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameter::CopyFrom(const Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.lyft.datacatalog.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter::IsInitialized() const {
  return true;
}

void Parameter::Swap(Parameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Parameter::InternalSwap(Parameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Parameter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Artifact::InitAsDefaultInstance() {
}
class Artifact::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Artifact::kProvenanceFieldNumber;
const int Artifact::kNameFieldNumber;
const int Artifact::kVersionFieldNumber;
const int Artifact::kRevisionFieldNumber;
const int Artifact::kCreatedAtFieldNumber;
const int Artifact::kReferenceIdFieldNumber;
const int Artifact::kInputsFieldNumber;
const int Artifact::kOutputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Artifact::Artifact()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.lyft.datacatalog.Artifact)
}
Artifact::Artifact(const Artifact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      inputs_(from.inputs_),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  provenance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.provenance().size() > 0) {
    provenance_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.provenance_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_id().size() > 0) {
    reference_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_id_);
  }
  ::memcpy(&revision_, &from.revision_,
    static_cast<size_t>(reinterpret_cast<char*>(&created_at_) -
    reinterpret_cast<char*>(&revision_)) + sizeof(created_at_));
  // @@protoc_insertion_point(copy_constructor:pb.lyft.datacatalog.Artifact)
}

void Artifact::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Artifact_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  provenance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&created_at_) -
      reinterpret_cast<char*>(&revision_)) + sizeof(created_at_));
}

Artifact::~Artifact() {
  // @@protoc_insertion_point(destructor:pb.lyft.datacatalog.Artifact)
  SharedDtor();
}

void Artifact::SharedDtor() {
  provenance_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Artifact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Artifact& Artifact::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Artifact_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void Artifact::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.lyft.datacatalog.Artifact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  provenance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&created_at_) -
      reinterpret_cast<char*>(&revision_)) + sizeof(created_at_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Artifact::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Artifact*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string provenance = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.lyft.datacatalog.Artifact.provenance");
        object = msg->mutable_provenance();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.lyft.datacatalog.Artifact.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string version = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.lyft.datacatalog.Artifact.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 revision = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_revision(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 created_at = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_created_at(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string reference_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.lyft.datacatalog.Artifact.reference_id");
        object = msg->mutable_reference_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .pb.lyft.datacatalog.Parameter inputs = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::lyft::datacatalog::Parameter::_InternalParse;
          object = msg->add_inputs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // repeated .pb.lyft.datacatalog.Parameter outputs = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::lyft::datacatalog::Parameter::_InternalParse;
          object = msg->add_outputs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 66 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Artifact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.lyft.datacatalog.Artifact)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string provenance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provenance()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->provenance().data(), static_cast<int>(this->provenance().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.lyft.datacatalog.Artifact.provenance"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.lyft.datacatalog.Artifact.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.lyft.datacatalog.Artifact.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 revision = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 created_at = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_id().data(), static_cast<int>(this->reference_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.lyft.datacatalog.Artifact.reference_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.lyft.datacatalog.Parameter inputs = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.lyft.datacatalog.Parameter outputs = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.lyft.datacatalog.Artifact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.lyft.datacatalog.Artifact)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Artifact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.lyft.datacatalog.Artifact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string provenance = 1;
  if (this->provenance().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->provenance().data(), static_cast<int>(this->provenance().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.Artifact.provenance");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->provenance(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.Artifact.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.Artifact.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // int64 revision = 4;
  if (this->revision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->revision(), output);
  }

  // int64 created_at = 5;
  if (this->created_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->created_at(), output);
  }

  // string reference_id = 6;
  if (this->reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), static_cast<int>(this->reference_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.Artifact.reference_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->reference_id(), output);
  }

  // repeated .pb.lyft.datacatalog.Parameter inputs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->inputs(static_cast<int>(i)),
      output);
  }

  // repeated .pb.lyft.datacatalog.Parameter outputs = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->outputs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.lyft.datacatalog.Artifact)
}

::google::protobuf::uint8* Artifact::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.lyft.datacatalog.Artifact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string provenance = 1;
  if (this->provenance().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->provenance().data(), static_cast<int>(this->provenance().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.Artifact.provenance");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->provenance(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.Artifact.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.Artifact.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // int64 revision = 4;
  if (this->revision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->revision(), target);
  }

  // int64 created_at = 5;
  if (this->created_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->created_at(), target);
  }

  // string reference_id = 6;
  if (this->reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), static_cast<int>(this->reference_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.Artifact.reference_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->reference_id(), target);
  }

  // repeated .pb.lyft.datacatalog.Parameter inputs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->inputs(static_cast<int>(i)), target);
  }

  // repeated .pb.lyft.datacatalog.Parameter outputs = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->outputs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.lyft.datacatalog.Artifact)
  return target;
}

size_t Artifact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.lyft.datacatalog.Artifact)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.lyft.datacatalog.Parameter inputs = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->inputs(static_cast<int>(i)));
    }
  }

  // repeated .pb.lyft.datacatalog.Parameter outputs = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->outputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->outputs(static_cast<int>(i)));
    }
  }

  // string provenance = 1;
  if (this->provenance().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->provenance());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string reference_id = 6;
  if (this->reference_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_id());
  }

  // int64 revision = 4;
  if (this->revision() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->revision());
  }

  // int64 created_at = 5;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->created_at());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Artifact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.lyft.datacatalog.Artifact)
  GOOGLE_DCHECK_NE(&from, this);
  const Artifact* source =
      ::google::protobuf::DynamicCastToGenerated<Artifact>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.lyft.datacatalog.Artifact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.lyft.datacatalog.Artifact)
    MergeFrom(*source);
  }
}

void Artifact::MergeFrom(const Artifact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.lyft.datacatalog.Artifact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  if (from.provenance().size() > 0) {

    provenance_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.provenance_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.reference_id().size() > 0) {

    reference_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_id_);
  }
  if (from.revision() != 0) {
    set_revision(from.revision());
  }
  if (from.created_at() != 0) {
    set_created_at(from.created_at());
  }
}

void Artifact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.lyft.datacatalog.Artifact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Artifact::CopyFrom(const Artifact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.lyft.datacatalog.Artifact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Artifact::IsInitialized() const {
  return true;
}

void Artifact::Swap(Artifact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Artifact::InternalSwap(Artifact* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&inputs_)->InternalSwap(CastToBase(&other->inputs_));
  CastToBase(&outputs_)->InternalSwap(CastToBase(&other->outputs_));
  provenance_.Swap(&other->provenance_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reference_id_.Swap(&other->reference_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(revision_, other->revision_);
  swap(created_at_, other->created_at_);
}

::google::protobuf::Metadata Artifact::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ArtifactId::InitAsDefaultInstance() {
}
class ArtifactId::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArtifactId::kNameFieldNumber;
const int ArtifactId::kVersionFieldNumber;
const int ArtifactId::kInputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArtifactId::ArtifactId()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.lyft.datacatalog.ArtifactId)
}
ArtifactId::ArtifactId(const ArtifactId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.lyft.datacatalog.ArtifactId)
}

void ArtifactId::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ArtifactId_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ArtifactId::~ArtifactId() {
  // @@protoc_insertion_point(destructor:pb.lyft.datacatalog.ArtifactId)
  SharedDtor();
}

void ArtifactId::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ArtifactId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactId& ArtifactId::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ArtifactId_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void ArtifactId::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.lyft.datacatalog.ArtifactId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ArtifactId::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ArtifactId*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.lyft.datacatalog.ArtifactId.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.lyft.datacatalog.ArtifactId.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .pb.lyft.datacatalog.Parameter inputs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::lyft::datacatalog::Parameter::_InternalParse;
          object = msg->add_inputs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ArtifactId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.lyft.datacatalog.ArtifactId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.lyft.datacatalog.ArtifactId.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.lyft.datacatalog.ArtifactId.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.lyft.datacatalog.Parameter inputs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.lyft.datacatalog.ArtifactId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.lyft.datacatalog.ArtifactId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ArtifactId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.lyft.datacatalog.ArtifactId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.ArtifactId.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.ArtifactId.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // repeated .pb.lyft.datacatalog.Parameter inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->inputs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.lyft.datacatalog.ArtifactId)
}

::google::protobuf::uint8* ArtifactId::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.lyft.datacatalog.ArtifactId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.ArtifactId.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.ArtifactId.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // repeated .pb.lyft.datacatalog.Parameter inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->inputs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.lyft.datacatalog.ArtifactId)
  return target;
}

size_t ArtifactId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.lyft.datacatalog.ArtifactId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.lyft.datacatalog.Parameter inputs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->inputs(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.lyft.datacatalog.ArtifactId)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactId* source =
      ::google::protobuf::DynamicCastToGenerated<ArtifactId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.lyft.datacatalog.ArtifactId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.lyft.datacatalog.ArtifactId)
    MergeFrom(*source);
  }
}

void ArtifactId::MergeFrom(const ArtifactId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.lyft.datacatalog.ArtifactId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void ArtifactId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.lyft.datacatalog.ArtifactId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactId::CopyFrom(const ArtifactId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.lyft.datacatalog.ArtifactId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactId::IsInitialized() const {
  return true;
}

void ArtifactId::Swap(ArtifactId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArtifactId::InternalSwap(ArtifactId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&inputs_)->InternalSwap(CastToBase(&other->inputs_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ArtifactId::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetRequest::InitAsDefaultInstance() {
  ::pb::lyft::datacatalog::_GetRequest_default_instance_.provenance_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::pb::lyft::datacatalog::_GetRequest_default_instance_.artifact_id_ = const_cast< ::pb::lyft::datacatalog::ArtifactId*>(
      ::pb::lyft::datacatalog::ArtifactId::internal_default_instance());
}
class GetRequest::HasBitSetters {
 public:
  static const ::pb::lyft::datacatalog::ArtifactId& artifact_id(const GetRequest* msg);
};

const ::pb::lyft::datacatalog::ArtifactId&
GetRequest::HasBitSetters::artifact_id(const GetRequest* msg) {
  return *msg->id_.artifact_id_;
}
void GetRequest::set_allocated_artifact_id(::pb::lyft::datacatalog::ArtifactId* artifact_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_id();
  if (artifact_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      artifact_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, artifact_id, submessage_arena);
    }
    set_has_artifact_id();
    id_.artifact_id_ = artifact_id;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.GetRequest.artifact_id)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRequest::kProvenanceFieldNumber;
const int GetRequest::kArtifactIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRequest::GetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.lyft.datacatalog.GetRequest)
}
GetRequest::GetRequest(const GetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_id();
  switch (from.id_case()) {
    case kProvenance: {
      set_provenance(from.provenance());
      break;
    }
    case kArtifactId: {
      mutable_artifact_id()->::pb::lyft::datacatalog::ArtifactId::MergeFrom(from.artifact_id());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.lyft.datacatalog.GetRequest)
}

void GetRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  clear_has_id();
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:pb.lyft.datacatalog.GetRequest)
  SharedDtor();
}

void GetRequest::SharedDtor() {
  if (has_id()) {
    clear_id();
  }
}

void GetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRequest& GetRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void GetRequest::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:pb.lyft.datacatalog.GetRequest)
  switch (id_case()) {
    case kProvenance: {
      id_.provenance_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kArtifactId: {
      delete id_.artifact_id_;
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.lyft.datacatalog.GetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_id();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string provenance = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.lyft.datacatalog.GetRequest.provenance");
        object = msg->mutable_provenance();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.lyft.datacatalog.ArtifactId artifact_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::lyft::datacatalog::ArtifactId::_InternalParse;
        object = msg->mutable_artifact_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.lyft.datacatalog.GetRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string provenance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provenance()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->provenance().data(), static_cast<int>(this->provenance().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.lyft.datacatalog.GetRequest.provenance"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.lyft.datacatalog.ArtifactId artifact_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.lyft.datacatalog.GetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.lyft.datacatalog.GetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.lyft.datacatalog.GetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string provenance = 1;
  if (has_provenance()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->provenance().data(), static_cast<int>(this->provenance().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.GetRequest.provenance");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->provenance(), output);
  }

  // .pb.lyft.datacatalog.ArtifactId artifact_id = 2;
  if (has_artifact_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::artifact_id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.lyft.datacatalog.GetRequest)
}

::google::protobuf::uint8* GetRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.lyft.datacatalog.GetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string provenance = 1;
  if (has_provenance()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->provenance().data(), static_cast<int>(this->provenance().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.GetRequest.provenance");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->provenance(), target);
  }

  // .pb.lyft.datacatalog.ArtifactId artifact_id = 2;
  if (has_artifact_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::artifact_id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.lyft.datacatalog.GetRequest)
  return target;
}

size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.lyft.datacatalog.GetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (id_case()) {
    // string provenance = 1;
    case kProvenance: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->provenance());
      break;
    }
    // .pb.lyft.datacatalog.ArtifactId artifact_id = 2;
    case kArtifactId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *id_.artifact_id_);
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.lyft.datacatalog.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.lyft.datacatalog.GetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.lyft.datacatalog.GetRequest)
    MergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.lyft.datacatalog.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.id_case()) {
    case kProvenance: {
      set_provenance(from.provenance());
      break;
    }
    case kArtifactId: {
      mutable_artifact_id()->::pb::lyft::datacatalog::ArtifactId::MergeFrom(from.artifact_id());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
}

void GetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.lyft.datacatalog.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.lyft.datacatalog.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  return true;
}

void GetRequest::Swap(GetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRequest::InternalSwap(GetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata GetRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetResponse::InitAsDefaultInstance() {
  ::pb::lyft::datacatalog::_GetResponse_default_instance_._instance.get_mutable()->artifact_ = const_cast< ::pb::lyft::datacatalog::Artifact*>(
      ::pb::lyft::datacatalog::Artifact::internal_default_instance());
}
class GetResponse::HasBitSetters {
 public:
  static const ::pb::lyft::datacatalog::Artifact& artifact(const GetResponse* msg);
};

const ::pb::lyft::datacatalog::Artifact&
GetResponse::HasBitSetters::artifact(const GetResponse* msg) {
  return *msg->artifact_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetResponse::kArtifactFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetResponse::GetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.lyft.datacatalog.GetResponse)
}
GetResponse::GetResponse(const GetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_artifact()) {
    artifact_ = new ::pb::lyft::datacatalog::Artifact(*from.artifact_);
  } else {
    artifact_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.lyft.datacatalog.GetResponse)
}

void GetResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  artifact_ = nullptr;
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:pb.lyft.datacatalog.GetResponse)
  SharedDtor();
}

void GetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete artifact_;
}

void GetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetResponse& GetResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.lyft.datacatalog.GetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && artifact_ != nullptr) {
    delete artifact_;
  }
  artifact_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.lyft.datacatalog.Artifact artifact = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::lyft::datacatalog::Artifact::_InternalParse;
        object = msg->mutable_artifact();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.lyft.datacatalog.GetResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.lyft.datacatalog.Artifact artifact = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.lyft.datacatalog.GetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.lyft.datacatalog.GetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.lyft.datacatalog.GetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.lyft.datacatalog.Artifact artifact = 1;
  if (this->has_artifact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.lyft.datacatalog.GetResponse)
}

::google::protobuf::uint8* GetResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.lyft.datacatalog.GetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.lyft.datacatalog.Artifact artifact = 1;
  if (this->has_artifact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.lyft.datacatalog.GetResponse)
  return target;
}

size_t GetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.lyft.datacatalog.GetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.lyft.datacatalog.Artifact artifact = 1;
  if (this->has_artifact()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.lyft.datacatalog.GetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.lyft.datacatalog.GetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.lyft.datacatalog.GetResponse)
    MergeFrom(*source);
  }
}

void GetResponse::MergeFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.lyft.datacatalog.GetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_artifact()) {
    mutable_artifact()->::pb::lyft::datacatalog::Artifact::MergeFrom(from.artifact());
  }
}

void GetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.lyft.datacatalog.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.lyft.datacatalog.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {
  return true;
}

void GetResponse::Swap(GetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetResponse::InternalSwap(GetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(artifact_, other->artifact_);
}

::google::protobuf::Metadata GetResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IntFilter::InitAsDefaultInstance() {
}
class IntFilter::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntFilter::kValueFieldNumber;
const int IntFilter::kOperatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntFilter::IntFilter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.lyft.datacatalog.IntFilter)
}
IntFilter::IntFilter(const IntFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&operator__) -
    reinterpret_cast<char*>(&value_)) + sizeof(operator__));
  // @@protoc_insertion_point(copy_constructor:pb.lyft.datacatalog.IntFilter)
}

void IntFilter::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operator__) -
      reinterpret_cast<char*>(&value_)) + sizeof(operator__));
}

IntFilter::~IntFilter() {
  // @@protoc_insertion_point(destructor:pb.lyft.datacatalog.IntFilter)
  SharedDtor();
}

void IntFilter::SharedDtor() {
}

void IntFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntFilter& IntFilter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IntFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void IntFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.lyft.datacatalog.IntFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operator__) -
      reinterpret_cast<char*>(&value_)) + sizeof(operator__));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntFilter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IntFilter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.lyft.datacatalog.QueryOperator operator = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_operator_(static_cast<::pb::lyft::datacatalog::QueryOperator>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.lyft.datacatalog.IntFilter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.lyft.datacatalog.QueryOperator operator = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operator_(static_cast< ::pb::lyft::datacatalog::QueryOperator >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.lyft.datacatalog.IntFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.lyft.datacatalog.IntFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.lyft.datacatalog.IntFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }

  // .pb.lyft.datacatalog.QueryOperator operator = 2;
  if (this->operator_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->operator_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.lyft.datacatalog.IntFilter)
}

::google::protobuf::uint8* IntFilter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.lyft.datacatalog.IntFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }

  // .pb.lyft.datacatalog.QueryOperator operator = 2;
  if (this->operator_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->operator_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.lyft.datacatalog.IntFilter)
  return target;
}

size_t IntFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.lyft.datacatalog.IntFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->value());
  }

  // .pb.lyft.datacatalog.QueryOperator operator = 2;
  if (this->operator_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operator_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.lyft.datacatalog.IntFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const IntFilter* source =
      ::google::protobuf::DynamicCastToGenerated<IntFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.lyft.datacatalog.IntFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.lyft.datacatalog.IntFilter)
    MergeFrom(*source);
  }
}

void IntFilter::MergeFrom(const IntFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.lyft.datacatalog.IntFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.operator_() != 0) {
    set_operator_(from.operator_());
  }
}

void IntFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.lyft.datacatalog.IntFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntFilter::CopyFrom(const IntFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.lyft.datacatalog.IntFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntFilter::IsInitialized() const {
  return true;
}

void IntFilter::Swap(IntFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntFilter::InternalSwap(IntFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(operator__, other->operator__);
}

::google::protobuf::Metadata IntFilter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IntRangeFilter::InitAsDefaultInstance() {
}
class IntRangeFilter::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntRangeFilter::kMinFieldNumber;
const int IntRangeFilter::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntRangeFilter::IntRangeFilter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.lyft.datacatalog.IntRangeFilter)
}
IntRangeFilter::IntRangeFilter(const IntRangeFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:pb.lyft.datacatalog.IntRangeFilter)
}

void IntRangeFilter::SharedCtor() {
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

IntRangeFilter::~IntRangeFilter() {
  // @@protoc_insertion_point(destructor:pb.lyft.datacatalog.IntRangeFilter)
  SharedDtor();
}

void IntRangeFilter::SharedDtor() {
}

void IntRangeFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntRangeFilter& IntRangeFilter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IntRangeFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void IntRangeFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.lyft.datacatalog.IntRangeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntRangeFilter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IntRangeFilter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 min = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_min(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 max = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_max(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntRangeFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.lyft.datacatalog.IntRangeFilter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.lyft.datacatalog.IntRangeFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.lyft.datacatalog.IntRangeFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntRangeFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.lyft.datacatalog.IntRangeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 min = 1;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->min(), output);
  }

  // int64 max = 2;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.lyft.datacatalog.IntRangeFilter)
}

::google::protobuf::uint8* IntRangeFilter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.lyft.datacatalog.IntRangeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 min = 1;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->min(), target);
  }

  // int64 max = 2;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.lyft.datacatalog.IntRangeFilter)
  return target;
}

size_t IntRangeFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.lyft.datacatalog.IntRangeFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 min = 1;
  if (this->min() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->min());
  }

  // int64 max = 2;
  if (this->max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntRangeFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.lyft.datacatalog.IntRangeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const IntRangeFilter* source =
      ::google::protobuf::DynamicCastToGenerated<IntRangeFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.lyft.datacatalog.IntRangeFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.lyft.datacatalog.IntRangeFilter)
    MergeFrom(*source);
  }
}

void IntRangeFilter::MergeFrom(const IntRangeFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.lyft.datacatalog.IntRangeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.max() != 0) {
    set_max(from.max());
  }
}

void IntRangeFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.lyft.datacatalog.IntRangeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntRangeFilter::CopyFrom(const IntRangeFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.lyft.datacatalog.IntRangeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntRangeFilter::IsInitialized() const {
  return true;
}

void IntRangeFilter::Swap(IntRangeFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntRangeFilter::InternalSwap(IntRangeFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(min_, other->min_);
  swap(max_, other->max_);
}

::google::protobuf::Metadata IntRangeFilter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IntQueryKey::InitAsDefaultInstance() {
  ::pb::lyft::datacatalog::_IntQueryKey_default_instance_.val_ = const_cast< ::pb::lyft::datacatalog::IntFilter*>(
      ::pb::lyft::datacatalog::IntFilter::internal_default_instance());
  ::pb::lyft::datacatalog::_IntQueryKey_default_instance_.range_ = const_cast< ::pb::lyft::datacatalog::IntRangeFilter*>(
      ::pb::lyft::datacatalog::IntRangeFilter::internal_default_instance());
}
class IntQueryKey::HasBitSetters {
 public:
  static const ::pb::lyft::datacatalog::IntFilter& val(const IntQueryKey* msg);
  static const ::pb::lyft::datacatalog::IntRangeFilter& range(const IntQueryKey* msg);
};

const ::pb::lyft::datacatalog::IntFilter&
IntQueryKey::HasBitSetters::val(const IntQueryKey* msg) {
  return *msg->filter_.val_;
}
const ::pb::lyft::datacatalog::IntRangeFilter&
IntQueryKey::HasBitSetters::range(const IntQueryKey* msg) {
  return *msg->filter_.range_;
}
void IntQueryKey::set_allocated_val(::pb::lyft::datacatalog::IntFilter* val) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_filter();
  if (val) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      val = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, val, submessage_arena);
    }
    set_has_val();
    filter_.val_ = val;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.IntQueryKey.val)
}
void IntQueryKey::set_allocated_range(::pb::lyft::datacatalog::IntRangeFilter* range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_filter();
  if (range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    set_has_range();
    filter_.range_ = range;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.IntQueryKey.range)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntQueryKey::kValFieldNumber;
const int IntQueryKey::kRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntQueryKey::IntQueryKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.lyft.datacatalog.IntQueryKey)
}
IntQueryKey::IntQueryKey(const IntQueryKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_filter();
  switch (from.filter_case()) {
    case kVal: {
      mutable_val()->::pb::lyft::datacatalog::IntFilter::MergeFrom(from.val());
      break;
    }
    case kRange: {
      mutable_range()->::pb::lyft::datacatalog::IntRangeFilter::MergeFrom(from.range());
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.lyft.datacatalog.IntQueryKey)
}

void IntQueryKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_IntQueryKey_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  clear_has_filter();
}

IntQueryKey::~IntQueryKey() {
  // @@protoc_insertion_point(destructor:pb.lyft.datacatalog.IntQueryKey)
  SharedDtor();
}

void IntQueryKey::SharedDtor() {
  if (has_filter()) {
    clear_filter();
  }
}

void IntQueryKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntQueryKey& IntQueryKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IntQueryKey_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void IntQueryKey::clear_filter() {
// @@protoc_insertion_point(one_of_clear_start:pb.lyft.datacatalog.IntQueryKey)
  switch (filter_case()) {
    case kVal: {
      delete filter_.val_;
      break;
    }
    case kRange: {
      delete filter_.range_;
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FILTER_NOT_SET;
}


void IntQueryKey::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.lyft.datacatalog.IntQueryKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_filter();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntQueryKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IntQueryKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.lyft.datacatalog.IntFilter val = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::lyft::datacatalog::IntFilter::_InternalParse;
        object = msg->mutable_val();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.lyft.datacatalog.IntRangeFilter range = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::lyft::datacatalog::IntRangeFilter::_InternalParse;
        object = msg->mutable_range();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntQueryKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.lyft.datacatalog.IntQueryKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.lyft.datacatalog.IntFilter val = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_val()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.lyft.datacatalog.IntRangeFilter range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.lyft.datacatalog.IntQueryKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.lyft.datacatalog.IntQueryKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntQueryKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.lyft.datacatalog.IntQueryKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.lyft.datacatalog.IntFilter val = 1;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::val(this), output);
  }

  // .pb.lyft.datacatalog.IntRangeFilter range = 2;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::range(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.lyft.datacatalog.IntQueryKey)
}

::google::protobuf::uint8* IntQueryKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.lyft.datacatalog.IntQueryKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.lyft.datacatalog.IntFilter val = 1;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::val(this), target);
  }

  // .pb.lyft.datacatalog.IntRangeFilter range = 2;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::range(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.lyft.datacatalog.IntQueryKey)
  return target;
}

size_t IntQueryKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.lyft.datacatalog.IntQueryKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (filter_case()) {
    // .pb.lyft.datacatalog.IntFilter val = 1;
    case kVal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *filter_.val_);
      break;
    }
    // .pb.lyft.datacatalog.IntRangeFilter range = 2;
    case kRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *filter_.range_);
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntQueryKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.lyft.datacatalog.IntQueryKey)
  GOOGLE_DCHECK_NE(&from, this);
  const IntQueryKey* source =
      ::google::protobuf::DynamicCastToGenerated<IntQueryKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.lyft.datacatalog.IntQueryKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.lyft.datacatalog.IntQueryKey)
    MergeFrom(*source);
  }
}

void IntQueryKey::MergeFrom(const IntQueryKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.lyft.datacatalog.IntQueryKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.filter_case()) {
    case kVal: {
      mutable_val()->::pb::lyft::datacatalog::IntFilter::MergeFrom(from.val());
      break;
    }
    case kRange: {
      mutable_range()->::pb::lyft::datacatalog::IntRangeFilter::MergeFrom(from.range());
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
}

void IntQueryKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.lyft.datacatalog.IntQueryKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntQueryKey::CopyFrom(const IntQueryKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.lyft.datacatalog.IntQueryKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntQueryKey::IsInitialized() const {
  return true;
}

void IntQueryKey::Swap(IntQueryKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntQueryKey::InternalSwap(IntQueryKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(filter_, other->filter_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata IntQueryKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void QueryRequest::InitAsDefaultInstance() {
  ::pb::lyft::datacatalog::_QueryRequest_default_instance_._instance.get_mutable()->revision_ = const_cast< ::pb::lyft::datacatalog::IntQueryKey*>(
      ::pb::lyft::datacatalog::IntQueryKey::internal_default_instance());
}
class QueryRequest::HasBitSetters {
 public:
  static const ::pb::lyft::datacatalog::IntQueryKey& revision(const QueryRequest* msg);
};

const ::pb::lyft::datacatalog::IntQueryKey&
QueryRequest::HasBitSetters::revision(const QueryRequest* msg) {
  return *msg->revision_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryRequest::kNameFieldNumber;
const int QueryRequest::kVersionFieldNumber;
const int QueryRequest::kRevisionFieldNumber;
const int QueryRequest::kCreatedAtFieldNumber;
const int QueryRequest::kReferenceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryRequest::QueryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.lyft.datacatalog.QueryRequest)
}
QueryRequest::QueryRequest(const QueryRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_id().size() > 0) {
    reference_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_id_);
  }
  if (from.has_revision()) {
    revision_ = new ::pb::lyft::datacatalog::IntQueryKey(*from.revision_);
  } else {
    revision_ = nullptr;
  }
  created_at_ = from.created_at_;
  // @@protoc_insertion_point(copy_constructor:pb.lyft.datacatalog.QueryRequest)
}

void QueryRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_QueryRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&created_at_) -
      reinterpret_cast<char*>(&revision_)) + sizeof(created_at_));
}

QueryRequest::~QueryRequest() {
  // @@protoc_insertion_point(destructor:pb.lyft.datacatalog.QueryRequest)
  SharedDtor();
}

void QueryRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete revision_;
}

void QueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryRequest& QueryRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_QueryRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void QueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.lyft.datacatalog.QueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && revision_ != nullptr) {
    delete revision_;
  }
  revision_ = nullptr;
  created_at_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueryRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<QueryRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.lyft.datacatalog.QueryRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.lyft.datacatalog.QueryRequest.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.lyft.datacatalog.IntQueryKey revision = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::lyft::datacatalog::IntQueryKey::_InternalParse;
        object = msg->mutable_revision();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 created_at = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_created_at(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string reference_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.lyft.datacatalog.QueryRequest.reference_id");
        object = msg->mutable_reference_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.lyft.datacatalog.QueryRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.lyft.datacatalog.QueryRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.lyft.datacatalog.QueryRequest.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.lyft.datacatalog.IntQueryKey revision = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_revision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 created_at = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_id().data(), static_cast<int>(this->reference_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.lyft.datacatalog.QueryRequest.reference_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.lyft.datacatalog.QueryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.lyft.datacatalog.QueryRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.lyft.datacatalog.QueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.QueryRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.QueryRequest.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // .pb.lyft.datacatalog.IntQueryKey revision = 3;
  if (this->has_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::revision(this), output);
  }

  // int64 created_at = 4;
  if (this->created_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->created_at(), output);
  }

  // string reference_id = 5;
  if (this->reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), static_cast<int>(this->reference_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.QueryRequest.reference_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->reference_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.lyft.datacatalog.QueryRequest)
}

::google::protobuf::uint8* QueryRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.lyft.datacatalog.QueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.QueryRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.QueryRequest.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // .pb.lyft.datacatalog.IntQueryKey revision = 3;
  if (this->has_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::revision(this), target);
  }

  // int64 created_at = 4;
  if (this->created_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->created_at(), target);
  }

  // string reference_id = 5;
  if (this->reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), static_cast<int>(this->reference_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.QueryRequest.reference_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reference_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.lyft.datacatalog.QueryRequest)
  return target;
}

size_t QueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.lyft.datacatalog.QueryRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string reference_id = 5;
  if (this->reference_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_id());
  }

  // .pb.lyft.datacatalog.IntQueryKey revision = 3;
  if (this->has_revision()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *revision_);
  }

  // int64 created_at = 4;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->created_at());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.lyft.datacatalog.QueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryRequest* source =
      ::google::protobuf::DynamicCastToGenerated<QueryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.lyft.datacatalog.QueryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.lyft.datacatalog.QueryRequest)
    MergeFrom(*source);
  }
}

void QueryRequest::MergeFrom(const QueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.lyft.datacatalog.QueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.reference_id().size() > 0) {

    reference_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_id_);
  }
  if (from.has_revision()) {
    mutable_revision()->::pb::lyft::datacatalog::IntQueryKey::MergeFrom(from.revision());
  }
  if (from.created_at() != 0) {
    set_created_at(from.created_at());
  }
}

void QueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.lyft.datacatalog.QueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRequest::CopyFrom(const QueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.lyft.datacatalog.QueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRequest::IsInitialized() const {
  return true;
}

void QueryRequest::Swap(QueryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryRequest::InternalSwap(QueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reference_id_.Swap(&other->reference_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(revision_, other->revision_);
  swap(created_at_, other->created_at_);
}

::google::protobuf::Metadata QueryRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void QueryResponse::InitAsDefaultInstance() {
}
class QueryResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryResponse::kArtifactFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryResponse::QueryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.lyft.datacatalog.QueryResponse)
}
QueryResponse::QueryResponse(const QueryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      artifact_(from.artifact_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.lyft.datacatalog.QueryResponse)
}

void QueryResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_QueryResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
}

QueryResponse::~QueryResponse() {
  // @@protoc_insertion_point(destructor:pb.lyft.datacatalog.QueryResponse)
  SharedDtor();
}

void QueryResponse::SharedDtor() {
}

void QueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResponse& QueryResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_QueryResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void QueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.lyft.datacatalog.QueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  artifact_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueryResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<QueryResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .pb.lyft.datacatalog.Artifact artifact = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::lyft::datacatalog::Artifact::_InternalParse;
          object = msg->add_artifact();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.lyft.datacatalog.QueryResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.lyft.datacatalog.Artifact artifact = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_artifact()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.lyft.datacatalog.QueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.lyft.datacatalog.QueryResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.lyft.datacatalog.QueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.lyft.datacatalog.Artifact artifact = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->artifact_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->artifact(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.lyft.datacatalog.QueryResponse)
}

::google::protobuf::uint8* QueryResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.lyft.datacatalog.QueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.lyft.datacatalog.Artifact artifact = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->artifact_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->artifact(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.lyft.datacatalog.QueryResponse)
  return target;
}

size_t QueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.lyft.datacatalog.QueryResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.lyft.datacatalog.Artifact artifact = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->artifact_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->artifact(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.lyft.datacatalog.QueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResponse* source =
      ::google::protobuf::DynamicCastToGenerated<QueryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.lyft.datacatalog.QueryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.lyft.datacatalog.QueryResponse)
    MergeFrom(*source);
  }
}

void QueryResponse::MergeFrom(const QueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.lyft.datacatalog.QueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  artifact_.MergeFrom(from.artifact_);
}

void QueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.lyft.datacatalog.QueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResponse::CopyFrom(const QueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.lyft.datacatalog.QueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResponse::IsInitialized() const {
  return true;
}

void QueryResponse::Swap(QueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryResponse::InternalSwap(QueryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&artifact_)->InternalSwap(CastToBase(&other->artifact_));
}

::google::protobuf::Metadata QueryResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateRequest::InitAsDefaultInstance() {
  ::pb::lyft::datacatalog::_CreateRequest_default_instance_._instance.get_mutable()->ref_ = const_cast< ::pb::lyft::datacatalog::ArtifactId*>(
      ::pb::lyft::datacatalog::ArtifactId::internal_default_instance());
}
class CreateRequest::HasBitSetters {
 public:
  static const ::pb::lyft::datacatalog::ArtifactId& ref(const CreateRequest* msg);
};

const ::pb::lyft::datacatalog::ArtifactId&
CreateRequest::HasBitSetters::ref(const CreateRequest* msg) {
  return *msg->ref_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRequest::kRefFieldNumber;
const int CreateRequest::kReferenceIdFieldNumber;
const int CreateRequest::kRevisionFieldNumber;
const int CreateRequest::kOutputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRequest::CreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.lyft.datacatalog.CreateRequest)
}
CreateRequest::CreateRequest(const CreateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_id().size() > 0) {
    reference_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_id_);
  }
  if (from.has_ref()) {
    ref_ = new ::pb::lyft::datacatalog::ArtifactId(*from.ref_);
  } else {
    ref_ = nullptr;
  }
  revision_ = from.revision_;
  // @@protoc_insertion_point(copy_constructor:pb.lyft.datacatalog.CreateRequest)
}

void CreateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ref_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revision_) -
      reinterpret_cast<char*>(&ref_)) + sizeof(revision_));
}

CreateRequest::~CreateRequest() {
  // @@protoc_insertion_point(destructor:pb.lyft.datacatalog.CreateRequest)
  SharedDtor();
}

void CreateRequest::SharedDtor() {
  reference_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ref_;
}

void CreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateRequest& CreateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void CreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.lyft.datacatalog.CreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.Clear();
  reference_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ref_ != nullptr) {
    delete ref_;
  }
  ref_ = nullptr;
  revision_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.lyft.datacatalog.ArtifactId ref = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::lyft::datacatalog::ArtifactId::_InternalParse;
        object = msg->mutable_ref();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string reference_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.lyft.datacatalog.CreateRequest.reference_id");
        object = msg->mutable_reference_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 revision = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_revision(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .pb.lyft.datacatalog.Parameter outputs = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::lyft::datacatalog::Parameter::_InternalParse;
          object = msg->add_outputs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.lyft.datacatalog.CreateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.lyft.datacatalog.ArtifactId ref = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_id().data(), static_cast<int>(this->reference_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.lyft.datacatalog.CreateRequest.reference_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 revision = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.lyft.datacatalog.Parameter outputs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.lyft.datacatalog.CreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.lyft.datacatalog.CreateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.lyft.datacatalog.CreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.lyft.datacatalog.ArtifactId ref = 1;
  if (this->has_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ref(this), output);
  }

  // string reference_id = 2;
  if (this->reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), static_cast<int>(this->reference_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.CreateRequest.reference_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reference_id(), output);
  }

  // int64 revision = 3;
  if (this->revision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->revision(), output);
  }

  // repeated .pb.lyft.datacatalog.Parameter outputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->outputs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.lyft.datacatalog.CreateRequest)
}

::google::protobuf::uint8* CreateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.lyft.datacatalog.CreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.lyft.datacatalog.ArtifactId ref = 1;
  if (this->has_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ref(this), target);
  }

  // string reference_id = 2;
  if (this->reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), static_cast<int>(this->reference_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.CreateRequest.reference_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reference_id(), target);
  }

  // int64 revision = 3;
  if (this->revision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->revision(), target);
  }

  // repeated .pb.lyft.datacatalog.Parameter outputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->outputs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.lyft.datacatalog.CreateRequest)
  return target;
}

size_t CreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.lyft.datacatalog.CreateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.lyft.datacatalog.Parameter outputs = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->outputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->outputs(static_cast<int>(i)));
    }
  }

  // string reference_id = 2;
  if (this->reference_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_id());
  }

  // .pb.lyft.datacatalog.ArtifactId ref = 1;
  if (this->has_ref()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ref_);
  }

  // int64 revision = 3;
  if (this->revision() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->revision());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.lyft.datacatalog.CreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CreateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.lyft.datacatalog.CreateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.lyft.datacatalog.CreateRequest)
    MergeFrom(*source);
  }
}

void CreateRequest::MergeFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.lyft.datacatalog.CreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outputs_.MergeFrom(from.outputs_);
  if (from.reference_id().size() > 0) {

    reference_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_id_);
  }
  if (from.has_ref()) {
    mutable_ref()->::pb::lyft::datacatalog::ArtifactId::MergeFrom(from.ref());
  }
  if (from.revision() != 0) {
    set_revision(from.revision());
  }
}

void CreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.lyft.datacatalog.CreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRequest::CopyFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.lyft.datacatalog.CreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRequest::IsInitialized() const {
  return true;
}

void CreateRequest::Swap(CreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRequest::InternalSwap(CreateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&outputs_)->InternalSwap(CastToBase(&other->outputs_));
  reference_id_.Swap(&other->reference_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ref_, other->ref_);
  swap(revision_, other->revision_);
}

::google::protobuf::Metadata CreateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateResponse::InitAsDefaultInstance() {
  ::pb::lyft::datacatalog::_CreateResponse_default_instance_._instance.get_mutable()->artifact_ = const_cast< ::pb::lyft::datacatalog::Artifact*>(
      ::pb::lyft::datacatalog::Artifact::internal_default_instance());
}
class CreateResponse::HasBitSetters {
 public:
  static const ::pb::lyft::datacatalog::Artifact& artifact(const CreateResponse* msg);
};

const ::pb::lyft::datacatalog::Artifact&
CreateResponse::HasBitSetters::artifact(const CreateResponse* msg) {
  return *msg->artifact_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateResponse::kArtifactFieldNumber;
const int CreateResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateResponse::CreateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.lyft.datacatalog.CreateResponse)
}
CreateResponse::CreateResponse(const CreateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_artifact()) {
    artifact_ = new ::pb::lyft::datacatalog::Artifact(*from.artifact_);
  } else {
    artifact_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:pb.lyft.datacatalog.CreateResponse)
}

void CreateResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::memset(&artifact_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&artifact_)) + sizeof(status_));
}

CreateResponse::~CreateResponse() {
  // @@protoc_insertion_point(destructor:pb.lyft.datacatalog.CreateResponse)
  SharedDtor();
}

void CreateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete artifact_;
}

void CreateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateResponse& CreateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void CreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.lyft.datacatalog.CreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && artifact_ != nullptr) {
    delete artifact_;
  }
  artifact_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.lyft.datacatalog.Artifact artifact = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::lyft::datacatalog::Artifact::_InternalParse;
        object = msg->mutable_artifact();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.lyft.datacatalog.CreateResponse.Status status = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_status(static_cast<::pb::lyft::datacatalog::CreateResponse_Status>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.lyft.datacatalog.CreateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.lyft.datacatalog.Artifact artifact = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.lyft.datacatalog.CreateResponse.Status status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::pb::lyft::datacatalog::CreateResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.lyft.datacatalog.CreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.lyft.datacatalog.CreateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.lyft.datacatalog.CreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.lyft.datacatalog.Artifact artifact = 1;
  if (this->has_artifact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact(this), output);
  }

  // .pb.lyft.datacatalog.CreateResponse.Status status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.lyft.datacatalog.CreateResponse)
}

::google::protobuf::uint8* CreateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.lyft.datacatalog.CreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.lyft.datacatalog.Artifact artifact = 1;
  if (this->has_artifact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact(this), target);
  }

  // .pb.lyft.datacatalog.CreateResponse.Status status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.lyft.datacatalog.CreateResponse)
  return target;
}

size_t CreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.lyft.datacatalog.CreateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.lyft.datacatalog.Artifact artifact = 1;
  if (this->has_artifact()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_);
  }

  // .pb.lyft.datacatalog.CreateResponse.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.lyft.datacatalog.CreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CreateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.lyft.datacatalog.CreateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.lyft.datacatalog.CreateResponse)
    MergeFrom(*source);
  }
}

void CreateResponse::MergeFrom(const CreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.lyft.datacatalog.CreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_artifact()) {
    mutable_artifact()->::pb::lyft::datacatalog::Artifact::MergeFrom(from.artifact());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void CreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.lyft.datacatalog.CreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateResponse::CopyFrom(const CreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.lyft.datacatalog.CreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateResponse::IsInitialized() const {
  return true;
}

void CreateResponse::Swap(CreateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateResponse::InternalSwap(CreateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(artifact_, other->artifact_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata CreateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GenerateProvenanceRequest::InitAsDefaultInstance() {
  ::pb::lyft::datacatalog::_GenerateProvenanceRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::pb::lyft::datacatalog::ArtifactId*>(
      ::pb::lyft::datacatalog::ArtifactId::internal_default_instance());
}
class GenerateProvenanceRequest::HasBitSetters {
 public:
  static const ::pb::lyft::datacatalog::ArtifactId& id(const GenerateProvenanceRequest* msg);
};

const ::pb::lyft::datacatalog::ArtifactId&
GenerateProvenanceRequest::HasBitSetters::id(const GenerateProvenanceRequest* msg) {
  return *msg->id_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenerateProvenanceRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenerateProvenanceRequest::GenerateProvenanceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.lyft.datacatalog.GenerateProvenanceRequest)
}
GenerateProvenanceRequest::GenerateProvenanceRequest(const GenerateProvenanceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::pb::lyft::datacatalog::ArtifactId(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.lyft.datacatalog.GenerateProvenanceRequest)
}

void GenerateProvenanceRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GenerateProvenanceRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  id_ = nullptr;
}

GenerateProvenanceRequest::~GenerateProvenanceRequest() {
  // @@protoc_insertion_point(destructor:pb.lyft.datacatalog.GenerateProvenanceRequest)
  SharedDtor();
}

void GenerateProvenanceRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void GenerateProvenanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateProvenanceRequest& GenerateProvenanceRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GenerateProvenanceRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void GenerateProvenanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.lyft.datacatalog.GenerateProvenanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GenerateProvenanceRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GenerateProvenanceRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.lyft.datacatalog.ArtifactId id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::lyft::datacatalog::ArtifactId::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GenerateProvenanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.lyft.datacatalog.GenerateProvenanceRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.lyft.datacatalog.ArtifactId id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.lyft.datacatalog.GenerateProvenanceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.lyft.datacatalog.GenerateProvenanceRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GenerateProvenanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.lyft.datacatalog.GenerateProvenanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.lyft.datacatalog.ArtifactId id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.lyft.datacatalog.GenerateProvenanceRequest)
}

::google::protobuf::uint8* GenerateProvenanceRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.lyft.datacatalog.GenerateProvenanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.lyft.datacatalog.ArtifactId id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.lyft.datacatalog.GenerateProvenanceRequest)
  return target;
}

size_t GenerateProvenanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.lyft.datacatalog.GenerateProvenanceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.lyft.datacatalog.ArtifactId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateProvenanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.lyft.datacatalog.GenerateProvenanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateProvenanceRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GenerateProvenanceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.lyft.datacatalog.GenerateProvenanceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.lyft.datacatalog.GenerateProvenanceRequest)
    MergeFrom(*source);
  }
}

void GenerateProvenanceRequest::MergeFrom(const GenerateProvenanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.lyft.datacatalog.GenerateProvenanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::pb::lyft::datacatalog::ArtifactId::MergeFrom(from.id());
  }
}

void GenerateProvenanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.lyft.datacatalog.GenerateProvenanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateProvenanceRequest::CopyFrom(const GenerateProvenanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.lyft.datacatalog.GenerateProvenanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateProvenanceRequest::IsInitialized() const {
  return true;
}

void GenerateProvenanceRequest::Swap(GenerateProvenanceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenerateProvenanceRequest::InternalSwap(GenerateProvenanceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata GenerateProvenanceRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GenerateProvenanceResponse::InitAsDefaultInstance() {
}
class GenerateProvenanceResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenerateProvenanceResponse::kProvenanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenerateProvenanceResponse::GenerateProvenanceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.lyft.datacatalog.GenerateProvenanceResponse)
}
GenerateProvenanceResponse::GenerateProvenanceResponse(const GenerateProvenanceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  provenance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.provenance().size() > 0) {
    provenance_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.provenance_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.lyft.datacatalog.GenerateProvenanceResponse)
}

void GenerateProvenanceResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GenerateProvenanceResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  provenance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GenerateProvenanceResponse::~GenerateProvenanceResponse() {
  // @@protoc_insertion_point(destructor:pb.lyft.datacatalog.GenerateProvenanceResponse)
  SharedDtor();
}

void GenerateProvenanceResponse::SharedDtor() {
  provenance_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GenerateProvenanceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateProvenanceResponse& GenerateProvenanceResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GenerateProvenanceResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void GenerateProvenanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.lyft.datacatalog.GenerateProvenanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  provenance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GenerateProvenanceResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GenerateProvenanceResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string provenance = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.lyft.datacatalog.GenerateProvenanceResponse.provenance");
        object = msg->mutable_provenance();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GenerateProvenanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.lyft.datacatalog.GenerateProvenanceResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string provenance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provenance()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->provenance().data(), static_cast<int>(this->provenance().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.lyft.datacatalog.GenerateProvenanceResponse.provenance"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.lyft.datacatalog.GenerateProvenanceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.lyft.datacatalog.GenerateProvenanceResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GenerateProvenanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.lyft.datacatalog.GenerateProvenanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string provenance = 1;
  if (this->provenance().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->provenance().data(), static_cast<int>(this->provenance().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.GenerateProvenanceResponse.provenance");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->provenance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.lyft.datacatalog.GenerateProvenanceResponse)
}

::google::protobuf::uint8* GenerateProvenanceResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.lyft.datacatalog.GenerateProvenanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string provenance = 1;
  if (this->provenance().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->provenance().data(), static_cast<int>(this->provenance().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.lyft.datacatalog.GenerateProvenanceResponse.provenance");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->provenance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.lyft.datacatalog.GenerateProvenanceResponse)
  return target;
}

size_t GenerateProvenanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.lyft.datacatalog.GenerateProvenanceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string provenance = 1;
  if (this->provenance().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->provenance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateProvenanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.lyft.datacatalog.GenerateProvenanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateProvenanceResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GenerateProvenanceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.lyft.datacatalog.GenerateProvenanceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.lyft.datacatalog.GenerateProvenanceResponse)
    MergeFrom(*source);
  }
}

void GenerateProvenanceResponse::MergeFrom(const GenerateProvenanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.lyft.datacatalog.GenerateProvenanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.provenance().size() > 0) {

    provenance_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.provenance_);
  }
}

void GenerateProvenanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.lyft.datacatalog.GenerateProvenanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateProvenanceResponse::CopyFrom(const GenerateProvenanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.lyft.datacatalog.GenerateProvenanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateProvenanceResponse::IsInitialized() const {
  return true;
}

void GenerateProvenanceResponse::Swap(GenerateProvenanceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenerateProvenanceResponse::InternalSwap(GenerateProvenanceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  provenance_.Swap(&other->provenance_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GenerateProvenanceResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace datacatalog
}  // namespace lyft
}  // namespace pb
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::pb::lyft::datacatalog::Parameter* Arena::CreateMaybeMessage< ::pb::lyft::datacatalog::Parameter >(Arena* arena) {
  return Arena::CreateInternal< ::pb::lyft::datacatalog::Parameter >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::lyft::datacatalog::Artifact* Arena::CreateMaybeMessage< ::pb::lyft::datacatalog::Artifact >(Arena* arena) {
  return Arena::CreateInternal< ::pb::lyft::datacatalog::Artifact >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::lyft::datacatalog::ArtifactId* Arena::CreateMaybeMessage< ::pb::lyft::datacatalog::ArtifactId >(Arena* arena) {
  return Arena::CreateInternal< ::pb::lyft::datacatalog::ArtifactId >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::lyft::datacatalog::GetRequest* Arena::CreateMaybeMessage< ::pb::lyft::datacatalog::GetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::lyft::datacatalog::GetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::lyft::datacatalog::GetResponse* Arena::CreateMaybeMessage< ::pb::lyft::datacatalog::GetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::lyft::datacatalog::GetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::lyft::datacatalog::IntFilter* Arena::CreateMaybeMessage< ::pb::lyft::datacatalog::IntFilter >(Arena* arena) {
  return Arena::CreateInternal< ::pb::lyft::datacatalog::IntFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::lyft::datacatalog::IntRangeFilter* Arena::CreateMaybeMessage< ::pb::lyft::datacatalog::IntRangeFilter >(Arena* arena) {
  return Arena::CreateInternal< ::pb::lyft::datacatalog::IntRangeFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::lyft::datacatalog::IntQueryKey* Arena::CreateMaybeMessage< ::pb::lyft::datacatalog::IntQueryKey >(Arena* arena) {
  return Arena::CreateInternal< ::pb::lyft::datacatalog::IntQueryKey >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::lyft::datacatalog::QueryRequest* Arena::CreateMaybeMessage< ::pb::lyft::datacatalog::QueryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::lyft::datacatalog::QueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::lyft::datacatalog::QueryResponse* Arena::CreateMaybeMessage< ::pb::lyft::datacatalog::QueryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::lyft::datacatalog::QueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::lyft::datacatalog::CreateRequest* Arena::CreateMaybeMessage< ::pb::lyft::datacatalog::CreateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::lyft::datacatalog::CreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::lyft::datacatalog::CreateResponse* Arena::CreateMaybeMessage< ::pb::lyft::datacatalog::CreateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::lyft::datacatalog::CreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::lyft::datacatalog::GenerateProvenanceRequest* Arena::CreateMaybeMessage< ::pb::lyft::datacatalog::GenerateProvenanceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::lyft::datacatalog::GenerateProvenanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::lyft::datacatalog::GenerateProvenanceResponse* Arena::CreateMaybeMessage< ::pb::lyft::datacatalog::GenerateProvenanceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pb::lyft::datacatalog::GenerateProvenanceResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
