// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/datacatalog/datacatalog.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fdatacatalog_2fdatacatalog_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fdatacatalog_2fdatacatalog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fdatacatalog_2fdatacatalog_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto();
namespace pb {
namespace lyft {
namespace datacatalog {
class Artifact;
class ArtifactDefaultTypeInternal;
extern ArtifactDefaultTypeInternal _Artifact_default_instance_;
class ArtifactId;
class ArtifactIdDefaultTypeInternal;
extern ArtifactIdDefaultTypeInternal _ArtifactId_default_instance_;
class CreateRequest;
class CreateRequestDefaultTypeInternal;
extern CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
class CreateResponse;
class CreateResponseDefaultTypeInternal;
extern CreateResponseDefaultTypeInternal _CreateResponse_default_instance_;
class GenerateProvenanceRequest;
class GenerateProvenanceRequestDefaultTypeInternal;
extern GenerateProvenanceRequestDefaultTypeInternal _GenerateProvenanceRequest_default_instance_;
class GenerateProvenanceResponse;
class GenerateProvenanceResponseDefaultTypeInternal;
extern GenerateProvenanceResponseDefaultTypeInternal _GenerateProvenanceResponse_default_instance_;
class GetRequest;
class GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
class GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class IntFilter;
class IntFilterDefaultTypeInternal;
extern IntFilterDefaultTypeInternal _IntFilter_default_instance_;
class IntQueryKey;
class IntQueryKeyDefaultTypeInternal;
extern IntQueryKeyDefaultTypeInternal _IntQueryKey_default_instance_;
class IntRangeFilter;
class IntRangeFilterDefaultTypeInternal;
extern IntRangeFilterDefaultTypeInternal _IntRangeFilter_default_instance_;
class Parameter;
class ParameterDefaultTypeInternal;
extern ParameterDefaultTypeInternal _Parameter_default_instance_;
class QueryRequest;
class QueryRequestDefaultTypeInternal;
extern QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
class QueryResponse;
class QueryResponseDefaultTypeInternal;
extern QueryResponseDefaultTypeInternal _QueryResponse_default_instance_;
}  // namespace datacatalog
}  // namespace lyft
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::lyft::datacatalog::Artifact* Arena::CreateMaybeMessage<::pb::lyft::datacatalog::Artifact>(Arena*);
template<> ::pb::lyft::datacatalog::ArtifactId* Arena::CreateMaybeMessage<::pb::lyft::datacatalog::ArtifactId>(Arena*);
template<> ::pb::lyft::datacatalog::CreateRequest* Arena::CreateMaybeMessage<::pb::lyft::datacatalog::CreateRequest>(Arena*);
template<> ::pb::lyft::datacatalog::CreateResponse* Arena::CreateMaybeMessage<::pb::lyft::datacatalog::CreateResponse>(Arena*);
template<> ::pb::lyft::datacatalog::GenerateProvenanceRequest* Arena::CreateMaybeMessage<::pb::lyft::datacatalog::GenerateProvenanceRequest>(Arena*);
template<> ::pb::lyft::datacatalog::GenerateProvenanceResponse* Arena::CreateMaybeMessage<::pb::lyft::datacatalog::GenerateProvenanceResponse>(Arena*);
template<> ::pb::lyft::datacatalog::GetRequest* Arena::CreateMaybeMessage<::pb::lyft::datacatalog::GetRequest>(Arena*);
template<> ::pb::lyft::datacatalog::GetResponse* Arena::CreateMaybeMessage<::pb::lyft::datacatalog::GetResponse>(Arena*);
template<> ::pb::lyft::datacatalog::IntFilter* Arena::CreateMaybeMessage<::pb::lyft::datacatalog::IntFilter>(Arena*);
template<> ::pb::lyft::datacatalog::IntQueryKey* Arena::CreateMaybeMessage<::pb::lyft::datacatalog::IntQueryKey>(Arena*);
template<> ::pb::lyft::datacatalog::IntRangeFilter* Arena::CreateMaybeMessage<::pb::lyft::datacatalog::IntRangeFilter>(Arena*);
template<> ::pb::lyft::datacatalog::Parameter* Arena::CreateMaybeMessage<::pb::lyft::datacatalog::Parameter>(Arena*);
template<> ::pb::lyft::datacatalog::QueryRequest* Arena::CreateMaybeMessage<::pb::lyft::datacatalog::QueryRequest>(Arena*);
template<> ::pb::lyft::datacatalog::QueryResponse* Arena::CreateMaybeMessage<::pb::lyft::datacatalog::QueryResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {
namespace lyft {
namespace datacatalog {

enum CreateResponse_Status {
  CreateResponse_Status_ALREADY_EXISTS = 0,
  CreateResponse_Status_CREATED = 1,
  CreateResponse_Status_CreateResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  CreateResponse_Status_CreateResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool CreateResponse_Status_IsValid(int value);
const CreateResponse_Status CreateResponse_Status_Status_MIN = CreateResponse_Status_ALREADY_EXISTS;
const CreateResponse_Status CreateResponse_Status_Status_MAX = CreateResponse_Status_CREATED;
const int CreateResponse_Status_Status_ARRAYSIZE = CreateResponse_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* CreateResponse_Status_descriptor();
inline const ::std::string& CreateResponse_Status_Name(CreateResponse_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    CreateResponse_Status_descriptor(), value);
}
inline bool CreateResponse_Status_Parse(
    const ::std::string& name, CreateResponse_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CreateResponse_Status>(
    CreateResponse_Status_descriptor(), name, value);
}
enum QueryOperator {
  EQUAL = 0,
  GREATER_THAN = 1,
  LESSER_THAN = 2,
  QueryOperator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  QueryOperator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool QueryOperator_IsValid(int value);
const QueryOperator QueryOperator_MIN = EQUAL;
const QueryOperator QueryOperator_MAX = LESSER_THAN;
const int QueryOperator_ARRAYSIZE = QueryOperator_MAX + 1;

const ::google::protobuf::EnumDescriptor* QueryOperator_descriptor();
inline const ::std::string& QueryOperator_Name(QueryOperator value) {
  return ::google::protobuf::internal::NameOfEnum(
    QueryOperator_descriptor(), value);
}
inline bool QueryOperator_Parse(
    const ::std::string& name, QueryOperator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QueryOperator>(
    QueryOperator_descriptor(), name, value);
}
// ===================================================================

class Parameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.lyft.datacatalog.Parameter) */ {
 public:
  Parameter();
  virtual ~Parameter();

  Parameter(const Parameter& from);

  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Parameter(Parameter&& from) noexcept
    : Parameter() {
    *this = ::std::move(from);
  }

  inline Parameter& operator=(Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Parameter* internal_default_instance() {
    return reinterpret_cast<const Parameter*>(
               &_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Parameter* other);
  friend void swap(Parameter& a, Parameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Parameter* New() const final {
    return CreateMaybeMessage<Parameter>(nullptr);
  }

  Parameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Parameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Parameter& from);
  void MergeFrom(const Parameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:pb.lyft.datacatalog.Parameter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
};
// -------------------------------------------------------------------

class Artifact final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.lyft.datacatalog.Artifact) */ {
 public:
  Artifact();
  virtual ~Artifact();

  Artifact(const Artifact& from);

  inline Artifact& operator=(const Artifact& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Artifact(Artifact&& from) noexcept
    : Artifact() {
    *this = ::std::move(from);
  }

  inline Artifact& operator=(Artifact&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Artifact& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Artifact* internal_default_instance() {
    return reinterpret_cast<const Artifact*>(
               &_Artifact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Artifact* other);
  friend void swap(Artifact& a, Artifact& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Artifact* New() const final {
    return CreateMaybeMessage<Artifact>(nullptr);
  }

  Artifact* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Artifact>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Artifact& from);
  void MergeFrom(const Artifact& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Artifact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.lyft.datacatalog.Parameter inputs = 7;
  int inputs_size() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 7;
  ::pb::lyft::datacatalog::Parameter* mutable_inputs(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Parameter >*
      mutable_inputs();
  const ::pb::lyft::datacatalog::Parameter& inputs(int index) const;
  ::pb::lyft::datacatalog::Parameter* add_inputs();
  const ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Parameter >&
      inputs() const;

  // repeated .pb.lyft.datacatalog.Parameter outputs = 8;
  int outputs_size() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 8;
  ::pb::lyft::datacatalog::Parameter* mutable_outputs(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Parameter >*
      mutable_outputs();
  const ::pb::lyft::datacatalog::Parameter& outputs(int index) const;
  ::pb::lyft::datacatalog::Parameter* add_outputs();
  const ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Parameter >&
      outputs() const;

  // string provenance = 1;
  void clear_provenance();
  static const int kProvenanceFieldNumber = 1;
  const ::std::string& provenance() const;
  void set_provenance(const ::std::string& value);
  #if LANG_CXX11
  void set_provenance(::std::string&& value);
  #endif
  void set_provenance(const char* value);
  void set_provenance(const char* value, size_t size);
  ::std::string* mutable_provenance();
  ::std::string* release_provenance();
  void set_allocated_provenance(::std::string* provenance);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string reference_id = 6;
  void clear_reference_id();
  static const int kReferenceIdFieldNumber = 6;
  const ::std::string& reference_id() const;
  void set_reference_id(const ::std::string& value);
  #if LANG_CXX11
  void set_reference_id(::std::string&& value);
  #endif
  void set_reference_id(const char* value);
  void set_reference_id(const char* value, size_t size);
  ::std::string* mutable_reference_id();
  ::std::string* release_reference_id();
  void set_allocated_reference_id(::std::string* reference_id);

  // int64 revision = 4;
  void clear_revision();
  static const int kRevisionFieldNumber = 4;
  ::google::protobuf::int64 revision() const;
  void set_revision(::google::protobuf::int64 value);

  // int64 created_at = 5;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 5;
  ::google::protobuf::int64 created_at() const;
  void set_created_at(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.lyft.datacatalog.Artifact)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Parameter > inputs_;
  ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Parameter > outputs_;
  ::google::protobuf::internal::ArenaStringPtr provenance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr reference_id_;
  ::google::protobuf::int64 revision_;
  ::google::protobuf::int64 created_at_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
};
// -------------------------------------------------------------------

class ArtifactId final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.lyft.datacatalog.ArtifactId) */ {
 public:
  ArtifactId();
  virtual ~ArtifactId();

  ArtifactId(const ArtifactId& from);

  inline ArtifactId& operator=(const ArtifactId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArtifactId(ArtifactId&& from) noexcept
    : ArtifactId() {
    *this = ::std::move(from);
  }

  inline ArtifactId& operator=(ArtifactId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ArtifactId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArtifactId* internal_default_instance() {
    return reinterpret_cast<const ArtifactId*>(
               &_ArtifactId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ArtifactId* other);
  friend void swap(ArtifactId& a, ArtifactId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArtifactId* New() const final {
    return CreateMaybeMessage<ArtifactId>(nullptr);
  }

  ArtifactId* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArtifactId>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ArtifactId& from);
  void MergeFrom(const ArtifactId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArtifactId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.lyft.datacatalog.Parameter inputs = 3;
  int inputs_size() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 3;
  ::pb::lyft::datacatalog::Parameter* mutable_inputs(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Parameter >*
      mutable_inputs();
  const ::pb::lyft::datacatalog::Parameter& inputs(int index) const;
  ::pb::lyft::datacatalog::Parameter* add_inputs();
  const ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Parameter >&
      inputs() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:pb.lyft.datacatalog.ArtifactId)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Parameter > inputs_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
};
// -------------------------------------------------------------------

class GetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.lyft.datacatalog.GetRequest) */ {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetRequest& default_instance();

  enum IdCase {
    kProvenance = 1,
    kArtifactId = 2,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetRequest* other);
  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRequest* New() const final {
    return CreateMaybeMessage<GetRequest>(nullptr);
  }

  GetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string provenance = 1;
  private:
  bool has_provenance() const;
  public:
  void clear_provenance();
  static const int kProvenanceFieldNumber = 1;
  const ::std::string& provenance() const;
  void set_provenance(const ::std::string& value);
  #if LANG_CXX11
  void set_provenance(::std::string&& value);
  #endif
  void set_provenance(const char* value);
  void set_provenance(const char* value, size_t size);
  ::std::string* mutable_provenance();
  ::std::string* release_provenance();
  void set_allocated_provenance(::std::string* provenance);

  // .pb.lyft.datacatalog.ArtifactId artifact_id = 2;
  bool has_artifact_id() const;
  void clear_artifact_id();
  static const int kArtifactIdFieldNumber = 2;
  const ::pb::lyft::datacatalog::ArtifactId& artifact_id() const;
  ::pb::lyft::datacatalog::ArtifactId* release_artifact_id();
  ::pb::lyft::datacatalog::ArtifactId* mutable_artifact_id();
  void set_allocated_artifact_id(::pb::lyft::datacatalog::ArtifactId* artifact_id);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:pb.lyft.datacatalog.GetRequest)
 private:
  class HasBitSetters;
  void set_has_provenance();
  void set_has_artifact_id();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::google::protobuf::internal::ArenaStringPtr provenance_;
    ::pb::lyft::datacatalog::ArtifactId* artifact_id_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
};
// -------------------------------------------------------------------

class GetResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.lyft.datacatalog.GetResponse) */ {
 public:
  GetResponse();
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetResponse* other);
  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetResponse* New() const final {
    return CreateMaybeMessage<GetResponse>(nullptr);
  }

  GetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.lyft.datacatalog.Artifact artifact = 1;
  bool has_artifact() const;
  void clear_artifact();
  static const int kArtifactFieldNumber = 1;
  const ::pb::lyft::datacatalog::Artifact& artifact() const;
  ::pb::lyft::datacatalog::Artifact* release_artifact();
  ::pb::lyft::datacatalog::Artifact* mutable_artifact();
  void set_allocated_artifact(::pb::lyft::datacatalog::Artifact* artifact);

  // @@protoc_insertion_point(class_scope:pb.lyft.datacatalog.GetResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::lyft::datacatalog::Artifact* artifact_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
};
// -------------------------------------------------------------------

class IntFilter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.lyft.datacatalog.IntFilter) */ {
 public:
  IntFilter();
  virtual ~IntFilter();

  IntFilter(const IntFilter& from);

  inline IntFilter& operator=(const IntFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IntFilter(IntFilter&& from) noexcept
    : IntFilter() {
    *this = ::std::move(from);
  }

  inline IntFilter& operator=(IntFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IntFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntFilter* internal_default_instance() {
    return reinterpret_cast<const IntFilter*>(
               &_IntFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(IntFilter* other);
  friend void swap(IntFilter& a, IntFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntFilter* New() const final {
    return CreateMaybeMessage<IntFilter>(nullptr);
  }

  IntFilter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IntFilter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IntFilter& from);
  void MergeFrom(const IntFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int64 value() const;
  void set_value(::google::protobuf::int64 value);

  // .pb.lyft.datacatalog.QueryOperator operator = 2;
  void clear_operator_();
  static const int kOperatorFieldNumber = 2;
  ::pb::lyft::datacatalog::QueryOperator operator_() const;
  void set_operator_(::pb::lyft::datacatalog::QueryOperator value);

  // @@protoc_insertion_point(class_scope:pb.lyft.datacatalog.IntFilter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 value_;
  int operator__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
};
// -------------------------------------------------------------------

class IntRangeFilter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.lyft.datacatalog.IntRangeFilter) */ {
 public:
  IntRangeFilter();
  virtual ~IntRangeFilter();

  IntRangeFilter(const IntRangeFilter& from);

  inline IntRangeFilter& operator=(const IntRangeFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IntRangeFilter(IntRangeFilter&& from) noexcept
    : IntRangeFilter() {
    *this = ::std::move(from);
  }

  inline IntRangeFilter& operator=(IntRangeFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IntRangeFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntRangeFilter* internal_default_instance() {
    return reinterpret_cast<const IntRangeFilter*>(
               &_IntRangeFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(IntRangeFilter* other);
  friend void swap(IntRangeFilter& a, IntRangeFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntRangeFilter* New() const final {
    return CreateMaybeMessage<IntRangeFilter>(nullptr);
  }

  IntRangeFilter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IntRangeFilter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IntRangeFilter& from);
  void MergeFrom(const IntRangeFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntRangeFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 min = 1;
  void clear_min();
  static const int kMinFieldNumber = 1;
  ::google::protobuf::int64 min() const;
  void set_min(::google::protobuf::int64 value);

  // int64 max = 2;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  ::google::protobuf::int64 max() const;
  void set_max(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.lyft.datacatalog.IntRangeFilter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 min_;
  ::google::protobuf::int64 max_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
};
// -------------------------------------------------------------------

class IntQueryKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.lyft.datacatalog.IntQueryKey) */ {
 public:
  IntQueryKey();
  virtual ~IntQueryKey();

  IntQueryKey(const IntQueryKey& from);

  inline IntQueryKey& operator=(const IntQueryKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IntQueryKey(IntQueryKey&& from) noexcept
    : IntQueryKey() {
    *this = ::std::move(from);
  }

  inline IntQueryKey& operator=(IntQueryKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IntQueryKey& default_instance();

  enum FilterCase {
    kVal = 1,
    kRange = 2,
    FILTER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntQueryKey* internal_default_instance() {
    return reinterpret_cast<const IntQueryKey*>(
               &_IntQueryKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(IntQueryKey* other);
  friend void swap(IntQueryKey& a, IntQueryKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntQueryKey* New() const final {
    return CreateMaybeMessage<IntQueryKey>(nullptr);
  }

  IntQueryKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IntQueryKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IntQueryKey& from);
  void MergeFrom(const IntQueryKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntQueryKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.lyft.datacatalog.IntFilter val = 1;
  bool has_val() const;
  void clear_val();
  static const int kValFieldNumber = 1;
  const ::pb::lyft::datacatalog::IntFilter& val() const;
  ::pb::lyft::datacatalog::IntFilter* release_val();
  ::pb::lyft::datacatalog::IntFilter* mutable_val();
  void set_allocated_val(::pb::lyft::datacatalog::IntFilter* val);

  // .pb.lyft.datacatalog.IntRangeFilter range = 2;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 2;
  const ::pb::lyft::datacatalog::IntRangeFilter& range() const;
  ::pb::lyft::datacatalog::IntRangeFilter* release_range();
  ::pb::lyft::datacatalog::IntRangeFilter* mutable_range();
  void set_allocated_range(::pb::lyft::datacatalog::IntRangeFilter* range);

  void clear_filter();
  FilterCase filter_case() const;
  // @@protoc_insertion_point(class_scope:pb.lyft.datacatalog.IntQueryKey)
 private:
  class HasBitSetters;
  void set_has_val();
  void set_has_range();

  inline bool has_filter() const;
  inline void clear_has_filter();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union FilterUnion {
    FilterUnion() {}
    ::pb::lyft::datacatalog::IntFilter* val_;
    ::pb::lyft::datacatalog::IntRangeFilter* range_;
  } filter_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
};
// -------------------------------------------------------------------

class QueryRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.lyft.datacatalog.QueryRequest) */ {
 public:
  QueryRequest();
  virtual ~QueryRequest();

  QueryRequest(const QueryRequest& from);

  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryRequest(QueryRequest&& from) noexcept
    : QueryRequest() {
    *this = ::std::move(from);
  }

  inline QueryRequest& operator=(QueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const QueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRequest*>(
               &_QueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(QueryRequest* other);
  friend void swap(QueryRequest& a, QueryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryRequest* New() const final {
    return CreateMaybeMessage<QueryRequest>(nullptr);
  }

  QueryRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryRequest& from);
  void MergeFrom(const QueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string reference_id = 5;
  void clear_reference_id();
  static const int kReferenceIdFieldNumber = 5;
  const ::std::string& reference_id() const;
  void set_reference_id(const ::std::string& value);
  #if LANG_CXX11
  void set_reference_id(::std::string&& value);
  #endif
  void set_reference_id(const char* value);
  void set_reference_id(const char* value, size_t size);
  ::std::string* mutable_reference_id();
  ::std::string* release_reference_id();
  void set_allocated_reference_id(::std::string* reference_id);

  // .pb.lyft.datacatalog.IntQueryKey revision = 3;
  bool has_revision() const;
  void clear_revision();
  static const int kRevisionFieldNumber = 3;
  const ::pb::lyft::datacatalog::IntQueryKey& revision() const;
  ::pb::lyft::datacatalog::IntQueryKey* release_revision();
  ::pb::lyft::datacatalog::IntQueryKey* mutable_revision();
  void set_allocated_revision(::pb::lyft::datacatalog::IntQueryKey* revision);

  // int64 created_at = 4;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 4;
  ::google::protobuf::int64 created_at() const;
  void set_created_at(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.lyft.datacatalog.QueryRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr reference_id_;
  ::pb::lyft::datacatalog::IntQueryKey* revision_;
  ::google::protobuf::int64 created_at_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
};
// -------------------------------------------------------------------

class QueryResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.lyft.datacatalog.QueryResponse) */ {
 public:
  QueryResponse();
  virtual ~QueryResponse();

  QueryResponse(const QueryResponse& from);

  inline QueryResponse& operator=(const QueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryResponse(QueryResponse&& from) noexcept
    : QueryResponse() {
    *this = ::std::move(from);
  }

  inline QueryResponse& operator=(QueryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const QueryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponse* internal_default_instance() {
    return reinterpret_cast<const QueryResponse*>(
               &_QueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(QueryResponse* other);
  friend void swap(QueryResponse& a, QueryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryResponse* New() const final {
    return CreateMaybeMessage<QueryResponse>(nullptr);
  }

  QueryResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryResponse& from);
  void MergeFrom(const QueryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.lyft.datacatalog.Artifact artifact = 1;
  int artifact_size() const;
  void clear_artifact();
  static const int kArtifactFieldNumber = 1;
  ::pb::lyft::datacatalog::Artifact* mutable_artifact(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Artifact >*
      mutable_artifact();
  const ::pb::lyft::datacatalog::Artifact& artifact(int index) const;
  ::pb::lyft::datacatalog::Artifact* add_artifact();
  const ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Artifact >&
      artifact() const;

  // @@protoc_insertion_point(class_scope:pb.lyft.datacatalog.QueryResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Artifact > artifact_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
};
// -------------------------------------------------------------------

class CreateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.lyft.datacatalog.CreateRequest) */ {
 public:
  CreateRequest();
  virtual ~CreateRequest();

  CreateRequest(const CreateRequest& from);

  inline CreateRequest& operator=(const CreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateRequest(CreateRequest&& from) noexcept
    : CreateRequest() {
    *this = ::std::move(from);
  }

  inline CreateRequest& operator=(CreateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRequest*>(
               &_CreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CreateRequest* other);
  friend void swap(CreateRequest& a, CreateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateRequest* New() const final {
    return CreateMaybeMessage<CreateRequest>(nullptr);
  }

  CreateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateRequest& from);
  void MergeFrom(const CreateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.lyft.datacatalog.Parameter outputs = 4;
  int outputs_size() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 4;
  ::pb::lyft::datacatalog::Parameter* mutable_outputs(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Parameter >*
      mutable_outputs();
  const ::pb::lyft::datacatalog::Parameter& outputs(int index) const;
  ::pb::lyft::datacatalog::Parameter* add_outputs();
  const ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Parameter >&
      outputs() const;

  // string reference_id = 2;
  void clear_reference_id();
  static const int kReferenceIdFieldNumber = 2;
  const ::std::string& reference_id() const;
  void set_reference_id(const ::std::string& value);
  #if LANG_CXX11
  void set_reference_id(::std::string&& value);
  #endif
  void set_reference_id(const char* value);
  void set_reference_id(const char* value, size_t size);
  ::std::string* mutable_reference_id();
  ::std::string* release_reference_id();
  void set_allocated_reference_id(::std::string* reference_id);

  // .pb.lyft.datacatalog.ArtifactId ref = 1;
  bool has_ref() const;
  void clear_ref();
  static const int kRefFieldNumber = 1;
  const ::pb::lyft::datacatalog::ArtifactId& ref() const;
  ::pb::lyft::datacatalog::ArtifactId* release_ref();
  ::pb::lyft::datacatalog::ArtifactId* mutable_ref();
  void set_allocated_ref(::pb::lyft::datacatalog::ArtifactId* ref);

  // int64 revision = 3;
  void clear_revision();
  static const int kRevisionFieldNumber = 3;
  ::google::protobuf::int64 revision() const;
  void set_revision(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.lyft.datacatalog.CreateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Parameter > outputs_;
  ::google::protobuf::internal::ArenaStringPtr reference_id_;
  ::pb::lyft::datacatalog::ArtifactId* ref_;
  ::google::protobuf::int64 revision_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
};
// -------------------------------------------------------------------

class CreateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.lyft.datacatalog.CreateResponse) */ {
 public:
  CreateResponse();
  virtual ~CreateResponse();

  CreateResponse(const CreateResponse& from);

  inline CreateResponse& operator=(const CreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateResponse(CreateResponse&& from) noexcept
    : CreateResponse() {
    *this = ::std::move(from);
  }

  inline CreateResponse& operator=(CreateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateResponse* internal_default_instance() {
    return reinterpret_cast<const CreateResponse*>(
               &_CreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CreateResponse* other);
  friend void swap(CreateResponse& a, CreateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateResponse* New() const final {
    return CreateMaybeMessage<CreateResponse>(nullptr);
  }

  CreateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateResponse& from);
  void MergeFrom(const CreateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CreateResponse_Status Status;
  static const Status ALREADY_EXISTS =
    CreateResponse_Status_ALREADY_EXISTS;
  static const Status CREATED =
    CreateResponse_Status_CREATED;
  static inline bool Status_IsValid(int value) {
    return CreateResponse_Status_IsValid(value);
  }
  static const Status Status_MIN =
    CreateResponse_Status_Status_MIN;
  static const Status Status_MAX =
    CreateResponse_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    CreateResponse_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return CreateResponse_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return CreateResponse_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return CreateResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .pb.lyft.datacatalog.Artifact artifact = 1;
  bool has_artifact() const;
  void clear_artifact();
  static const int kArtifactFieldNumber = 1;
  const ::pb::lyft::datacatalog::Artifact& artifact() const;
  ::pb::lyft::datacatalog::Artifact* release_artifact();
  ::pb::lyft::datacatalog::Artifact* mutable_artifact();
  void set_allocated_artifact(::pb::lyft::datacatalog::Artifact* artifact);

  // .pb.lyft.datacatalog.CreateResponse.Status status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::pb::lyft::datacatalog::CreateResponse_Status status() const;
  void set_status(::pb::lyft::datacatalog::CreateResponse_Status value);

  // @@protoc_insertion_point(class_scope:pb.lyft.datacatalog.CreateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::lyft::datacatalog::Artifact* artifact_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
};
// -------------------------------------------------------------------

class GenerateProvenanceRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.lyft.datacatalog.GenerateProvenanceRequest) */ {
 public:
  GenerateProvenanceRequest();
  virtual ~GenerateProvenanceRequest();

  GenerateProvenanceRequest(const GenerateProvenanceRequest& from);

  inline GenerateProvenanceRequest& operator=(const GenerateProvenanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GenerateProvenanceRequest(GenerateProvenanceRequest&& from) noexcept
    : GenerateProvenanceRequest() {
    *this = ::std::move(from);
  }

  inline GenerateProvenanceRequest& operator=(GenerateProvenanceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GenerateProvenanceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenerateProvenanceRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateProvenanceRequest*>(
               &_GenerateProvenanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(GenerateProvenanceRequest* other);
  friend void swap(GenerateProvenanceRequest& a, GenerateProvenanceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GenerateProvenanceRequest* New() const final {
    return CreateMaybeMessage<GenerateProvenanceRequest>(nullptr);
  }

  GenerateProvenanceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GenerateProvenanceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GenerateProvenanceRequest& from);
  void MergeFrom(const GenerateProvenanceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateProvenanceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.lyft.datacatalog.ArtifactId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::pb::lyft::datacatalog::ArtifactId& id() const;
  ::pb::lyft::datacatalog::ArtifactId* release_id();
  ::pb::lyft::datacatalog::ArtifactId* mutable_id();
  void set_allocated_id(::pb::lyft::datacatalog::ArtifactId* id);

  // @@protoc_insertion_point(class_scope:pb.lyft.datacatalog.GenerateProvenanceRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::lyft::datacatalog::ArtifactId* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
};
// -------------------------------------------------------------------

class GenerateProvenanceResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.lyft.datacatalog.GenerateProvenanceResponse) */ {
 public:
  GenerateProvenanceResponse();
  virtual ~GenerateProvenanceResponse();

  GenerateProvenanceResponse(const GenerateProvenanceResponse& from);

  inline GenerateProvenanceResponse& operator=(const GenerateProvenanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GenerateProvenanceResponse(GenerateProvenanceResponse&& from) noexcept
    : GenerateProvenanceResponse() {
    *this = ::std::move(from);
  }

  inline GenerateProvenanceResponse& operator=(GenerateProvenanceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GenerateProvenanceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenerateProvenanceResponse* internal_default_instance() {
    return reinterpret_cast<const GenerateProvenanceResponse*>(
               &_GenerateProvenanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(GenerateProvenanceResponse* other);
  friend void swap(GenerateProvenanceResponse& a, GenerateProvenanceResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GenerateProvenanceResponse* New() const final {
    return CreateMaybeMessage<GenerateProvenanceResponse>(nullptr);
  }

  GenerateProvenanceResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GenerateProvenanceResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GenerateProvenanceResponse& from);
  void MergeFrom(const GenerateProvenanceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateProvenanceResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string provenance = 1;
  void clear_provenance();
  static const int kProvenanceFieldNumber = 1;
  const ::std::string& provenance() const;
  void set_provenance(const ::std::string& value);
  #if LANG_CXX11
  void set_provenance(::std::string&& value);
  #endif
  void set_provenance(const char* value);
  void set_provenance(const char* value, size_t size);
  ::std::string* mutable_provenance();
  ::std::string* release_provenance();
  void set_allocated_provenance(::std::string* provenance);

  // @@protoc_insertion_point(class_scope:pb.lyft.datacatalog.GenerateProvenanceResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr provenance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Parameter

// string name = 1;
inline void Parameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Parameter::name() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.Parameter.name)
  return name_.GetNoArena();
}
inline void Parameter::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.Parameter.name)
}
#if LANG_CXX11
inline void Parameter::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lyft.datacatalog.Parameter.name)
}
#endif
inline void Parameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lyft.datacatalog.Parameter.name)
}
inline void Parameter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lyft.datacatalog.Parameter.name)
}
inline ::std::string* Parameter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.Parameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Parameter::release_name() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.Parameter.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Parameter::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.Parameter.name)
}

// string value = 2;
inline void Parameter::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Parameter::value() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.Parameter.value)
  return value_.GetNoArena();
}
inline void Parameter::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.Parameter.value)
}
#if LANG_CXX11
inline void Parameter::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lyft.datacatalog.Parameter.value)
}
#endif
inline void Parameter::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lyft.datacatalog.Parameter.value)
}
inline void Parameter::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lyft.datacatalog.Parameter.value)
}
inline ::std::string* Parameter::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.Parameter.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Parameter::release_value() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.Parameter.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Parameter::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.Parameter.value)
}

// -------------------------------------------------------------------

// Artifact

// string provenance = 1;
inline void Artifact::clear_provenance() {
  provenance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Artifact::provenance() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.Artifact.provenance)
  return provenance_.GetNoArena();
}
inline void Artifact::set_provenance(const ::std::string& value) {
  
  provenance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.Artifact.provenance)
}
#if LANG_CXX11
inline void Artifact::set_provenance(::std::string&& value) {
  
  provenance_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lyft.datacatalog.Artifact.provenance)
}
#endif
inline void Artifact::set_provenance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  provenance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lyft.datacatalog.Artifact.provenance)
}
inline void Artifact::set_provenance(const char* value, size_t size) {
  
  provenance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lyft.datacatalog.Artifact.provenance)
}
inline ::std::string* Artifact::mutable_provenance() {
  
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.Artifact.provenance)
  return provenance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Artifact::release_provenance() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.Artifact.provenance)
  
  return provenance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Artifact::set_allocated_provenance(::std::string* provenance) {
  if (provenance != nullptr) {
    
  } else {
    
  }
  provenance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), provenance);
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.Artifact.provenance)
}

// string name = 2;
inline void Artifact::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Artifact::name() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.Artifact.name)
  return name_.GetNoArena();
}
inline void Artifact::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.Artifact.name)
}
#if LANG_CXX11
inline void Artifact::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lyft.datacatalog.Artifact.name)
}
#endif
inline void Artifact::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lyft.datacatalog.Artifact.name)
}
inline void Artifact::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lyft.datacatalog.Artifact.name)
}
inline ::std::string* Artifact::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.Artifact.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Artifact::release_name() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.Artifact.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Artifact::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.Artifact.name)
}

// string version = 3;
inline void Artifact::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Artifact::version() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.Artifact.version)
  return version_.GetNoArena();
}
inline void Artifact::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.Artifact.version)
}
#if LANG_CXX11
inline void Artifact::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lyft.datacatalog.Artifact.version)
}
#endif
inline void Artifact::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lyft.datacatalog.Artifact.version)
}
inline void Artifact::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lyft.datacatalog.Artifact.version)
}
inline ::std::string* Artifact::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.Artifact.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Artifact::release_version() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.Artifact.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Artifact::set_allocated_version(::std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.Artifact.version)
}

// int64 revision = 4;
inline void Artifact::clear_revision() {
  revision_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Artifact::revision() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.Artifact.revision)
  return revision_;
}
inline void Artifact::set_revision(::google::protobuf::int64 value) {
  
  revision_ = value;
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.Artifact.revision)
}

// int64 created_at = 5;
inline void Artifact::clear_created_at() {
  created_at_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Artifact::created_at() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.Artifact.created_at)
  return created_at_;
}
inline void Artifact::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.Artifact.created_at)
}

// string reference_id = 6;
inline void Artifact::clear_reference_id() {
  reference_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Artifact::reference_id() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.Artifact.reference_id)
  return reference_id_.GetNoArena();
}
inline void Artifact::set_reference_id(const ::std::string& value) {
  
  reference_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.Artifact.reference_id)
}
#if LANG_CXX11
inline void Artifact::set_reference_id(::std::string&& value) {
  
  reference_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lyft.datacatalog.Artifact.reference_id)
}
#endif
inline void Artifact::set_reference_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lyft.datacatalog.Artifact.reference_id)
}
inline void Artifact::set_reference_id(const char* value, size_t size) {
  
  reference_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lyft.datacatalog.Artifact.reference_id)
}
inline ::std::string* Artifact::mutable_reference_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.Artifact.reference_id)
  return reference_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Artifact::release_reference_id() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.Artifact.reference_id)
  
  return reference_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Artifact::set_allocated_reference_id(::std::string* reference_id) {
  if (reference_id != nullptr) {
    
  } else {
    
  }
  reference_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_id);
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.Artifact.reference_id)
}

// repeated .pb.lyft.datacatalog.Parameter inputs = 7;
inline int Artifact::inputs_size() const {
  return inputs_.size();
}
inline void Artifact::clear_inputs() {
  inputs_.Clear();
}
inline ::pb::lyft::datacatalog::Parameter* Artifact::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.Artifact.inputs)
  return inputs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Parameter >*
Artifact::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:pb.lyft.datacatalog.Artifact.inputs)
  return &inputs_;
}
inline const ::pb::lyft::datacatalog::Parameter& Artifact::inputs(int index) const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.Artifact.inputs)
  return inputs_.Get(index);
}
inline ::pb::lyft::datacatalog::Parameter* Artifact::add_inputs() {
  // @@protoc_insertion_point(field_add:pb.lyft.datacatalog.Artifact.inputs)
  return inputs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Parameter >&
Artifact::inputs() const {
  // @@protoc_insertion_point(field_list:pb.lyft.datacatalog.Artifact.inputs)
  return inputs_;
}

// repeated .pb.lyft.datacatalog.Parameter outputs = 8;
inline int Artifact::outputs_size() const {
  return outputs_.size();
}
inline void Artifact::clear_outputs() {
  outputs_.Clear();
}
inline ::pb::lyft::datacatalog::Parameter* Artifact::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.Artifact.outputs)
  return outputs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Parameter >*
Artifact::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:pb.lyft.datacatalog.Artifact.outputs)
  return &outputs_;
}
inline const ::pb::lyft::datacatalog::Parameter& Artifact::outputs(int index) const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.Artifact.outputs)
  return outputs_.Get(index);
}
inline ::pb::lyft::datacatalog::Parameter* Artifact::add_outputs() {
  // @@protoc_insertion_point(field_add:pb.lyft.datacatalog.Artifact.outputs)
  return outputs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Parameter >&
Artifact::outputs() const {
  // @@protoc_insertion_point(field_list:pb.lyft.datacatalog.Artifact.outputs)
  return outputs_;
}

// -------------------------------------------------------------------

// ArtifactId

// string name = 1;
inline void ArtifactId::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArtifactId::name() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.ArtifactId.name)
  return name_.GetNoArena();
}
inline void ArtifactId::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.ArtifactId.name)
}
#if LANG_CXX11
inline void ArtifactId::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lyft.datacatalog.ArtifactId.name)
}
#endif
inline void ArtifactId::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lyft.datacatalog.ArtifactId.name)
}
inline void ArtifactId::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lyft.datacatalog.ArtifactId.name)
}
inline ::std::string* ArtifactId::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.ArtifactId.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArtifactId::release_name() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.ArtifactId.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArtifactId::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.ArtifactId.name)
}

// string version = 2;
inline void ArtifactId::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArtifactId::version() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.ArtifactId.version)
  return version_.GetNoArena();
}
inline void ArtifactId::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.ArtifactId.version)
}
#if LANG_CXX11
inline void ArtifactId::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lyft.datacatalog.ArtifactId.version)
}
#endif
inline void ArtifactId::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lyft.datacatalog.ArtifactId.version)
}
inline void ArtifactId::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lyft.datacatalog.ArtifactId.version)
}
inline ::std::string* ArtifactId::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.ArtifactId.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArtifactId::release_version() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.ArtifactId.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArtifactId::set_allocated_version(::std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.ArtifactId.version)
}

// repeated .pb.lyft.datacatalog.Parameter inputs = 3;
inline int ArtifactId::inputs_size() const {
  return inputs_.size();
}
inline void ArtifactId::clear_inputs() {
  inputs_.Clear();
}
inline ::pb::lyft::datacatalog::Parameter* ArtifactId::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.ArtifactId.inputs)
  return inputs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Parameter >*
ArtifactId::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:pb.lyft.datacatalog.ArtifactId.inputs)
  return &inputs_;
}
inline const ::pb::lyft::datacatalog::Parameter& ArtifactId::inputs(int index) const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.ArtifactId.inputs)
  return inputs_.Get(index);
}
inline ::pb::lyft::datacatalog::Parameter* ArtifactId::add_inputs() {
  // @@protoc_insertion_point(field_add:pb.lyft.datacatalog.ArtifactId.inputs)
  return inputs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Parameter >&
ArtifactId::inputs() const {
  // @@protoc_insertion_point(field_list:pb.lyft.datacatalog.ArtifactId.inputs)
  return inputs_;
}

// -------------------------------------------------------------------

// GetRequest

// string provenance = 1;
inline bool GetRequest::has_provenance() const {
  return id_case() == kProvenance;
}
inline void GetRequest::set_has_provenance() {
  _oneof_case_[0] = kProvenance;
}
inline void GetRequest::clear_provenance() {
  if (has_provenance()) {
    id_.provenance_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& GetRequest::provenance() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.GetRequest.provenance)
  if (has_provenance()) {
    return id_.provenance_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void GetRequest::set_provenance(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.GetRequest.provenance)
  if (!has_provenance()) {
    clear_id();
    set_has_provenance();
    id_.provenance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.provenance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.GetRequest.provenance)
}
#if LANG_CXX11
inline void GetRequest::set_provenance(::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.GetRequest.provenance)
  if (!has_provenance()) {
    clear_id();
    set_has_provenance();
    id_.provenance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.provenance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lyft.datacatalog.GetRequest.provenance)
}
#endif
inline void GetRequest::set_provenance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_provenance()) {
    clear_id();
    set_has_provenance();
    id_.provenance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.provenance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lyft.datacatalog.GetRequest.provenance)
}
inline void GetRequest::set_provenance(const char* value, size_t size) {
  if (!has_provenance()) {
    clear_id();
    set_has_provenance();
    id_.provenance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.provenance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lyft.datacatalog.GetRequest.provenance)
}
inline ::std::string* GetRequest::mutable_provenance() {
  if (!has_provenance()) {
    clear_id();
    set_has_provenance();
    id_.provenance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.GetRequest.provenance)
  return id_.provenance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRequest::release_provenance() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.GetRequest.provenance)
  if (has_provenance()) {
    clear_has_id();
    return id_.provenance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void GetRequest::set_allocated_provenance(::std::string* provenance) {
  if (has_id()) {
    clear_id();
  }
  if (provenance != nullptr) {
    set_has_provenance();
    id_.provenance_.UnsafeSetDefault(provenance);
  }
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.GetRequest.provenance)
}

// .pb.lyft.datacatalog.ArtifactId artifact_id = 2;
inline bool GetRequest::has_artifact_id() const {
  return id_case() == kArtifactId;
}
inline void GetRequest::set_has_artifact_id() {
  _oneof_case_[0] = kArtifactId;
}
inline void GetRequest::clear_artifact_id() {
  if (has_artifact_id()) {
    delete id_.artifact_id_;
    clear_has_id();
  }
}
inline ::pb::lyft::datacatalog::ArtifactId* GetRequest::release_artifact_id() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.GetRequest.artifact_id)
  if (has_artifact_id()) {
    clear_has_id();
      ::pb::lyft::datacatalog::ArtifactId* temp = id_.artifact_id_;
    id_.artifact_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb::lyft::datacatalog::ArtifactId& GetRequest::artifact_id() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.GetRequest.artifact_id)
  return has_artifact_id()
      ? *id_.artifact_id_
      : *reinterpret_cast< ::pb::lyft::datacatalog::ArtifactId*>(&::pb::lyft::datacatalog::_ArtifactId_default_instance_);
}
inline ::pb::lyft::datacatalog::ArtifactId* GetRequest::mutable_artifact_id() {
  if (!has_artifact_id()) {
    clear_id();
    set_has_artifact_id();
    id_.artifact_id_ = CreateMaybeMessage< ::pb::lyft::datacatalog::ArtifactId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.GetRequest.artifact_id)
  return id_.artifact_id_;
}

inline bool GetRequest::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void GetRequest::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline GetRequest::IdCase GetRequest::id_case() const {
  return GetRequest::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetResponse

// .pb.lyft.datacatalog.Artifact artifact = 1;
inline bool GetResponse::has_artifact() const {
  return this != internal_default_instance() && artifact_ != nullptr;
}
inline void GetResponse::clear_artifact() {
  if (GetArenaNoVirtual() == nullptr && artifact_ != nullptr) {
    delete artifact_;
  }
  artifact_ = nullptr;
}
inline const ::pb::lyft::datacatalog::Artifact& GetResponse::artifact() const {
  const ::pb::lyft::datacatalog::Artifact* p = artifact_;
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.GetResponse.artifact)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::lyft::datacatalog::Artifact*>(
      &::pb::lyft::datacatalog::_Artifact_default_instance_);
}
inline ::pb::lyft::datacatalog::Artifact* GetResponse::release_artifact() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.GetResponse.artifact)
  
  ::pb::lyft::datacatalog::Artifact* temp = artifact_;
  artifact_ = nullptr;
  return temp;
}
inline ::pb::lyft::datacatalog::Artifact* GetResponse::mutable_artifact() {
  
  if (artifact_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::lyft::datacatalog::Artifact>(GetArenaNoVirtual());
    artifact_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.GetResponse.artifact)
  return artifact_;
}
inline void GetResponse::set_allocated_artifact(::pb::lyft::datacatalog::Artifact* artifact) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete artifact_;
  }
  if (artifact) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      artifact = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, artifact, submessage_arena);
    }
    
  } else {
    
  }
  artifact_ = artifact;
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.GetResponse.artifact)
}

// -------------------------------------------------------------------

// IntFilter

// int64 value = 1;
inline void IntFilter::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 IntFilter::value() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.IntFilter.value)
  return value_;
}
inline void IntFilter::set_value(::google::protobuf::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.IntFilter.value)
}

// .pb.lyft.datacatalog.QueryOperator operator = 2;
inline void IntFilter::clear_operator_() {
  operator__ = 0;
}
inline ::pb::lyft::datacatalog::QueryOperator IntFilter::operator_() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.IntFilter.operator)
  return static_cast< ::pb::lyft::datacatalog::QueryOperator >(operator__);
}
inline void IntFilter::set_operator_(::pb::lyft::datacatalog::QueryOperator value) {
  
  operator__ = value;
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.IntFilter.operator)
}

// -------------------------------------------------------------------

// IntRangeFilter

// int64 min = 1;
inline void IntRangeFilter::clear_min() {
  min_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 IntRangeFilter::min() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.IntRangeFilter.min)
  return min_;
}
inline void IntRangeFilter::set_min(::google::protobuf::int64 value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.IntRangeFilter.min)
}

// int64 max = 2;
inline void IntRangeFilter::clear_max() {
  max_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 IntRangeFilter::max() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.IntRangeFilter.max)
  return max_;
}
inline void IntRangeFilter::set_max(::google::protobuf::int64 value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.IntRangeFilter.max)
}

// -------------------------------------------------------------------

// IntQueryKey

// .pb.lyft.datacatalog.IntFilter val = 1;
inline bool IntQueryKey::has_val() const {
  return filter_case() == kVal;
}
inline void IntQueryKey::set_has_val() {
  _oneof_case_[0] = kVal;
}
inline void IntQueryKey::clear_val() {
  if (has_val()) {
    delete filter_.val_;
    clear_has_filter();
  }
}
inline ::pb::lyft::datacatalog::IntFilter* IntQueryKey::release_val() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.IntQueryKey.val)
  if (has_val()) {
    clear_has_filter();
      ::pb::lyft::datacatalog::IntFilter* temp = filter_.val_;
    filter_.val_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb::lyft::datacatalog::IntFilter& IntQueryKey::val() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.IntQueryKey.val)
  return has_val()
      ? *filter_.val_
      : *reinterpret_cast< ::pb::lyft::datacatalog::IntFilter*>(&::pb::lyft::datacatalog::_IntFilter_default_instance_);
}
inline ::pb::lyft::datacatalog::IntFilter* IntQueryKey::mutable_val() {
  if (!has_val()) {
    clear_filter();
    set_has_val();
    filter_.val_ = CreateMaybeMessage< ::pb::lyft::datacatalog::IntFilter >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.IntQueryKey.val)
  return filter_.val_;
}

// .pb.lyft.datacatalog.IntRangeFilter range = 2;
inline bool IntQueryKey::has_range() const {
  return filter_case() == kRange;
}
inline void IntQueryKey::set_has_range() {
  _oneof_case_[0] = kRange;
}
inline void IntQueryKey::clear_range() {
  if (has_range()) {
    delete filter_.range_;
    clear_has_filter();
  }
}
inline ::pb::lyft::datacatalog::IntRangeFilter* IntQueryKey::release_range() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.IntQueryKey.range)
  if (has_range()) {
    clear_has_filter();
      ::pb::lyft::datacatalog::IntRangeFilter* temp = filter_.range_;
    filter_.range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb::lyft::datacatalog::IntRangeFilter& IntQueryKey::range() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.IntQueryKey.range)
  return has_range()
      ? *filter_.range_
      : *reinterpret_cast< ::pb::lyft::datacatalog::IntRangeFilter*>(&::pb::lyft::datacatalog::_IntRangeFilter_default_instance_);
}
inline ::pb::lyft::datacatalog::IntRangeFilter* IntQueryKey::mutable_range() {
  if (!has_range()) {
    clear_filter();
    set_has_range();
    filter_.range_ = CreateMaybeMessage< ::pb::lyft::datacatalog::IntRangeFilter >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.IntQueryKey.range)
  return filter_.range_;
}

inline bool IntQueryKey::has_filter() const {
  return filter_case() != FILTER_NOT_SET;
}
inline void IntQueryKey::clear_has_filter() {
  _oneof_case_[0] = FILTER_NOT_SET;
}
inline IntQueryKey::FilterCase IntQueryKey::filter_case() const {
  return IntQueryKey::FilterCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// QueryRequest

// string name = 1;
inline void QueryRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryRequest::name() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.QueryRequest.name)
  return name_.GetNoArena();
}
inline void QueryRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.QueryRequest.name)
}
#if LANG_CXX11
inline void QueryRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lyft.datacatalog.QueryRequest.name)
}
#endif
inline void QueryRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lyft.datacatalog.QueryRequest.name)
}
inline void QueryRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lyft.datacatalog.QueryRequest.name)
}
inline ::std::string* QueryRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.QueryRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryRequest::release_name() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.QueryRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.QueryRequest.name)
}

// string version = 2;
inline void QueryRequest::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryRequest::version() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.QueryRequest.version)
  return version_.GetNoArena();
}
inline void QueryRequest::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.QueryRequest.version)
}
#if LANG_CXX11
inline void QueryRequest::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lyft.datacatalog.QueryRequest.version)
}
#endif
inline void QueryRequest::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lyft.datacatalog.QueryRequest.version)
}
inline void QueryRequest::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lyft.datacatalog.QueryRequest.version)
}
inline ::std::string* QueryRequest::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.QueryRequest.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryRequest::release_version() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.QueryRequest.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRequest::set_allocated_version(::std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.QueryRequest.version)
}

// .pb.lyft.datacatalog.IntQueryKey revision = 3;
inline bool QueryRequest::has_revision() const {
  return this != internal_default_instance() && revision_ != nullptr;
}
inline void QueryRequest::clear_revision() {
  if (GetArenaNoVirtual() == nullptr && revision_ != nullptr) {
    delete revision_;
  }
  revision_ = nullptr;
}
inline const ::pb::lyft::datacatalog::IntQueryKey& QueryRequest::revision() const {
  const ::pb::lyft::datacatalog::IntQueryKey* p = revision_;
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.QueryRequest.revision)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::lyft::datacatalog::IntQueryKey*>(
      &::pb::lyft::datacatalog::_IntQueryKey_default_instance_);
}
inline ::pb::lyft::datacatalog::IntQueryKey* QueryRequest::release_revision() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.QueryRequest.revision)
  
  ::pb::lyft::datacatalog::IntQueryKey* temp = revision_;
  revision_ = nullptr;
  return temp;
}
inline ::pb::lyft::datacatalog::IntQueryKey* QueryRequest::mutable_revision() {
  
  if (revision_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::lyft::datacatalog::IntQueryKey>(GetArenaNoVirtual());
    revision_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.QueryRequest.revision)
  return revision_;
}
inline void QueryRequest::set_allocated_revision(::pb::lyft::datacatalog::IntQueryKey* revision) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete revision_;
  }
  if (revision) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      revision = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, revision, submessage_arena);
    }
    
  } else {
    
  }
  revision_ = revision;
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.QueryRequest.revision)
}

// int64 created_at = 4;
inline void QueryRequest::clear_created_at() {
  created_at_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 QueryRequest::created_at() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.QueryRequest.created_at)
  return created_at_;
}
inline void QueryRequest::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.QueryRequest.created_at)
}

// string reference_id = 5;
inline void QueryRequest::clear_reference_id() {
  reference_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryRequest::reference_id() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.QueryRequest.reference_id)
  return reference_id_.GetNoArena();
}
inline void QueryRequest::set_reference_id(const ::std::string& value) {
  
  reference_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.QueryRequest.reference_id)
}
#if LANG_CXX11
inline void QueryRequest::set_reference_id(::std::string&& value) {
  
  reference_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lyft.datacatalog.QueryRequest.reference_id)
}
#endif
inline void QueryRequest::set_reference_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lyft.datacatalog.QueryRequest.reference_id)
}
inline void QueryRequest::set_reference_id(const char* value, size_t size) {
  
  reference_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lyft.datacatalog.QueryRequest.reference_id)
}
inline ::std::string* QueryRequest::mutable_reference_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.QueryRequest.reference_id)
  return reference_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryRequest::release_reference_id() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.QueryRequest.reference_id)
  
  return reference_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRequest::set_allocated_reference_id(::std::string* reference_id) {
  if (reference_id != nullptr) {
    
  } else {
    
  }
  reference_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_id);
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.QueryRequest.reference_id)
}

// -------------------------------------------------------------------

// QueryResponse

// repeated .pb.lyft.datacatalog.Artifact artifact = 1;
inline int QueryResponse::artifact_size() const {
  return artifact_.size();
}
inline void QueryResponse::clear_artifact() {
  artifact_.Clear();
}
inline ::pb::lyft::datacatalog::Artifact* QueryResponse::mutable_artifact(int index) {
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.QueryResponse.artifact)
  return artifact_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Artifact >*
QueryResponse::mutable_artifact() {
  // @@protoc_insertion_point(field_mutable_list:pb.lyft.datacatalog.QueryResponse.artifact)
  return &artifact_;
}
inline const ::pb::lyft::datacatalog::Artifact& QueryResponse::artifact(int index) const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.QueryResponse.artifact)
  return artifact_.Get(index);
}
inline ::pb::lyft::datacatalog::Artifact* QueryResponse::add_artifact() {
  // @@protoc_insertion_point(field_add:pb.lyft.datacatalog.QueryResponse.artifact)
  return artifact_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Artifact >&
QueryResponse::artifact() const {
  // @@protoc_insertion_point(field_list:pb.lyft.datacatalog.QueryResponse.artifact)
  return artifact_;
}

// -------------------------------------------------------------------

// CreateRequest

// .pb.lyft.datacatalog.ArtifactId ref = 1;
inline bool CreateRequest::has_ref() const {
  return this != internal_default_instance() && ref_ != nullptr;
}
inline void CreateRequest::clear_ref() {
  if (GetArenaNoVirtual() == nullptr && ref_ != nullptr) {
    delete ref_;
  }
  ref_ = nullptr;
}
inline const ::pb::lyft::datacatalog::ArtifactId& CreateRequest::ref() const {
  const ::pb::lyft::datacatalog::ArtifactId* p = ref_;
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.CreateRequest.ref)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::lyft::datacatalog::ArtifactId*>(
      &::pb::lyft::datacatalog::_ArtifactId_default_instance_);
}
inline ::pb::lyft::datacatalog::ArtifactId* CreateRequest::release_ref() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.CreateRequest.ref)
  
  ::pb::lyft::datacatalog::ArtifactId* temp = ref_;
  ref_ = nullptr;
  return temp;
}
inline ::pb::lyft::datacatalog::ArtifactId* CreateRequest::mutable_ref() {
  
  if (ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::lyft::datacatalog::ArtifactId>(GetArenaNoVirtual());
    ref_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.CreateRequest.ref)
  return ref_;
}
inline void CreateRequest::set_allocated_ref(::pb::lyft::datacatalog::ArtifactId* ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ref_;
  }
  if (ref) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ref, submessage_arena);
    }
    
  } else {
    
  }
  ref_ = ref;
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.CreateRequest.ref)
}

// string reference_id = 2;
inline void CreateRequest::clear_reference_id() {
  reference_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateRequest::reference_id() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.CreateRequest.reference_id)
  return reference_id_.GetNoArena();
}
inline void CreateRequest::set_reference_id(const ::std::string& value) {
  
  reference_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.CreateRequest.reference_id)
}
#if LANG_CXX11
inline void CreateRequest::set_reference_id(::std::string&& value) {
  
  reference_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lyft.datacatalog.CreateRequest.reference_id)
}
#endif
inline void CreateRequest::set_reference_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lyft.datacatalog.CreateRequest.reference_id)
}
inline void CreateRequest::set_reference_id(const char* value, size_t size) {
  
  reference_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lyft.datacatalog.CreateRequest.reference_id)
}
inline ::std::string* CreateRequest::mutable_reference_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.CreateRequest.reference_id)
  return reference_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateRequest::release_reference_id() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.CreateRequest.reference_id)
  
  return reference_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRequest::set_allocated_reference_id(::std::string* reference_id) {
  if (reference_id != nullptr) {
    
  } else {
    
  }
  reference_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_id);
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.CreateRequest.reference_id)
}

// int64 revision = 3;
inline void CreateRequest::clear_revision() {
  revision_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 CreateRequest::revision() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.CreateRequest.revision)
  return revision_;
}
inline void CreateRequest::set_revision(::google::protobuf::int64 value) {
  
  revision_ = value;
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.CreateRequest.revision)
}

// repeated .pb.lyft.datacatalog.Parameter outputs = 4;
inline int CreateRequest::outputs_size() const {
  return outputs_.size();
}
inline void CreateRequest::clear_outputs() {
  outputs_.Clear();
}
inline ::pb::lyft::datacatalog::Parameter* CreateRequest::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.CreateRequest.outputs)
  return outputs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Parameter >*
CreateRequest::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:pb.lyft.datacatalog.CreateRequest.outputs)
  return &outputs_;
}
inline const ::pb::lyft::datacatalog::Parameter& CreateRequest::outputs(int index) const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.CreateRequest.outputs)
  return outputs_.Get(index);
}
inline ::pb::lyft::datacatalog::Parameter* CreateRequest::add_outputs() {
  // @@protoc_insertion_point(field_add:pb.lyft.datacatalog.CreateRequest.outputs)
  return outputs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::lyft::datacatalog::Parameter >&
CreateRequest::outputs() const {
  // @@protoc_insertion_point(field_list:pb.lyft.datacatalog.CreateRequest.outputs)
  return outputs_;
}

// -------------------------------------------------------------------

// CreateResponse

// .pb.lyft.datacatalog.Artifact artifact = 1;
inline bool CreateResponse::has_artifact() const {
  return this != internal_default_instance() && artifact_ != nullptr;
}
inline void CreateResponse::clear_artifact() {
  if (GetArenaNoVirtual() == nullptr && artifact_ != nullptr) {
    delete artifact_;
  }
  artifact_ = nullptr;
}
inline const ::pb::lyft::datacatalog::Artifact& CreateResponse::artifact() const {
  const ::pb::lyft::datacatalog::Artifact* p = artifact_;
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.CreateResponse.artifact)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::lyft::datacatalog::Artifact*>(
      &::pb::lyft::datacatalog::_Artifact_default_instance_);
}
inline ::pb::lyft::datacatalog::Artifact* CreateResponse::release_artifact() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.CreateResponse.artifact)
  
  ::pb::lyft::datacatalog::Artifact* temp = artifact_;
  artifact_ = nullptr;
  return temp;
}
inline ::pb::lyft::datacatalog::Artifact* CreateResponse::mutable_artifact() {
  
  if (artifact_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::lyft::datacatalog::Artifact>(GetArenaNoVirtual());
    artifact_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.CreateResponse.artifact)
  return artifact_;
}
inline void CreateResponse::set_allocated_artifact(::pb::lyft::datacatalog::Artifact* artifact) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete artifact_;
  }
  if (artifact) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      artifact = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, artifact, submessage_arena);
    }
    
  } else {
    
  }
  artifact_ = artifact;
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.CreateResponse.artifact)
}

// .pb.lyft.datacatalog.CreateResponse.Status status = 2;
inline void CreateResponse::clear_status() {
  status_ = 0;
}
inline ::pb::lyft::datacatalog::CreateResponse_Status CreateResponse::status() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.CreateResponse.status)
  return static_cast< ::pb::lyft::datacatalog::CreateResponse_Status >(status_);
}
inline void CreateResponse::set_status(::pb::lyft::datacatalog::CreateResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.CreateResponse.status)
}

// -------------------------------------------------------------------

// GenerateProvenanceRequest

// .pb.lyft.datacatalog.ArtifactId id = 1;
inline bool GenerateProvenanceRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline void GenerateProvenanceRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::pb::lyft::datacatalog::ArtifactId& GenerateProvenanceRequest::id() const {
  const ::pb::lyft::datacatalog::ArtifactId* p = id_;
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.GenerateProvenanceRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::lyft::datacatalog::ArtifactId*>(
      &::pb::lyft::datacatalog::_ArtifactId_default_instance_);
}
inline ::pb::lyft::datacatalog::ArtifactId* GenerateProvenanceRequest::release_id() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.GenerateProvenanceRequest.id)
  
  ::pb::lyft::datacatalog::ArtifactId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::pb::lyft::datacatalog::ArtifactId* GenerateProvenanceRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::lyft::datacatalog::ArtifactId>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.GenerateProvenanceRequest.id)
  return id_;
}
inline void GenerateProvenanceRequest::set_allocated_id(::pb::lyft::datacatalog::ArtifactId* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.GenerateProvenanceRequest.id)
}

// -------------------------------------------------------------------

// GenerateProvenanceResponse

// string provenance = 1;
inline void GenerateProvenanceResponse::clear_provenance() {
  provenance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GenerateProvenanceResponse::provenance() const {
  // @@protoc_insertion_point(field_get:pb.lyft.datacatalog.GenerateProvenanceResponse.provenance)
  return provenance_.GetNoArena();
}
inline void GenerateProvenanceResponse::set_provenance(const ::std::string& value) {
  
  provenance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.lyft.datacatalog.GenerateProvenanceResponse.provenance)
}
#if LANG_CXX11
inline void GenerateProvenanceResponse::set_provenance(::std::string&& value) {
  
  provenance_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.lyft.datacatalog.GenerateProvenanceResponse.provenance)
}
#endif
inline void GenerateProvenanceResponse::set_provenance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  provenance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.lyft.datacatalog.GenerateProvenanceResponse.provenance)
}
inline void GenerateProvenanceResponse::set_provenance(const char* value, size_t size) {
  
  provenance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.lyft.datacatalog.GenerateProvenanceResponse.provenance)
}
inline ::std::string* GenerateProvenanceResponse::mutable_provenance() {
  
  // @@protoc_insertion_point(field_mutable:pb.lyft.datacatalog.GenerateProvenanceResponse.provenance)
  return provenance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GenerateProvenanceResponse::release_provenance() {
  // @@protoc_insertion_point(field_release:pb.lyft.datacatalog.GenerateProvenanceResponse.provenance)
  
  return provenance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GenerateProvenanceResponse::set_allocated_provenance(::std::string* provenance) {
  if (provenance != nullptr) {
    
  } else {
    
  }
  provenance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), provenance);
  // @@protoc_insertion_point(field_set_allocated:pb.lyft.datacatalog.GenerateProvenanceResponse.provenance)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace datacatalog
}  // namespace lyft
}  // namespace pb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::lyft::datacatalog::CreateResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::lyft::datacatalog::CreateResponse_Status>() {
  return ::pb::lyft::datacatalog::CreateResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::pb::lyft::datacatalog::QueryOperator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::lyft::datacatalog::QueryOperator>() {
  return ::pb::lyft::datacatalog::QueryOperator_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fdatacatalog_2fdatacatalog_2eproto
